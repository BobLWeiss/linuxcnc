#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# 
# Description: configure.in
#   Autonconf produce a ./configure from this file
#   that's used to discover various programs/dependencies
#   usage: autoconf
#
# Authors: paul_c alex_joni jepler
# License: GPL Version 2
# System: Linux
#    
# Copyright (c) 2004 All rights reserved.
#
# Last change:
# This file is released under GPL, refer to docs/README for details
#
# This file is adapted to replace the old ./configure script
# therefor it includes parts of that script

##############################################################################
# Section 1                                                                  #
# Autoconf initialisation                                                    #
##############################################################################

AC_PREREQ(2.53)
AC_INIT([LinuxCNC],[m4_normalize(esyscmd(cat ../VERSION))],[emc-developers@lists.sourceforge.net])
AC_CONFIG_SRCDIR(emc/motion/motion.c)
if test "$srcdir" != "."; then
    AC_MSG_ERROR([Building outside of srcdir is not supported])
fi

AC_MSG_CHECKING(build toplevel)
BUILD_TOPLEVEL="$(cd ..; pwd -P)"
AC_MSG_RESULT($BUILD_TOPLEVEL)

AC_CONFIG_HEADER(config.h)

# Support some of the standard configure options for directories
AC_PREFIX_DEFAULT(run-in-place)

AC_MSG_CHECKING(installation prefix)
if test "x$prefix" = "xNONE"; then
  RUN_IN_PLACE=yes
  AC_MSG_RESULT(run in place)
  prefix=${BUILD_TOPLEVEL}
else
  RUN_IN_PLACE=no
  AC_MSG_RESULT($prefix)
fi
AC_SUBST(AUTODIRS)

# internationalisation package name:
PACKAGE="linuxcnc"
AC_SUBST([PACKAGE])

if test -f ../VERSION; then
    EMC2VERSION="$(cat ../VERSION)"
else
    EMC2VERSION="Undetermined"
fi
AC_SUBST([EMC2VERSION])

AC_PATH_PROG(GREP, grep)
AC_PATH_PROG(EGREP, egrep)
AC_PATH_PROG(ARCHCMD, arch)

##############################################################################
# Section 2                                                                  #
# RealTime checking                                                          #
# Subsection 2.0 - initialize RT thread flavor data                          #
# Subsection 2.1 - arguments to ./configure (--with-realtime)                #
# Subsection 2.2 - if none specified above, RTDIR needs to be found by search#
# Subsection 2.3 - RTS(RT-script) is found, it gets queried for values       #
##############################################################################

dnl #--------------------------------------------------------#
dnl # list of all thread styles with FLAVOR_ID and BUILD_SYS #
dnl #                                                        #
dnl # each thread style needs a 4-item m4 tuple set here:    #
dnl # flavor-name, flavor-id, build-sys, threads-headers     #
dnl #                                                        #
dnl # flavor-id: a unique integer                            #
dnl # build-sys: one of kbuild or user-dso                   #
dnl # threads-headers: header file from rtapi/*.h (w/o '.h') #
dnl #                                                        #
dnl # these are used in both Makefiles and in config.h,      #
dnl # and are the single authoritative source for these data #
dnl #--------------------------------------------------------#
AC_DEFUN([_cfg_flavor_params],
	[[[posix],[0],[user-dso],[rt-preempt]],
	 [[rt-preempt],[1],[user-dso],[rt-preempt]],
	 [[xenomai],[2],[user-dso],[xenomai]],
	 [[xenomai-kernel],[3],[kbuild],[xenomai-kernel]],
	 [[rtai-kernel],[4],[kbuild],[rtai-kernel]]])


dnl #--------------------------------------------------------#
dnl # m4 convenience macros for accessing above data         #

dnl list of all thread styles to be used in macros
dnl   posix,rt-preempt,xenomai,xenomai-kernel,rtai
AC_DEFUN([_cfg_all_flavors],
	m4_map_sep([m4_car],[[,]],[_cfg_flavor_params]))

dnl _cfg_flavor_id(flavor):  return THREAD_FLAVOR_ID
dnl   _cfg_flavor_id(xenomai) => 2; _cfg_flavor_id(rtai) => 4
AC_DEFUN([_cfg_flavor_tuple_id],[$2])
AC_DEFUN([_cfg_flavor_id],
	[m4_foreach([flav],[_cfg_flavor_params],
	    [m4_cond(m4_car(flav),$1,
	        m4_apply([_cfg_flavor_tuple_id],[flav]))])])

dnl _cfg_flavor_build_sys(flavor):  return BUILD_SYS:  kbuild or user-dso
dnl   for use in Makefiles
dnl   _config_flavor_build_sys(xenomai) => user-dso;
dnl   _config_flavor_build_sys(xenomai-kernel) => kbuild;
AC_DEFUN([_cfg_flavor_tuple_build_sys],[$3])
AC_DEFUN([_cfg_flavor_build_sys],
	[m4_foreach([flav],[_cfg_flavor_params],
	    [m4_cond(m4_car(flav),$1,
	        m4_apply([_cfg_flavor_tuple_build_sys],[flav]))])])

dnl _cfg_flavor_threads_headers(flavor):  return THREADS_HEADERS
dnl   for use in config.h
dnl   _config_flavor_threads_headers(xenomai) => rtapi/xenomai.h;
dnl   _config_flavor_threads_headers(posix) => rtapi/rt-preempt.h;
AC_DEFUN([_cfg_flavor_tuple_threads_headers],[$4])
AC_DEFUN([_cfg_flavor_threads_headers],
	rtapi/[m4_foreach([flav],[_cfg_flavor_params],
	    [m4_cond(m4_car(flav),$1,
	        m4_apply([_cfg_flavor_tuple_threads_headers],[flav]))])].h)

dnl _cfg_flavor_ucase(flavor):  return uppercase, and dashes->underscores
dnl   used to generate C preprocessor macro names
dnl   _cfg_flavor_ucase(xenomai-kernel) => XENOMAI_KERNEL
AC_DEFUN([_cfg_flavor_upcase],[m4_translit([$*],[a-z-],[A-Z_])])

dnl _cfg_flavor_BUILD_SYS(flavor):  return BUILD_SYS_{KBUILD,USER_DSO}
dnl   for use in config.h
dnl   _config_flavor_BUILD_SYS(xenomai) => BUILD_SYS_USER_DSO;
dnl   _config_flavor_BUILD_SYS(xenomai-kernel) => BUILD_SYS_KBUILD;
AC_DEFUN([_cfg_flavor_BUILD_SYS],
	[BUILD_SYS_[]_cfg_flavor_upcase(_cfg_flavor_build_sys($1))])

dnl _cfg_kbuild_flavors:  list of kbuild RT thread flavors
dnl   _cfg_kbuild_flavors => xenomai-kernel,rtai
AC_DEFUN([_cfg_flavor_tuple_name],[$1])
m4_foreach([flav],[_cfg_flavor_params],
	[m4_cond(_cfg_flavor_build_sys(flav),[kbuild],
	    [m4_append_uniq([_cfg_tmp],_cfg_flavor_tuple_name(flav),[[ ]])]
)])
AC_DEFUN([_cfg_kbuild_flavors],m4_split(_cfg_tmp))


#--------------------------------------------------------#
# default values                                         #

# we'll be using it for compile tests
# might be extended by RTSCC later
AC_PROG_CC([gcc])  

# a list of all configured threads systems to build
BUILD_THREAD_FLAVORS=""

# a compiler which might be specific for the realime system.
# relevant case: rtai-config -cc
RTSCC=""

# a script like /usr/realtime/foo-config, which can be used to extract
# c or ld flags specific for the thread system.
XENOMAI_THREADS_RTS=""
XENOMAI_KERNEL_THREADS_RTS=""
RTAI_KERNEL_THREADS_RTS=""

# Location of configured kernel sources
#
# checked only for kernel threads
XENOMAI_KERNEL_THREADS_KERNEL_DIR=""
RTAI_KERNEL_THREADS_KERNEL_DIR=""

# Extra module symbols for kthreads flavors
XENOMAI_KERNEL_THREADS_EXTRA_SYMBOLS=""
RTAI_KERNEL_THREADS_EXTRA_SYMBOLS=""

# c flags for compiling RTAPI
POSIX_THREADS_RTFLAGS=""
RT_PREEMPT_THREADS_RTFLAGS=""
XENOMAI_THREADS_RTFLAGS=""
XENOMAI_KERNEL_THREADS_RTFLAGS=""
RTAI_KERNEL_THREADS_RTFLAGS=""

# linker flags for RTAPI
POSIX_THREADS_LDFLAGS=""
RT_PREEMPT_THREADS_LDFLAGS=""
XENOMAI_THREADS_LDFLAGS=""
XENOMAI_KERNEL_THREADS_LDFLAGS=""
RTAI_KERNEL_THREADS_LDFLAGS=""

# special RTS C compiler command, if any
RTAI_KERNEL_THREADS_RTSCC=""

# special kernel math CFLAGS, if any
#
# can this be folded into e.g. RTFLAGS?
RTAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS=""
XENOMAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS=""




#----------------------------------------------------------------------------
#
# introduce new build categories as per:
# http://wiki.linuxcnc.org/cgi-bin/wiki.pl?RealtimeConfiguratonProposal
#
# at the shell script/makefile level, we have:
#
# 'THREADS' - one of 'rtai-kernel', 'posix', 'xenomai', 'xenomai-kernel',
# 'rt-preempt' in shell/Makefile
#
THREADS=""

# reflected in config.h like so:
#
# /* thread style posix */
# /* #undef RTAPI_POSIX */
#
# /* thread style rtai-kernel */
# /* #undef RTAPI_RTAI_KERNEL */
#
# /* thread style rt-preempt-kernel */
# /* #undef RTAPI_RTPREEMPT_KERNEL */
#
# /* thread style rt-preempt */
# /* #undef RTAPI_RTPREEMPT */
#
# /* thread style xenomai-kernel */
# /* #undef RTAPI_XENOMAI_KERNEL */
#
# /* thread style xenomai */
# #define RTAPI_XENOMAI /**/
#

# ------------ drivers: build or dont build -------------
#
# A third angle is whether to build drivers or not. Normally drivers would be
# built except for the simulator version. However, there is no reason not to develop 
# user-mode drivers with a simulator, in which case drivers should be built, and the
# 'sudo make setuid' step will be required.
# Wether a given driver should be compiled should be defined in the Submakefile,
# subject to supported BUILD_SYS and possibly THREADS.
#
# To reduce the suprise factor of a simulator config suddenly talking to ports,
# BUILD_DRIVERS defaults to 'no' for the 'simulator' build. 
# to explicitly enable them, we add a '--enable-drivers' option for that case.
#
BUILD_DRIVERS="no"
# reflected in config.h as follows:
# /* build hardware drivers */
# #define BUILD_DRIVERS /**/
#
# the existing configurations will translate as follows:
#
# --enable-simulator: THREADS=posix, BUILD_SYS=user-dso, BUILD_DRIVERS=no
#   defines shell subsitution, and make variables as follows:
#           BUILD_SYS=usr-dso THREADS=posix BUILD_DRIVERS=no
#   define in config.h: BUILD_USER_DSO RTAPI_POSIX
#
# --enable-simulator --enable-drivers will set BUILD_DRIVERS=yes in shell/Makefiles
#   and define in config.h: BUILD_DRIVERS
#
# 
#--with-kernel=/boot/config-<whatever>  which defaults to running kernel 
#--with-build-type=(posix,rtai-kernel,rt-preempt,xenomai,xenomai-kernel) 
#--enable-drivers (defaults to yes except for --with-build-type=posix which is newspeak for 'sim')

#the latter can be defaulted too once you have access to /boot/config*, and checked against kernel

#In practice this would look like so:

#configure --enable-simulator 
# 	as before. defaults to --with-build-type=posix, and --disable-drivers but may take a --enable-drivers #option to build drivers like sim_parport
#	doesnt care about kernel; fine if Gnu threads library installed.
#
#configure
#	Takes the running kernel config to determine which kernel type (rtai-kernel, xenomai, rt-preempt)
#	makes a default thread style (rtai-kernel, rt-preempt and xenomai for now)
#	complains if running kernel is generic (non-RT)
#	implies --enable-drivers. Module type derived from thread style.
#
#configure --with-build-type=xenomai --with-kernel=/boot/config-2.6.38.8-xenomai
#	this would build for xenomai-2.6.38.8-xenomai provided it is installed but needs not be running
#	complains if /boot/config-2.6.38.8-xenomai does not smell like a Xenomai config
#
#configure --with-build-type=rt-preempt
#	this would check whether the running kernel is in fact rt-preempt by inspecting /boot/config-`uname #-r` for appropriate flags, and complain otherwise-
KCONFIG=""

# Places to look for Xeno and RTAI kernel headers
#
# RedHat-derivatives: (/usr/src/kernels/`uname -r`),
# Debian-derivatives: (/usr/src/linux-headers-`uname -r`)
# A hopefully generic location: (/lib/modules/`uname -r`/build)
KSOURCE_LOCATION_HINTS=$(echo \
	/usr/src/kernels/* \
	/usr/src/linux-headers-* \
	/lib/modules/*/build \
	)


# Pass math-related CFLAGS into the kernel.
KERNEL_MATH_CFLAGS="-fno-fast-math -fno-unsafe-math-optimizations"


# Parport: on x86 PC platform, we can use either use
# direct inb/outb or the slower but portable ppdev ioctl
USE_PORTABLE_PARPORT_IO="no"
# reflected in config.h as follows:
# /* build hardware drivers */
# #define USE_PORTABLE_PARPORT_IO /**/

# atomic bitops. We have the inline asm stuff in rtapi_bitops.h
# but that's x86 and ppc only. We could just as well use the
# gcc builtin atomic ops which have appeared since, and whack!
# all portable
USE_GCC_ATOMIC_OPS="no"

# Platforms. set by --enable-platform=<platform>
# see Section 2.1 to enable other platforms, and later to AC_DEFINE it
PLATFORM="PC"
TARGET_PLATFORM=""

# Architecture. Use output of arch(1).
#
# FIXME this will break 32-bit builds on 64-bit systems.  Need an
# expert to figure out host/target arch, e.g. --host=i686-pc-linux-gnu
# even when --build=x86_64-pc-linux-gnu
#
# This will cause e.g. incorrect package builds
ARCHITECTURE=`$ARCHCMD`


# Name of thread system source file to include, with no extension
# e.g. 'rt-preempt'; used to generate #include "rt-preempt.h"
# in config.h, rtapi/$(THREADS_SOURCE).c in Makefile.inc
POSIX_THREADS_SOURCE=""
RT_PREEMPT_THREADS_SOURCE=""
XENOMAI_THREADS_SOURCE=""
XENOMAI_KERNEL_THREADS_SOURCE=""
RTAI_KERNEL_THREADS_SOURCE=""

# note to mah: dont forget debian/configure FIXME
 

##############################################################################
# Subsection 2.1                                                             #
# Check for arguments to ./configure                                         #
# parse --enable-drivers, --with-kernel, --with-threads, --enable-simulator  #
# complain about --with-realtime                                             #
##############################################################################

AC_MSG_CHECKING(platform)
AC_ARG_WITH(platform,
    [  --with-platform=<platform>   Build for specific platform],
    [
        case "$withval" in
            PC*|pc*)
		TARGET_PLATFORM=PC
                AC_MSG_RESULT([configuring for PC platform])
            ;;
            raspberry*|pi*)
		TARGET_PLATFORM=raspberry
                AC_MSG_RESULT([configuring for Raspberry Pi])
            ;;
            beaglebone*|bb)
		TARGET_PLATFORM=beaglebone
                AC_MSG_RESULT([configuring for BeagleBone board])
            ;;
        esac
	if test -z "$TARGET_PLATFORM"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just PC, raspberry, or beaglebone ]) 
	fi
    ],
    [
      AC_MSG_RESULT([using default platform: $PLATFORM])
      TARGET_PLATFORM="$PLATFORM"
    ])

AC_MSG_CHECKING(whether to build programming examples)
AC_ARG_ENABLE(examples,
    [  --enable-examples      build included programming examples],
    [
	BUILD_EXAMPLES=yes
        AC_MSG_RESULT([configuring to build example programs])
    ],
    [
      AC_MSG_RESULT([not building example programs])
      BUILD_EXAMPLES=no
    ])

AC_MSG_CHECKING(whether to use the common shared memory driver)
AC_ARG_ENABLE(shmdrv,
    [  --enable-shmdrv      use the common shared memory driver kernel module],
    [
        case "$enableval" in
            Y*|y*)
		USE_SHMDRV=yes
                AC_MSG_RESULT([explicitly configuring for common shared memory driver kernel module])
            ;;
            N*|n*)
		USE_SHMDRV=no
                AC_MSG_RESULT([explicitly disabling shared memory driver kernel module])
            ;;
        esac
	if test -z "USE_SHMDRV"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ]) 
	fi
    ],
    [
      USE_SHMDRV=yes
      AC_MSG_RESULT([default is yes])
    ])

AC_MSG_CHECKING(whether to use inb/outb or ppdev ioctl on the x86 for parport I/O)
AC_ARG_ENABLE(portable-parport,
    [  --enable-portable-parport      Build hal_parport using the ppdev ioctl instead of inb/outb],
    [
        case "$enableval" in
            Y*|y*)
		USE_PORTABLE_PARPORT_IO=yes
                AC_MSG_RESULT([explicitly configuring for ppdev ioctl])
            ;;
            N*|n*)
		USE_PORTABLE_PARPORT_IO=no
                AC_MSG_RESULT([explicitly disabling ppdev ioctl and using inb/outb])
            ;;
        esac
	if test -z "$USE_PORTABLE_PARPORT_IO"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ])
	fi
    ],
    [
      AC_MSG_RESULT([using defaults: $USE_PORTABLE_PARPORT_IO])
    ])

AC_MSG_CHECKING(whether to use GCC's builtin atomic operations)
AC_ARG_ENABLE(gcc-atomic-ops,
    [  --enable-gcc-atomic-ops      Build using GCC's builtin atomic operations],
    [
        case "$enableval" in
            Y*|y*)
		USE_GCC_ATOMIC_OPS=yes
                AC_MSG_RESULT([using GCC's builtin atomic operations])
            ;;
            N*|n*)
	        if test "$TARGET_PLATFORM" = "raspberry" -o \( "$TARGET_PLATFORM" = "beaglebone" \); then
		   AC_MSG_ERROR([$TARGET_PLATFORM: ARM platforms need --enable-gcc-atomic-ops=yes])
		fi
 		USE_GCC_ATOMIC_OPS=no
                AC_MSG_RESULT([explicitly disabling GCC's builtin atomic operations])
            ;;
        esac
	if test -z "$USE_GCC_ATOMIC_OPS"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ])
	fi
    ],
    [
      if test "$TARGET_PLATFORM" = "raspberry" -o \( "$TARGET_PLATFORM" = "beaglebone" \); then
          AC_MSG_RESULT([ARM platforms($TARGET_PLATFORM): forcing --enable-gcc-atomic-ops=yes])
	  USE_GCC_ATOMIC_OPS=yes
      else
          AC_MSG_RESULT([using defaults: $USE_GCC_ATOMIC_OPS ])
      fi
    ])


##############################################################################
# Flavor detection                                                           #

AC_ARG_WITH(posix,
    [AS_HELP_STRING([--with-posix],
        [build POSIX (simulator) non-realtime threads modules
        (enabled by default)])],
    [],
    [with_posix=yes])

AC_ARG_WITH(rt-preempt,
    [AS_HELP_STRING([--with-rt-preempt],
        [build RT_PREEMPT threads modules])],
    [],
    [with_rt_preempt=check])

if test "$with_rt_preempt" != no -o "$with_posix" != no; then
    LIBS_hold=$LIBS
    LIBS="$LIBS -lrt"

    AC_MSG_CHECKING(-lrt for RT_PREEMPT and POSIX)
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[
	#include <time.h>
	#include <sched.h>
	#include <sys/mman.h>
    ]],
    [[
	struct timespec t;
	clock_gettime(CLOCK_MONOTONIC ,&t);
	clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &t, NULL);
    ]])],
    [
        have_librt=yes
        AC_MSG_RESULT(ok)],
    [
        have_librt=no
        AC_MSG_RESULT(failed)
    ])
    LIBS=$LIBS_hold
fi

AC_MSG_CHECKING(whether to build POSIX threads)
test "$with_posix" = check && with_posix=yes
test "$have_librt" = no && with_posix=no
AC_MSG_RESULT($with_posix)
if test "$with_posix" = yes; then
   POSIX_THREADS_LDFLAGS="-lpthread -lrt"
   POSIX_THREADS_RTFLAGS="$POSIX_THREADS_RTFLAGS -pthread"
   BUILD_THREAD_FLAVORS="$BUILD_THREAD_FLAVORS posix"
fi
   
AC_MSG_CHECKING(whether to build RT_PREEMPT threads)
test "$with_rt_preempt" = check && with_rt_preempt=yes
test "$have_librt" = no && with_rt_preempt=no
AC_MSG_RESULT($with_rt_preempt)
if test "$with_posix" = yes; then
   RT_PREEMPT_THREADS_LDFLAGS="-lpthread -lrt"
   RT_PREEMPT_THREADS_RTFLAGS="$RT_PREEMPT_THREADS_RTFLAGS -pthread"
   BUILD_THREAD_FLAVORS="$BUILD_THREAD_FLAVORS rt-preempt"
fi


# check for xenomai threads, both userland and kernel
AC_PRESERVE_HELP_ORDER()
AC_ARG_WITH(xenomai,
    [AS_HELP_STRING([--with-xenomai],
        [build Xenomai userland threads])],
    [xenomai_from_cmdline=yes],
    [with_xenomai=check])
AC_ARG_WITH(xenomai-kernel,
    [AS_HELP_STRING([--with-xenomai-kernel],
        [build Xenomai kernel-space realtime threads (deprecated)])],
    [xenomai_from_cmdline=yes],
    [with_xenomai_kernel=check])
# XENOMAI_THREADS_RTS:  locate the 'xeno-config' executable
AC_ARG_WITH(xeno-config,
    [AS_HELP_STRING([--with-xeno-config=<path>],
    [location of the xeno-config executable])],
    [xeno_config_from_cmdline=yes])
if test "$with_xenomai" != no -o "$with_xenomai_kernel" != no; then
    # XENOMAI_THREADS_RTS:  look for the xeno-config executable
    if test "$xeno_config_from_cmdline" = yes; then
        XENOMAI_THREADS_RTS="$with_xeno_config"
    else
	AC_PATH_PROGS([XENOMAI_THREADS_RTS],[xeno-config])
    fi
    if test -z "$XENOMAI_THREADS_RTS" -o ! -x "$XENOMAI_THREADS_RTS"; then
	if test "$xeno_config_from_cmdline" = yes; then
	    AC_MSG_ERROR(invalid xeno-config specified)
	fi
	if test "$xenomai_from_cmdline" = yes -o \
		"$xenomai_kernel_from_cmdline" = yes; then
	    AC_MSG_ERROR(xeno-config not found; use --with-xeno-config)
	fi
    fi
    if test -x "$XENOMAI_THREADS_RTS"; then
        # found xeno-config; add default skin option
	XENOMAI_THREADS_RTS="$XENOMAI_THREADS_RTS --skin=native"
    fi
fi

# XENOMAI_THREADS_RTFLAGS:  test runtime library & get flags
if test -n "$XENOMAI_THREADS_RTS"; then
    AC_MSG_CHECKING(Xenomai runtime library)
    CFLAGS_hold=$CFLAGS
    CFLAGS="$CFLAGS "`$XENOMAI_THREADS_RTS --cflags`
    LIBS_hold=$LIBS
    LIBS="$LIBS "`$XENOMAI_THREADS_RTS --ldflags`
    AC_LINK_IFELSE([AC_LANG_PROGRAM(
    [[
	#include <native/task.h>
	#include <native/timer.h>
	RT_TASK demo_task;
	RTIME now;
    ]],
    [[
	rt_task_create(&demo_task, "trivial", 0, 99, 0);
	rt_task_set_periodic(NULL, TM_NOW, 1000000000);
	rt_timer_read();
    ]])],
    [AC_MSG_RESULT(works)],
    [
	AC_MSG_RESULT(failed)
	with_xenomai=no
	with_xenomai_kernel=no
    ])
    LIBS=$LIBS_hold
    CFLAGS=$CFLAGS_hold

    
    flags="$($XENOMAI_THREADS_RTS --cflags)"
    # Xenomai docs recommend turning off CONFIG_CC_STACKPROTECTOR
    # on all arches but x86_64; this causes missing symbols without
    # this CFLAG
    if "$ARCHITECTURE" != x86_64; then
        flags="$flags -fno-stack-protector"
    fi
    XENOMAI_THREADS_RTFLAGS="$XENOMAI_THREADS_RTFLAGS $flags"
    XENOMAI_KERNEL_THREADS_RTFLAGS="$XENOMAI_KERNEL_THREADS_RTFLAGS -g $flags"
    # xenomai kernel math options
    flags="-ffast-math -mhard-float"
    test "$($XENOMAI_THREADS_RTS --arch)" = x86 && \    
        flags="$flags -msse -funsafe-math-optimizations"
    XENOMAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS="$flags"
    # ldflags
    flags="$($XENOMAI_THREADS_RTS --ldflags)"
    XENOMAI_THREADS_LDFLAGS="$XENOMAI_THREADS_LDFLAGS $flags"
    XENOMAI_KERNEL_THREADS_LDFLAGS="$XENOMAI_KERNEL_THREADS_LDFLAGS $flags"
fi
AC_ARG_WITH(kernel-source-xenomai,
    [AS_HELP_STRING([--with-kernel-source-xenomai=<kernel source directory>],
	[location of the xenomai kernel source])],
	[xeno_src_from_cmdline=yes],
	[with_kernel_source_xenomai="$KSOURCE_LOCATION_HINTS"])

if test "$with_xenomai_kernel" != no; then
    AC_MSG_CHECKING(xenomai kernel source location)
    found_location=""
    for location in $with_kernel_source_xenomai; do
	if test -f "$location/.config" && \
		    grep -q '^CONFIG_XENOMAI=' "$location/.config"; then
	    found_location="$location"
	    break
	fi
    done
    with_kernel_source_xenomai=$found_location
    if test -n "$with_kernel_source_xenomai"; then
	XENOMAI_KERNEL_THREADS_KERNEL_DIR=$with_kernel_source_xenomai
	AC_MSG_RESULT($with_kernel_source_xenomai)
    elif test "$xeno_src_from_cmdline" = yes; then
	# invalid --with-kernel-source-xenomai arg given on cmdline
	AC_MSG_RESULT(not found)
	AC_MSG_ERROR(invalid xenomai kernel source directory)
    else
	AC_MSG_RESULT(not found)
    fi
fi

AC_MSG_CHECKING(whether to build Xenomai userland threads)
test "$with_xenomai" = check && with_xenomai=yes
test -z "$XENOMAI_THREADS_RTS" && with_xenomai=no
test $with_xenomai=yes && \
     BUILD_THREAD_FLAVORS="$BUILD_THREAD_FLAVORS xenomai"
AC_MSG_RESULT($with_xenomai)

AC_MSG_CHECKING(whether to build Xenomai kernel threads)
test "$with_xenomai_kernel" = check && with_xenomai_kernel=yes
test -z "$with_kernel_source_xenomai" && with_xenomai_kernel=no
test -z "$XENOMAI_THREADS_RTS" && with_xenomai_kernel=no
if test $with_xenomai_kernel=yes; then
     BUILD_THREAD_FLAVORS="$BUILD_THREAD_FLAVORS xenomai-kernel"
     XENOMAI_KERNEL_THREADS_EXTRA_SYMBOLS=`pwd`/rtapi/xeno_math/Module.symvers
fi
AC_MSG_RESULT($with_xenomai_kernel)


# check for rtai kernel config and source
AC_PRESERVE_HELP_ORDER()
AC_ARG_WITH(rtai-kernel,
    [AS_HELP_STRING([--with-rtai-kernel],
        [build RTAI kernel-space realtime threads modules])],
    [],
    [with_rtai_kernel=check])
# RTAI_KERNEL_THREADS_RTS:  locate the 'rtai-config' executable
AC_ARG_WITH(rtai-config,
    [AS_HELP_STRING([--with-rtai-config=<path>],
    [location of the rtai-config executable])],
    [rtai_config_from_cmdline=yes],
    [
	with_rtai_config=""
	dirs="$(echo \
	   /usr/realtime-`uname -r` /usr/realtime* /usr /usr/src/rtai*)"
	for d in $dirs; do
	    with_rtai_config="$with_rtai_config:$d:$d/bin"
	done
    ])
if test "$with_rtai_kernel" != no; then
    AC_PATH_PROGS([RTAI_KERNEL_THREADS_RTS],[rtai-config],
	[],[$with_rtai_config])
    if test -z "$RTAI_KERNEL_THREADS_RTS" -a "$with_rtai_kernel" = yes; then
            AC_MSG_ERROR("rtai-config" not found; use --with-rtai-config")
    fi
fi
# RTAI_KERNEL_THREADS_KERNEL_DIR:  locate the kernel source
if test -n "$RTAI_KERNEL_THREADS_RTS"; then
    AC_ARG_WITH(kernel-source-rtai,
        [AS_HELP_STRING([--with-kernel-source-rtai=<kernel source directory>],
	    [location of the RTAI kernel source])],
	    [rtai_src_from_cmdline=yes],
	    [with_kernel_source_rtai=$($RTAI_KERNEL_THREADS_RTS --linux-dir)])

    AC_MSG_CHECKING(rtai kernel source location)
    if test ! -f "$with_kernel_source_rtai/.config" || \
	    ! grep -q '^CONFIG_IPIPE=' "$with_kernel_source_rtai/.config" ; then
	with_kernel_source_rtai=""
    fi
    if test -n "$with_kernel_source_rtai"; then
	RTAI_KERNEL_THREADS_KERNEL_DIR=$with_kernel_source_rtai
	AC_MSG_RESULT($RTAI_KERNEL_THREADS_KERNEL_DIR)
    elif test "$rtai_src_from_cmdline" = yes; then
	# invalid --with-kernel-source-rtai arg given on cmdline
	AC_MSG_RESULT(not found)
	AC_MSG_ERROR(invalid rtai kernel source directory)
    else
	AC_MSG_RESULT(not found)
    fi
fi
if test  -n "$RTAI_KERNEL_THREADS_KERNEL_DIR"; then
   # HARDY_AMD64_WORKAROUND: check for an rtai includes problem on
   # older kernels
    AC_MSG_CHECKING(if hardy amd64 workaround is required)
    machine=`uname -m`
    # test for broken hardy rtai amd64 includes
    lxrt=$($RTAI_KERNEL_THREADS_RTS --prefix)/include/asm-x86_64/rtai_lxrt.h
    if test "$machine" = x86_64 ; then
	if test -f $lxrt; then
	    if grep -q '#include <asm/asm-offsets.h>' $lxrt; then
		workaround="-Iworkaround/hardy-amd64 -DBROKEN_RTAI_LXRT"
		AC_MSG_RESULT(required)
	    else
		AC_MSG_RESULT(no, rtai_lxrt.h include file looks ok)
	    fi
	else
	    AC_MSG_RESULT(rtai_lxrt.h missing)
	    AC_MSG_ERROR($lxrt does not exist but should)
	fi
    else
	AC_MSG_RESULT(no, not an amd64 build)
    fi

    AC_MSG_CHECKING([RTAI C compiler])
    # The compiler MUST match the one used to compile the realtime modules if the
    # kernel level code is to function correctly. But if the kernel has been
    # compiled with gcc-2.96, it is unlikely to ever work !
    RTAI_KERNEL_THREADS_RTSCC=`$RTAI_KERNEL_THREADS_RTS --cc`
    if test -n "$RTAI_KERNEL_THREADS_RTSCC"; then
       AC_MSG_RESULT($RTAI_KERNEL_THREADS_RTSCC) 
    else
       AC_MSG_RESULT(default)
    fi

    RTAI_KERNEL_THREADS_RTFLAGS="$($RTAI_KERNEL_THREADS_RTS --module-cflags) \
	$workaround \
	-I$($RTAI_KERNEL_THREADS_RTS --prefix)/include"
    RTAI_KERNEL_THREADS_LDFLAGS="$($RTAI_KERNEL_THREADS_RTS --lxrt-ldflags)"

    if test "$($RTAI_KERNEL_THREADS_RTS --arch)" = x86_64; then
	flags="-msse -funsafe-math-optimizations"
    else
        flags="-fno-unsafe-math-optimizations"
    fi
    RTAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS="$flags"
fi

AC_MSG_CHECKING(whether to build RTAI threads)    
test -z "$RTAI_KERNEL_THREADS_RTS" && with_rtai_kernel=no
test -z "$RTAI_KERNEL_THREADS_KERNEL_DIR" && with_rtai_kernel=no
test "$with_rtai_kernel" = check && with_rtai_kernel=yes
if test $with_rtai_kernel=yes; then
     BUILD_THREAD_FLAVORS="$BUILD_THREAD_FLAVORS rtai-kernel"
     RTAI_KERNEL_THREADS_EXTRA_SYMBOLS=`$RTAI_KERNEL_THREADS_RTS \
	--module-dir`/Module.symvers
fi
AC_MSG_RESULT($with_rtai_kernel)


##############################################################################
# Hardware driver detection                                                  #

AC_MSG_CHECKING(whether to build hardware drivers)
AC_ARG_ENABLE(drivers,
    [AS_HELP_STRING([--enable-drivers],[Build hardware drivers])],
    [with_drivers=$enableval],
    [with_drivers=check])
if test "$with_drivers" = check; then
    with_drivers=yes
fi
AC_MSG_RESULT($with_drivers)

AC_MSG_CHECKING(whether to build usermode PCI hardware drivers)
AC_ARG_ENABLE(usermode-pci,
    [AS_HELP_STRING([--enable-usermode-pci],
        [Build PCI drivers with usermode PCI support])],
    [with_usermode_pci=$enableval],
    [with_usermode_pci=check])
if test "$with_drivers" = no -o "$TARGET_PLATFORM" != PC; then
    with_usermode_pci=no
elif test "$with_usermode_pci" = check; then
    if test "$with_rt_preempt" = "yes" -o "$with_xenomai" = "yes"; then
        with_usermode_pci=yes
    else
        with_usermode_pci=no
    fi
fi
AC_MSG_RESULT($with_usermode_pci)

# now test if libudev is usable if USERMODE_PCI was chosen
LIBUDEV_CFLAGS=
LIBUDEV_LIBS=
if test "$with_usermode_pci" = "yes"; then
   AC_MSG_CHECKING(for libudev)
   if pkg-config libudev >/dev/null 2>&1; then
      LIBUDEV_VER=`pkg-config libudev --version`
      AC_MSG_RESULT(found version $LIBUDEV_VER)
      LIBUDEV_CFLAGS="`pkg-config libudev --cflags`"
      LIBUDEV_LIBS="`pkg-config libudev --libs`"
      LIBS_hold=$LIBS
      LIBS=$LIBUDEV_LIBS
      AC_CHECK_LIB(udev, udev_new, [],
          [AC_MSG_ERROR(libudev unusable)])
      LIBS=$LIBS_hold
   else
       AC_MSG_RESULT(not found)
       AC_MSG_ERROR(libudev required but not found)
   fi
fi


# RTDIR:  FIXME:  needs maintenance (elimination)
# latencyplot only works with RTAI and needs RTDIR
AC_SUBST([RTDIR],$($RTAI_KERNEL_THREADS_RTS --prefix))


if test "$with_drivers" = yes; then
   AC_DEFINE(BUILD_DRIVERS, [], [build hardware drivers])
fi
AC_SUBST(BUILD_DRIVERS,[$with_drivers])

if test "$USE_SHMDRV" = yes; then
   AC_DEFINE(USE_SHMDRV, [], [use shm driver module])
fi
AC_SUBST(USE_SHMDRV)

AC_SUBST(BUILD_EXAMPLES)
if test "$BUILD_EXAMPLES" = yes; then
   AC_DEFINE(BUILD_EXAMPLES, [], [build programming examples])
fi
if test "$with_usermode_pci" = yes; then
   AC_DEFINE([USERMODE_PCI], [], [build PCI drivers with usermode PCI support])
fi
AC_SUBST([USERMODE_PCI],[$with_usermode_pci])
AC_SUBST(LIBUDEV_CFLAGS)
AC_SUBST(LIBUDEV_LIBS)
AC_DEFINE(HAVE_LIBUDEV, [], [libudev installed and available])

if test "$USE_GCC_ATOMIC_OPS" = yes; then
   AC_DEFINE(USE_GCC_ATOMIC_OPS, [], [use GCC builtin atomic operations])
fi
AC_SUBST(USE_GCC_ATOMIC_OPS)

if test "$USE_PORTABLE_PARPORT_IO" = yes; then
   AC_DEFINE(USE_PORTABLE_PARPORT_IO, [], [use ppdev ioctl instead of inb/outb])
fi
AC_SUBST(USE_PORTABLE_PARPORT_IO)

if test "$TARGET_PLATFORM" = "PC"; then
   TARGET_PLATFORM_PC=1
   AC_DEFINE(TARGET_PLATFORM_PC, [], [build for PC platform])
fi
if test "$TARGET_PLATFORM" = "raspberry"; then
   TARGET_PLATFORM_RASPBERRY=1
   AC_DEFINE(TARGET_PLATFORM_RASPBERRY, [], [build for Raspberry Pi platform])
fi
if test "$TARGET_PLATFORM" = "beaglebone"; then
   TARGET_PLATFORM_BEAGLEBONE=1
   AC_DEFINE(TARGET_PLATFORM_BEAGLEBONE, [], [build for BeagleBone platform])
fi
AC_SUBST(TARGET_PLATFORM)

AC_SUBST(ARCHITECTURE)


############################################################
# thread-specific -DDEFINE and Makefile.inc variables

# List of threads flavors
AC_SUBST([BUILD_THREAD_FLAVORS])


# POSIX settings
if test "$with_posix" = yes; then
    AC_DEFINE([HAVE_POSIX_THREADS],[],[Build POSIX threads])
fi
AC_SUBST([HAVE_POSIX_THREADS],[$with_posix])
AC_SUBST([POSIX_THREADS_FLAVOR_ID],_cfg_flavor_id(posix))
AC_SUBST([POSIX_THREADS_BUILD_SYS],_cfg_flavor_build_sys(posix))
AC_SUBST([POSIX_THREADS_SOURCE],[rt-preempt])
AC_SUBST([POSIX_THREADS_RTFLAGS])
AC_SUBST([POSIX_THREADS_LDFLAGS])

# RT_PREEMPT settings
if test "$with_rt_preempt" = yes; then
    AC_DEFINE([HAVE_RT_PREEMPT_THREADS],[],[Build RT_PREEMPT threads])
fi
AC_SUBST([HAVE_RT_PREEMPT_THREADS],[$with_rt_preempt])
AC_SUBST([RT_PREEMPT_THREADS_FLAVOR_ID],_cfg_flavor_id(rt-preempt))
AC_SUBST([RT_PREEMPT_THREADS_BUILD_SYS],_cfg_flavor_build_sys(rt-preempt))
AC_SUBST([RT_PREEMPT_THREADS_SOURCE],[rt-preempt])
AC_SUBST([RT_PREEMPT_THREADS_RTFLAGS])
AC_SUBST([RT_PREEMPT_THREADS_LDFLAGS])

# Xenomai userland settings
if test "$with_xenomai" = yes; then
    AC_DEFINE([HAVE_XENOMAI_THREADS],[],[Build Xenomai userland threads])
fi
AC_SUBST([HAVE_XENOMAI_THREADS],[$with_xenomai])
AC_SUBST([XENOMAI_THREADS_FLAVOR_ID],_cfg_flavor_id(xenomai))
AC_SUBST([XENOMAI_THREADS_BUILD_SYS],_cfg_flavor_build_sys(xenomai))
AC_SUBST([XENOMAI_THREADS_SOURCE],[xenomai])
AC_SUBST([XENOMAI_THREADS_RTFLAGS])
AC_SUBST([XENOMAI_THREADS_LDFLAGS])
AC_SUBST([XENOMAI_THREADS_RTS])

# Xenomai kernel settings
if test "$with_xenomai_kernel" = yes; then
    AC_DEFINE([HAVE_XENOMAI_KERNEL_THREADS],[],[Build Xenomai kernel threads])
fi
AC_SUBST([HAVE_XENOMAI_KERNEL_THREADS],[$with_xenomai_kernel])
AC_SUBST([XENOMAI_KERNEL_THREADS_FLAVOR_ID],_cfg_flavor_id(xenomai-kernel))
AC_SUBST([XENOMAI_KERNEL_THREADS_BUILD_SYS],
	_cfg_flavor_build_sys(xenomai-kernel))
AC_SUBST([XENOMAI_KERNEL_THREADS_SOURCE],[xenomai-kernel])
# force hard-float for kernel modules
AC_SUBST([XENOMAI_KERNEL_THREADS_RTFLAGS])
AC_SUBST([XENOMAI_KERNEL_THREADS_LDFLAGS])
AC_SUBST([XENOMAI_KERNEL_THREADS_KERNEL_DIR])
AC_SUBST([XENOMAI_KERNEL_THREADS_EXTRA_SYMBOLS])
# in-kernel math options
AC_SUBST([XENOMAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS])

# RTAI settings
if test "$with_rtai_kernel" = yes; then
    AC_DEFINE([HAVE_RTAI_KERNEL_THREADS],[],[Build RTAI threads])
fi
AC_SUBST([HAVE_RTAI_KERNEL_THREADS],[$with_rtai_kernel])
AC_SUBST([RTAI_KERNEL_THREADS_FLAVOR_ID],_cfg_flavor_id(rtai-kernel))
AC_SUBST([RTAI_KERNEL_THREADS_BUILD_SYS],_cfg_flavor_build_sys(rtai-kernel))
AC_SUBST([RTAI_KERNEL_THREADS_SOURCE],[rtai-kernel])
AC_SUBST([RTAI_KERNEL_THREADS_RTFLAGS])
AC_SUBST([RTAI_KERNEL_THREADS_LDFLAGS])
AC_SUBST([RTAI_KERNEL_THREADS_KERNEL_DIR])
AC_SUBST([RTAI_KERNEL_THREADS_EXTRA_SYMBOLS])
AC_SUBST([RTAI_KERNEL_THREADS_KERNEL_MATH_CFLAGS])
AC_SUBST([RTAI_KERNEL_THREADS_RTSCC])
# absolute path of rtai-config rtdir with symlinks dereferenced
AC_SUBST([RTAI_KERNEL_THREADS_RTDIR],
	[$(readlink -f `$RTAI_KERNEL_THREADS_RTS --prefix`)])


# while we are at it, drop a git scent mark
GIT_VERSION=unknown
gitcmd=`which git`
if test -n "$gitcmd"; then
   version=`(cd ..;scripts/get-version-from-git)` 2>/dev/null
   if test -n "$version"; then
      GIT_VERSION=$version
   fi
fi
AC_SUBST(GIT_VERSION)


EMC2_HOME=`(cd .. ; pwd)`
AC_SUBST([EMC2_HOME])


##############################################################################
# Section 3                                                                  #
# aditional checking                                                         #
# Subsection 3.1 - checking for a CC (we must use the same one used for RT)  #
# Subsection 3.2 - check for the kernel version, with RT patches             #
# Subsection 3.3 - check the moduledir where modules can get installed       #
# Subsection 3.4 - check for GTK                                             #
# Subsection 3.5 - check for utility programs needed to build and run EMC    #
##############################################################################


##############################################################################
# Subsection 3.1 - checking for a CC (we must use the same one used for RT)  #
# Check CC version - (P.C.) We need to verify the compiler is the same one   #
# used for the realtime extensions... Hence the need to find the RT signature# 
# first.                                                                     #
# $RTS --cc should return the C compiler used - Verify this is acceptable.   #
# if version is gcc-2.96 check for alternative                               #
##############################################################################

AC_MSG_CHECKING([for usability of rdtscll from asm/msr.h])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <asm/msr.h>
#include <stdio.h>
void use_rdtscll(void) { long long tsc; rdtscll(tsc); }
]], [[]])],[
        MSR_H_USABLE=yes
        AC_DEFINE([MSR_H_USABLE], [], [Define to 1 if asm/msr.h is usable and defines rdtscll])
    ],[MSR_H_USABLE=no])
AC_MSG_RESULT($MSR_H_USABLE)

AC_MSG_CHECKING([for usability of linux/hidraw.h])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <sys/ioctl.h>
#include <linux/hidraw.h>
long hidiocgrawinfo = HIDIOCGRAWINFO;
    ]], [[]])],[
	HIDRAW_H_USABLE=yes
        AC_DEFINE([HIDRAW_H_USABLE], [], [Define to 1 if linux/hidraw.h is usable and defines HIDIOCGRAWINFO])
],[HIDRAW_H_USABLE=no])
AC_MSG_RESULT($HIDRAW_H_USABLE)
AC_SUBST([HIDRAW_H_USABLE])

##############################################################################
# Subsection 3.2 - check for the kernel version, with RT patches             #
#----------------------------------------------------------------------------#
# Check with the version.h to find the uts-kernel version.                   #
# This should be a more reliable way of determining the kernel that          #
# is being used to compile against - `uname -r` only returns the             #
# running kernel version which is may not be the one the code is             #
# compiled against.                                                          #
##############################################################################

m4_foreach([_cfg_flavor],[_cfg_kbuild_flavors],[
    # upcase name of $flavor; get ready to do some indirect variable
    # acrobatics
    AC_DEFUN([_cfg_FLAVOR],[_cfg_flavor_upcase(_cfg_flavor)])
    KERNELDIR=$_cfg_FLAVOR[]_THREADS_KERNEL_DIR

    AC_CHECK_HEADERS([$KERNELDIR/include/linux/version.h],[],
        [AC_MSG_ERROR(
	    [version.h not found in "$KERNELDIR"; invalid kernel source tree])])

    # Unfortunately, many distributions (redhat, mandrake) have
    # #defines inside version.h, so a simple cat|grep|cut test won't
    # work... But then again, RH & Mandrake kernels are notorious for
    # their use of patches that break the RT patching - Both RTAI and
    # RTLinux strongly recommend using a virgin source from
    # kernel.org.

    # Get the kernel version from version.h
    AC_MSG_CHECKING([for _cfg_flavor kernel version string in $KERNELDIR])

    if test -e $KERNELDIR/include/linux/utsrelease.h; then
	VERSION_FILE=$KERNELDIR/include/linux/utsrelease.h
    elif test -e $KERNELDIR/include/generated/utsrelease.h; then
	VERSION_FILE=$KERNELDIR/include/generated/utsrelease.h
    else
	VERSION_FILE=$KERNELDIR/include/linux/version.h
    fi
    KERNEL_VERS=`$CC -E -dM ${VERSION_FILE} | grep UTS | cut -d '"' -f 2`

    if test -z "$KERNEL_VERS"; then 
        AC_MSG_RESULT([not found])
	AC_MSG_ERROR([Kernel version not found; check kernel sources])
    fi

    AC_MSG_RESULT([$KERNEL_VERS])

    AC_SUBST(_cfg_FLAVOR[]_THREADS_RTAPI_KERNEL_VERS,$KERNEL_VERS)
    AC_DEFINE_UNQUOTED(_cfg_FLAVOR[]_THREADS_RTAPI_KERNEL_VERS,
        "$_cfg_FLAVOR[]_THREADS_RTAPI_KERNEL_VERS",
    	[Required _cfg_flavor kernel version])
])


##############################################################################
# Subsection 3.3 - check the moduledir where modules can get installed       #
#                                                                            #
# Provides the user the possibility to specify (--with-module-dir=<path>)    #
# If not specified default inside /lib/modules/${KERNEL_VERS}/               #
# to the location where a RT-module gets found (mbuff.o or rtai_shm.o)       #
# (maybe the default should be /lib/modules/$KERNEL_VERS/extra if it exists? #
##############################################################################

m4_foreach([_cfg_flavor],[_cfg_all_flavors],[
    # Create a module-dir option, similar to rtai's...

    MODULE_DIR=""
    RIP_MODULE_DIR=""

    AC_MSG_CHECKING([for _cfg_flavor module installation directory])
    AC_ARG_WITH(_cfg_flavor-module-dir,
	[AS_HELP_STRING([--with-_cfg_flavor-module-dir=<module-dir>],
	    [Installation directory for flavor kernel modules])],
	[
	    # require an absolute path
	    if test "$withval" = "${withval#/}"; then
	        AC_MSG_RESULT($withval)
		AC_MSG_ERROR(
		    [--with-_cfg_flavor-module-dir requires absolute path])
	    fi
	    MODULE_DIR="$withval"
	])

    # if not specified, put in standard place according to BUILD_SYS type
    if test -z "$MODULE_DIR"; then
        if test "$_cfg_FLAVOR[]_THREADS_BUILD_SYS" = kbuild; then
	    MODULE_DIR=$_cfg_FLAVOR[]_THREADS_KERNEL_DIR/linuxcnc
	else
	    MODULE_DIR=${libdir}/linuxcnc/modules/_cfg_flavor
	fi	    
    fi
    AC_SUBST(_cfg_FLAVOR[]_THREADS_MODULE_DIR,$MODULE_DIR)

    if test "$RUN_IN_PLACE" = "yes"; then
	RIP_MODULE_DIR="${BUILD_TOPLEVEL}/rtlib/_cfg_flavor"
        AC_MSG_NOTICE([configured for run-in-place])
    else
        AC_MSG_RESULT([$MODULE_DIR])
    fi
    AC_SUBST(_cfg_FLAVOR[]_THREADS_RIP_MODULE_DIR,$RIP_MODULE_DIR)

])

if test "$RUN_IN_PLACE" = "yes"; then
    prefix=${BUILD_TOPLEVEL}
    DEFAULT_NMLFILE=${prefix}/configs/common/linuxcnc.nml
    DEFAULT_TOOLTABLE=${prefix}/configs/sim/sim.tbl
else
    RUN_IN_PLACE=no
    EMC2_HOME=$prefix
    DEFAULT_NMLFILE=${prefix}/share/linuxcnc/linuxcnc.nml
fi

AC_SUBST([RUN_IN_PLACE])
AC_SUBST([DEFAULT_NMLFILE])
AC_DEFINE_UNQUOTED([EMC2_DEFAULT_NMLFILE], "$DEFAULT_NMLFILE", [Default nml file])
AC_DEFINE_UNQUOTED([EMC2_DEFAULT_TOOLTABLE], "$DEFAULT_TOOLTABLE", [Default nml file])

##############################################################################
# Subsection 3.4 - define default dirs, these get used in a lot of places    #
# we decide based on RIP or install where stuff goes                         #
##############################################################################

fe () {
    # Fully expand argument.  Example:
    # ${datadir} -> ${datarootdir} -> ${prefix}/share -> /usr/local
    case "$1" in
    *\$*) eval fe \""$1"\" ;;
    *) echo "$1" ;;
    esac
}

if test "xyes" = "x$RUN_IN_PLACE"; then
    EMC2_LATENCY_SCRIPT=$EMC2_HOME/scripts/latency-test
    EMC2_LATENCYPLOT_SCRIPT=$EMC2_HOME/scripts/latencyplot
    EMC2_SCRIPT=$EMC2_HOME/scripts/emc
    EMC2_SUFFIX=" (run-in-place)"
    EMC2_ICON=$EMC2_HOME/linuxcncicon.png
    EMC2_BIN_DIR=$EMC2_HOME/bin
    EMC2_TCL_DIR=$EMC2_HOME/tcl
    EMC2_TCL_LIB_DIR=$EMC2_HOME/tcl
    EMC2_LANG_DIR=$EMC2_HOME/src/objects
    EMC2_PO_DIR=$EMC2_HOME/share/locale
    EMC2_HELP_DIR=$EMC2_HOME/docs/help
    EMC2_RTLIB_DIR=$EMC2_HOME/rtlib
    LINUXCNC_CONFIG_PATH="~/linuxcnc/configs:$EMC2_HOME/configs"
    EMC2_NCFILES_DIR=$EMC2_HOME/nc_files
    REALTIME=$EMC2_HOME/scripts/realtime
    EMC2_IMAGE_DIR=$EMC2_HOME
else
    EMC2_HOME=${prefix}
    EMC2_BIN_DIR=${prefix}/bin
    EMC2_LATENCY_SCRIPT=$EMC2_BIN_DIR/latency-test
    EMC2_LATENCYPLOT_SCRIPT=$EMC2_BIN_DIR/latencyplot
    EMC2_SCRIPT=$EMC2_BIN_DIR/emc
    EMC2_SUFFIX=""
    EMC2_ICON=linuxcncicon
    EMC2_TCL_DIR=${prefix}/lib/tcltk/linuxcnc
    EMC2_TCL_LIB_DIR=${prefix}/lib/tcltk/linuxcnc
    EMC2_LANG_DIR=${prefix}/share/linuxcnc/tcl/msgs
    EMC2_PO_DIR=${prefix}/share/locale
    EMC2_HELP_DIR=${prefix}/share/doc/linuxcnc
    case $MODULE_DIR in
        */linuxcnc*) EMC2_RTLIB_DIR=$MODULE_DIR ;;
	*) EMC2_RTLIB_DIR=$MODULE_DIR/linuxcnc
    esac
    LINUXCNC_CONFIG_PATH="~/linuxcnc/configs:/usr/local/etc/linuxcnc/configs:"$(eval echo $EMC2_HELP_DIR)"/examples/sample-configs"
    EMC2_NCFILES_DIR=${prefix}/share/linuxcnc/ncfiles
    REALTIME=/etc/init.d/realtime
    EMC2_IMAGE_DIR=$(fe "$datadir")/linuxcnc
fi

AC_DEFINE_UNQUOTED([EMC2_HOME], "$EMC2_HOME", [Prefix or RIP directory])
AC_DEFINE_UNQUOTED([EMC2_BIN_DIR], "$EMC2_BIN_DIR", [Directory for binaries])
AC_DEFINE_UNQUOTED([EMC2_TCL_DIR], "$EMC2_TCL_DIR", [Directory for tcl scripts])
AC_DEFINE_UNQUOTED([EMC2_HELP_DIR], "$EMC2_HELP_DIR", [Directory for help files])
AC_DEFINE_UNQUOTED([EMC2_RTLIB_DIR], "$EMC2_RTLIB_DIR", [Directory of realtime system])
AC_DEFINE_UNQUOTED([EMC2_LANG_DIR], "$EMC2_LANG_DIR", [Directory for tcl translation files])
AC_DEFINE_UNQUOTED([EMC2_PO_DIR], "$EMC2_PO_DIR", [Directory for po/mo translation files])
AC_DEFINE_UNQUOTED([EMC2_CONFIG_DIR], "$EMC2_CONFIG_DIR", [Directory for configuration files])
AC_DEFINE_UNQUOTED([EMC2_NCFILES_DIR], "$EMC2_NCFILES_DIR", [Directory for nc files])
AC_DEFINE_UNQUOTED([EMC2_IMAGE_DIR], "$EMC2_IMAGE_DIR", [Directory for images])
AC_DEFINE_UNQUOTED([GIT_VERSION], "$GIT_VERSION", [Git version tag])
AC_SUBST([EMC2_BIN_DIR])
AC_SUBST([EMC2_TCL_DIR])
AC_SUBST([EMC2_TCL_LIB_DIR])
AC_SUBST([EMC2_HELP_DIR])
AC_SUBST([EMC2_RTLIB_DIR])
AC_SUBST([EMC2_LANG_DIR])
AC_SUBST([LINUXCNC_CONFIG_PATH])
AC_SUBST([EMC2_NCFILES_DIR])
AC_SUBST([REALTIME])
AC_SUBST([EMC2_IMAGE_DIR])
AC_SUBST([EMC2_SCRIPT])
AC_SUBST([EMC2_LATENCY_SCRIPT])
AC_SUBST([EMC2_LATENCYPLOT_SCRIPT])
AC_SUBST([EMC2_SUFFIX])
AC_SUBST([EMC2_ICON])
AC_SUBST([GIT_VERSION])

##############################################################################
# Subsection 3.5 - check for GTK                                             #
# FIXME: allow it to be enabled or disabled command line                     #
##############################################################################

AC_MSG_CHECKING([for glib])
if pkg-config glib-2.0 >/dev/null 2>&1; then
  GLIB_VER=`pkg-config glib-2.0 --modversion`
  AC_MSG_RESULT(yes - $GLIB_VER)
  GLIB_CFLAGS=`pkg-config glib-2.0 --cflags`
  GLIB_LIBS=`pkg-config glib-2.0 --libs`
else
  AC_MSG_ERROR(no -- required until somebody makes modbus optional)
fi


AC_ARG_ENABLE(gtk,
    [  --disable-gtk        Disable the parts of emc2 that depend on GTK],
    [
	case "$enableval" in
	Y*|y*)
	    BUILD_GTK=yes ;;
	*)
	    BUILD_GTK=no ;;
	esac
    ],
    [BUILD_GTK=yes])

if test "$BUILD_GTK" = "yes"; then
  AC_MSG_CHECKING([for GTK 2.4.0 or above])
  if pkg-config gtk+-2.0 --atleast-version 2.4.0 >/dev/null 2>&1; then
    GTK_VER=`pkg-config gtk+-2.0 --modversion`
    AC_MSG_RESULT(yes - $GTK_VER)
    GTK_CFLAGS=`pkg-config gtk+-2.0 --cflags`
    GTK_LIBS=`pkg-config gtk+-2.0 --libs`
    AC_MSG_CHECKING(for libgnomeprintui-2.2)
    if pkg-config --exists libgnomeprintui-2.2; then
      AC_MSG_RESULT(yes)
      GTK_CFLAGS="$GTK_CFLAGS `pkg-config --cflags libgnomeprintui-2.2`"
      GTK_LIBS="$GTK_LIBS `pkg-config --libs libgnomeprintui-2.2`"
      HAVE_GNOMEPRINT=yes
    else
      AC_MSG_RESULT(no -- printing from classicladder will not be possible)
      HAVE_GNOMEPRINT= 
    fi
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([GTK2 missing.  Install it or specify --disable-gtk to skip the parts of emc2 that depend on GTK])
  fi
fi

AC_SUBST(HAVE_GNOMEPRINT)
AC_SUBST(GTK_VER)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)

##############################################################################
# Subsection 3.6 - check for utility programs needed to build and run EMC    #
#                                                                            #
# Check for all the utility programs we need to build and install emc        #
# as well as those we use in the emc scripts...                              #
##############################################################################

SPATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
AC_PROG_CXX

AC_PATH_PROG(CXX,$CXX,"none")
if test $CXX = "none"
then
    AC_MSG_ERROR([C++ compiler not found])
fi

AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(INSTALL, install)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(PS, ps)
AC_PATH_PROG(KILL, kill)
AC_PATH_PROG(WHOAMI, whoami)
AC_PATH_PROG(AWK, awk)
AC_PATH_PROG(INSMOD, insmod, $SPATH)
AC_PATH_PROG(RMMOD, rmmod, "", $SPATH)
AC_PATH_PROG(LSMOD, lsmod, "", $SPATH)
AC_PATH_PROG(PIDOF, pidof, "", $SPATH)
AC_PATH_PROG(IPCS, ipcs, "")
AC_PATH_PROG(FUSER, fuser, "", $SPATH)
AC_PATH_PROG(MANDB, mandb, "")

AC_ARG_WITH(rmmod,
    [  --with-rmmod=</path/rmmod>              rmmod variant],
    [
	case "$withval" in
	"" | y | ye | yes)
	    AC_MSG_ERROR([You must supply an argument to --with-rmmod.])
	  ;;
	n | no | none)
	    RMMOD=""
	  ;;
	*)
	    RMMOD="$withval"
	esac
    ],
    [
            RMMOD="$EMC2_BIN_DIR/linuxcnc_module_helper remove"
    ])

AC_ARG_WITH(insmod,
    [  --with-insmod=</path/insmod>            insmod variant],
    [
	case "$withval" in
	"" | y | ye | yes)
	    AC_MSG_ERROR([You must supply an argument to --with-insmod.])
	  ;;
	n | no | none)
	    INSMOD=""
	  ;;
	*)
	    INSMOD="$withval"
	esac
    ],
    [
            INSMOD="$EMC2_BIN_DIR/linuxcnc_module_helper insert"
    ])

##############################################################################
# Subsection 3.7 - check for programs needed to build documentation          #
#                                                                            #
# Check for programs we need to build and install docs.                      #
# (Optional, if not present, just don't build the docs.)                     #
##############################################################################

AC_ARG_WITH(python,
    [  --with-python=<path>                    Specify the Python interpreter],
    [
        PYTHON=$withval
    ],[
        PYTHON=python
    ])
AC_PATH_PROG(PYTHON,$PYTHON,"none")
if test $PYTHON = "none"
then
    AC_MSG_ERROR([python not found])
fi

AC_MSG_CHECKING([whether to build documentation])
AC_ARG_ENABLE(build-documentation,
    [  --enable-build-documentation[=format]   Build documentation.
                          Format may be "pdf" or "html" if only one format is desired.],
    [
        case "$enableval" in
        Y*|y*|html,pdf|pdf,html)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=yes
            BUILD_DOCS_HTML=yes
            AC_MSG_RESULT([PDF and HTML requested])
        ;;
        html)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=no
            BUILD_DOCS_HTML=yes
            AC_MSG_RESULT([HTML requested])
	;;
        pdf)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=yes
            BUILD_DOCS_HTML=no
            AC_MSG_RESULT([PDF requested])
	;;
        *)
            BUILD_DOCS=no
            AC_MSG_RESULT([no])
        ;;
    esac
    ],
    [
        BUILD_DOCS=no
        AC_MSG_RESULT([no])
    ])

# Programs required for building all documentation
if ( test "$BUILD_DOCS" = "yes" ) ; then
    if ( test "none" = "$PYTHON" ) ; then
        AC_MSG_ERROR([no python, documentation cannot be built])
    fi

    AC_PATH_PROG(ASCIIDOC,asciidoc,"none")
    if ( test "none" = "$ASCIIDOC" ) ; then
	AC_MSG_ERROR([no AsciiDoc, documentation cannot be built])
    fi

    AC_MSG_CHECKING([asciidoc version])
    set -- `asciidoc --version`; ASCIIDOC_VER=$2
    set -- `echo $ASCIIDOC_VER | sed 's/\./ /g'`

    if test $1 -lt 8 -o \( $1 -eq 8 -a $2 -lt 5 \); then
        AC_MSG_ERROR([asciidoc version $ASCIIDOC_VER less than 8.5.
Documentation cannot be built.
On Lucid, install the regular asciidoc from Ubuntu by running "sudo apt-get install asciidoc".
On Hardy, install the backported asciidoc available from the linuxcnc.org debian archive.
On other systems, do what you need to install asciidoc version 8.5 or newer.])
    fi
    AC_MSG_RESULT([$ASCIIDOC_VER])

    AC_PATH_PROG(DBLATEX,dblatex,"none")
    if ( test "none" = "$DBLATEX" ) ; then
	AC_MSG_ERROR([no dblatex, documentation cannot be built])
    fi

    AC_MSG_CHECKING([dblatex version])
    set -- `dblatex --version`; DBLATEX_VER=$3
    set -- `echo $DBLATEX_VER | sed 's/[[.-]]/ /g'`

    if test $1 -eq 0 -a \( $2 -lt 2 -o \( $2 -eq 2 -a ${3:-0} -lt 12 \) \); then
        AC_MSG_ERROR([dblatex version $DBLATEX_VER less than 0.2.12.
Documentation cannot be built.])
    fi
    AC_MSG_RESULT([$DBLATEX_VER])


    AC_PATH_PROG(SOURCE_HIGHLIGHT,source-highlight,"none")
    if ( test "none" = "$SOURCE_HIGHLIGHT" ) ; then
	AC_MSG_ERROR([no source-highlight, documentation cannot be built])
    fi


    AC_PATH_PROG(CONVERT,convert,"none")
    if ( test "none" = "$CONVERT" ) ; then
	AC_MSG_ERROR([no convert, documentation cannot be built])
    fi

    AC_PATH_PROG(GS,gs,"none")
    if ( test "none" = "$GS" ) ; then
	AC_MSG_ERROR([no gs, documentation cannot be built])
    fi
fi

# Programs required only for building the PDF documentation
if ( test "$BUILD_DOCS_PDF" = "yes" ) ; then
    AC_PATH_PROG(DBLATEX,dblatex,"none")
    if ( test "none" = "$DBLATEX" ) ; then
	AC_MSG_ERROR([no dblatex, PDF documentation cannot be built])
    fi

    AC_PATH_PROG(PDFLATEX,pdflatex,"none")
    if ( test "none" = "$PDFLATEX" ) ; then
	AC_MSG_ERROR([no pdflatex, PDF documentation cannot be built])
    fi

    AC_PATH_PROG(EPSTOPDF,epstopdf,"none")
    if ( test "none" = "$EPSTOPDF" ) ; then
	AC_MSG_ERROR([no epstopdf, PDF documentation cannot be built])
    fi
fi

# Programs required only for building the HTML documentation
if ( test "$BUILD_DOCS_HTML" = "yes" ) ; then
    AC_PATH_PROG(XSLTPROC,xsltproc,"none")
    if ( test "none" = "$XSLTPROC" ) ; then
	AC_MSG_ERROR([no xsltproc, HTML documentation cannot be built])
    fi

    AC_PATH_PROG(DVIPNG,dvipng,"none")
    if ( test "none" = "$DVIPNG" ) ; then
	AC_MSG_ERROR([no dvipng, HTML documentation cannot be built])
    fi

    AC_MSG_CHECKING([for HTML support in groff])
    if ! groff -Thtml < /dev/null > /dev/null 2>&1 ; then
        AC_MSG_ERROR([no groff -Thtml, HTML documentation cannot be built])
    else
        AC_MSG_RESULT(yes)
    fi
fi
AC_SUBST(BUILD_DOCS)
AC_SUBST(BUILD_DOCS_PDF)
AC_SUBST(BUILD_DOCS_HTML)

##############################################################################
# Section 4 - Important headers, functions and gloabl defines.               #
#                                                                            #
##############################################################################

# This section gets inserted in to config.h.in when autoheader is run.
# Global and common defines should be here rather than duplicated in
# multiple places. Keep screwball constructs out of this, and it can
# be used in both kernel space and user space.

dnl _cfg_thread_flavor_macros():  define thread flavor IDs
dnl   and set RTAPI_<FLAVOR>, BUILD_SYS_<BUILDSYS> & THREADS_HEADERS macros
AC_DEFUN([_cfg_thread_flavor_macros],[dnl
m4_foreach([_cfg_flavor],[_cfg_all_flavors],[dnl
[#]define RTAPI_[]_cfg_flavor_upcase(_cfg_flavor)[]_ID dnl
_cfg_flavor_id(_cfg_flavor)
])
#if ! defined(THREAD_FLAVOR_ID)
// this isn't allowed when building RTAPI
#ifdef RTAPI
#error RTAPI defined but THREAD_FLAVOR_ID not defined
#endif
m4_foreach([_cfg_flavor],[_cfg_all_flavors],[dnl
[#]elif THREAD_FLAVOR_ID == RTAPI_[]_cfg_flavor_upcase(_cfg_flavor)_ID
[#]  define RTAPI_[]_cfg_flavor_upcase(_cfg_flavor)
[#]  define _cfg_flavor_BUILD_SYS(_cfg_flavor)
[#]  define THREADS_HEADERS "_cfg_flavor_threads_headers(_cfg_flavor)"
])dnl
#else
#error unknown value for THREAD_FLAVOR_ID
#endif
])


AH_TOP([/********************************************************************
* Description: config.h
*
*	Common defines used in many emc2 source files.
*       To add to this file, edit Section 4.1 in configure.in
*       and then run autoheader.
*
* Author: Autogenerated by autoheader
* License: LGPL Version 2
* System: Linux
*    
* Copyright (c) 2004 All rights reserved.
********************************************************************/
#ifndef EMC2_CONFIG_H
#define EMC2_CONFIG_H

/* LINELEN is used throughout for buffer sizes, length of file name strings,
   etc. Let's just have one instead of a multitude of defines all the same. */
#define LINELEN 255
/* Used in a number of places for sprintf() buffers. */
#define BUFFERLEN 80

#define MM_PER_INCH 25.4
#define INCH_PER_MM (1.0/25.4)

/* RTAPI array sizes */
#define RTAPI_MAX_MODULES	64
#define RTAPI_MAX_TASKS		64
#define RTAPI_MAX_SHMEMS	32
#define RTAPI_MAX_RINGS	        32

#define MAX_INSTANCES           16

// default size of the HAL data segment
// can be overridden by the rtapi.so/ko module param hal_size=<n>
#define HAL_SIZE                262000
]
// flavor IDs for the various threads systems
// and conditional to set thread system and build_sys macros
// alter these in configure.in Subsection 2.0
dnl this needs to be unquoted
_cfg_thread_flavor_macros
)

AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them.  */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE
#endif
])

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_FUNCS(semtimedop)
LIBS_hold=$LIBS
LIBS="$LIBS -lm -lrt"

AC_CHECK_FUNCS(clock_getres)


AC_MSG_CHECKING([for sincos function])
sincos_ok=yes
AC_LINK_IFELSE([AC_LANG_PROGRAM([[double a, b;]], [[sincos(1.0, &a, &b);]])],[AC_DEFINE(
        HAVE_SINCOS,
        1,
        Define to 1 if sincos is available.
    )],[sincos_ok=no
])
AC_MSG_RESULT([$sincos_ok])

AC_CHECK_FUNCS(__sincos)
LIBS=$LIBS_hold

AH_BOTTOM(#endif
)

##############################################################################
# Section 5 - Check for tcl/tk support                                       #
#                                                                            #
# Test for tcl/tk headers fails if they are not in /usr/include              #
# so testing is done by finding tclConfig.sh and tkConfig.sh                 #
# if the search fails the traditional check is done                          #
##############################################################################
AC_MSG_CHECKING([for tcl])

AC_ARG_WITH(tclConfig,
    [  --with-tclConfig=<path>                 Specify the path to tclConfig],
    [
        TCLCONFIG=$withval
    ],[
        TCLCONFIG=
    ])

# if not specified, search for tclConfig.sh
if (test "x$TCLCONFIG" = "x"); then
    TCLCONFIG=$(find /usr/lib* -maxdepth 2 -name tclConfig.sh | head -n1)
    if (test "x$TCLCONFIG" = "x"); then
	TCLCONFIG=$(find /usr/local/lib* -maxdepth 2 -name tclConfig.sh | head -n1)
    fi
fi

if (test "x$TCLCONFIG" = "x"); then
   AC_MSG_RESULT([tclConfig.sh not found, trying tcl.h and libs.
		  If it doesn't work try running ./configure --with-tclConfig=<path to tclConfig.sh>])
   AC_CHECK_HEADERS([tcl.h])
   AC_SEARCH_LIBS(Tcl_Init,[tcl tcl8.1 tcl8.2 tcl8.3 tcl8.4 tcl8.5],[],[AC_MSG_ERROR([tcl lib not found])])
else
# tclConfig.sh found,
# extracting vars
   AC_MSG_RESULT([$TCLCONFIG found])
   . "$TCLCONFIG"
   TCL_CFLAGS="$TCL_INCLUDE_SPEC -DUSE_TCL_STUBS"
   TCL_LIBS="$TCL_STUB_LIB_SPEC"
fi

AC_MSG_CHECKING([for tk])

AC_ARG_WITH(tkConfig,
    [  --with-tkConfig=<path>                  Specify the path to tkConfig],
    [
        TKCONFIG=$withval
    ],[
        TKCONFIG=
    ])

# if not specified, search for tclConfig.sh
if test -z "$TKCONFIG"; then
    TKCONFIG=$(dirname $TCLCONFIG)/tkConfig.sh
    if ! test -f $TKCONFIG; then unset TKCONFIG; fi
fi
if (test "x$TKCONFIG" = "x"); then
    # search for tkConfig.sh
    TKCONFIG=$(find /usr/lib -maxdepth 2 -name tkConfig.sh | head -n1)
    if (test "x$TKCONFIG" = "x"); then
	TKCONFIG=$(find /usr/local/lib -maxdepth 2 -name tkConfig.sh | head -n1)
    fi
fi

if (test "x$TKCONFIG" = "x"); then
   AC_MSG_RESULT([tkConfig.sh not found, trying tk.h and libs.
		  If it doesn't work try running ./configure --with-tkConfig=<path to tkConfig.sh>])
   AC_CHECK_HEADERS([tk.h])
   AC_SEARCH_LIBS(Tk_Init,[tk tk80 tk8.0 tk8.1 tk8.2 tk8.3 tk8.4 tk8.5],[],[AC_MSG_ERROR([tk lib not found])])
else
# tkConfig.sh found,
# extracting vars
   AC_MSG_RESULT([$TKCONFIG found])
   . "$TKCONFIG"
   TK_CFLAGS="$TK_INCLUDE_SPEC $TK_XINCLUDES" 
   TK_LIBS="$TK_LIBS $TK_LIB_SPEC"
fi

if ! test -z "$TCL_VERSION" && ! test -z "$TK_VERSION" && ! test "$TCL_VERSION" = "$TK_VERSION" ; then
    AC_MSG_ERROR([Tcl and Tk versions must be the same, but configure found
Tcl $TCL_VERSION and Tk $TK_VERSION.  You can use --with-tkConfig= and --with-tclConfig=
to override the autodetected versions.])
fi

if test -f $TCL_EXEC_PREFIX/bin/wish$TCL_VERSION; then
    WISH=$TCL_EXEC_PREFIX/bin/wish$TCL_VERSION
elif test -f $TCL_EXEC_PREFIX/bin/wish; then
    WISH=$TCL_EXEC_PREFIX/bin/wish
else
    WISH=wish
fi

if test -f $TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION; then
    TCLSH=$TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION
elif test -f $TCL_EXEC_PREFIX/bin/tclsh; then
    TCLSH=$TCL_EXEC_PREFIX/bin/tclsh
else
    TCLSH=tclsh
fi

AC_MSG_CHECKING([for BWidget using $TCLSH])
if (unset DISPLAY; echo ["catch { package require bwidget }; exit [expr [lsearch [package names] BWidget] == -1]"] | $TCLSH); then
    AC_MSG_RESULT([found])
else
    AC_MSG_ERROR([not found])
fi

HAVE_WORKING_BLT=no
AC_MSG_CHECKING([for BLT using tclsh8.5])
if (test -f $TCL_EXEC_PREFIX/bin/tclsh8.5) && (echo ['if [catch {package require BLT}] { exit 1; } else { exit 0; }'] | tclsh8.5); then
    AC_MSG_RESULT([found])
    HAVE_WORKING_BLT=yes
else
    AC_MSG_RESULT([not found])
fi

AC_SUBST([TCL_DBGX])
AC_SUBST([TK_DBGX])
AC_SUBST([TCL_CFLAGS])
AC_SUBST([TK_CFLAGS])
AC_SUBST([TCL_LIBS])
AC_SUBST([TK_LIBS])
AC_SUBST([WISH])
AC_SUBST([TCLSH])
AC_SUBST([HAVE_WORKING_BLT])

##############################################################################
# Section 6 - Miscelaneous support                                           #
#                                                                            #
# Subsection 6.1. - provides DATE to output it to the generated files        #
# Subsection 6.2. - user option to convince make to be quiet during make     #
##############################################################################

# provides DATE in order to output it to the generated files
DATE=$(date)
AC_SUBST([DATE])
AC_PATH_XTRA
#X_CFLAGS gets set
#X_LIBS and X_EXTRA_LIBS likewise

AC_SUBST([X_LIBS])
AC_SUBST([X_CFLAGS])

AC_CHECK_HEADERS(X11/extensions/Xinerama.h,
	    [HAVE_XINERAMA=yes],
	    [HAVE_XINERAMA=no])

AC_CHECK_LIB(Xinerama, XineramaQueryExtension,
	    [],
	    [HAVE_XINERAMA=no])

if test "x$HAVE_XINERAMA" = "xno"; then
    AC_MSG_ERROR([Xinerama library or headers not found])
fi

# check for Xaw, that is needed for emc2/src/emc/usr_intf/xemc.cc

if test "$have_x" = "yes"; then
CFLAGS_hold=$CFLAGS
LIBS_hold=$LIBS
CFLAGS="$CFLAGS $X_CFLAGS"
LIBS="$LIBS $X_PRE_LIBS $X_LIBS"

AC_CHECK_HEADERS(X11/Xaw/XawInit.h,
	    [HAVE_XAW=yes],
	    [HAVE_XAW=no],
	    [[#include <X11/Intrinsic.h>
	    ]])

AC_CHECK_LIB(Xaw, XawDialogGetValueString,
	    [],
	    [HAVE_XAW=no])
CFLAGS=$CFLAGS_hold
LIBS=$LIBS_hold
fi

if test "x$HAVE_XAW" = "xno"; then
    AC_MSG_WARN([Xaw lib missing, you won't be able to build/run xemc. try installing it with 'apt-get install libxaw7-dev'])
else    
    XAW_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXaw -lXt"
fi
AC_SUBST([HAVE_XAW])
AC_SUBST([XAW_LIBS])

#clean out LIBS, or else all future tests will check with -lXaw (which fails on odd systems)
temp_LIBS=$LIBS
LIBS=

# check for readline.h and friends, optional for halcmd
AC_CHECK_HEADERS(readline/readline.h, [HAVE_READLINE=yes], [HAVE_READLINE=no])
AC_CHECK_HEADERS(readline/history.h, [], [HAVE_READLINE=no])

echo "Trying readline without -ltermcap"
AC_CHECK_LIB(readline, readline, [HAVE_READLINE_NOTERMCAP=yes], [])
unset ac_cv_lib_readline_readline
echo "Trying readline with -ltermcap"
AC_CHECK_LIB(readline, readline, [HAVE_READLINE_TERMCAP=yes], [], -ltermcap)
unset ac_cv_lib_readline_readline

if test "x$HAVE_READLINE_NOTERMCAP" = "xyes"; then
    echo "Readline does not require -ltermcap"
    READLINE_LIBS="-lreadline"
elif test "x$HAVE_READLINE_TERMCAP" = "xyes"; then
    echo "Readline requires -ltermcap"
    READLINE_LIBS="-lreadline -ltermcap"
else
    HAVE_READLINE=no
fi

if test "x$HAVE_READLINE" = "xyes"; then
    AC_DEFINE([HAVE_READLINE], [], [Define to 1 if you have the 'readline' library (-lreadline) and required headers])
else
    AC_MSG_ERROR([Required library 'readline' missing.])
fi
AC_SUBST([HAVE_READLINE])
AC_SUBST([READLINE_LIBS])


#check for ncurses.h needed for emc2/src/emc/usr_intf/keystick.cc

AC_CHECK_HEADERS(ncurses.h,
	    [HAVE_NCURSES=yes],
	    [HAVE_NCURSES=no])

AC_CHECK_LIB(ncurses, initscr,
	    [],
	    [HAVE_NCURSES=no])

if test "x$HAVE_NCURSES" = "xno"; then
    AC_MSG_WARN(ncurses lib missing, you won't be able to build/run keystick. try installing it with 'apt-get install libncurses-dev')
else    
    NCURSES_LIBS="-lncurses"
fi
AC_SUBST([HAVE_NCURSES])
AC_SUBST([NCURSES_LIBS])


##############################################################################
# Section 7 - Language support                                               #
#                                                                            #
# i18n Language support:                                                     #
# see http://cvs.gnome.org/viewcvs/intltool/doc/I18N-HOWTO?rev=1.3           #
##############################################################################

# if you don't have nls tools, allow a way out!

AC_ARG_ENABLE(nls,
              [  --disable-nls           don't use NLS],
              USE_NLS=no, USE_NLS=yes)
AC_SUBST(USE_NLS)

if test "$USE_NLS" = "yes"; then
  AC_CHECK_HEADERS(locale.h)
  AC_CHECK_FUNCS(setlocale)
  AC_SUBST(HAVE_LOCALE_H)  

# Add languages here when they are translated.
# Grep the LINGUAS file.
  LANGUAGES=""
  AC_SUBST(LANGUAGES)  
  AC_CHECK_HEADERS(libintl.h)
  AC_CHECK_LIB(intl,gettext)
  AC_SUBST(HAVE_LIBINTL_H)  
  AC_SUBST(HAVE_LIBINTL)

# The default locale directory is /usr/share/locale - This is generally fixed
# by the distribution....
  dnl Handle localedir
  LOCALEDIR='/usr/share/locale'
  AC_ARG_WITH(locale-dir,
  [  --with-locale-dir=DIR   Location of the locale file(s)
                          [DATADIR/locale]],[
    if test x$withval = xyes; then
      AC_MSG_WARN(Usage is: --with-locale-dir=basedir)
    else
      if test x$withval = xno; then
        AC_MSG_WARN(Usage is: --with-locale-dir=basedir)
      else
        LOCALEDIR=$withval
      fi
    fi
  ])
  AC_SUBST(LOCALEDIR)
fi

#restore LIBS
LIBS="$X_LIBS $temp_LIBS"

AC_PATH_PROG(XGETTEXT,xgettext,none)
XGETTEXT_TCL_WORKS=no
if test "$XGETTEXT" = "none"; then
   AC_MSG_ERROR(install gettext 0.14.5 or above)
else
   AC_MSG_CHECKING(for xgettext tcl bug)
   set -- $(xgettext --version | head -1)
   version=$4
   set -- $(echo $4 | tr . " ")
   if test ${1-0} -gt 0 -o \( ${1-0} -eq 0 -a \( ${2-0} -gt 14 -o \( ${2-0} -eq 14 -a ${3-0} -ge 5 \) \) \)
   then
	XGETTEXT_TCL_WORKS=yes
	AC_MSG_RESULT(xgettext version $version OK)
    else
	AC_MSG_RESULT(xgettext version $version buggy -- need at least 0.14.5)
        AC_MSG_ERROR(install xgettext 0.14.5 or above)
   fi
fi
AC_SUBST(XGETTEXT)

AC_PATH_PROG(MSGFMT,msgfmt,none)
if test "$MSGFMT" = "none"; then
   AC_MSG_ERROR(install gettext 0.14.5 or above)
else
    AC_MSG_CHECKING(for --tcl support in msgfmt)
    if $MSGFMT --tcl -l de -d /tmp /dev/null > /dev/null 2>&1; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR(install xgettext 0.14.5 or above)
    fi
fi
AC_SUBST(MSGFMT)

AC_MSG_CHECKING(for Python support)
AC_ARG_ENABLE(python,
    [  --disable-python        Disable the parts of emc2 that depend on Python],
    [
	case "$enableval" in
	Y*|y*)
	    BUILD_PYTHON=yes ;;
	*)
	    BUILD_PYTHON=no ;;
	esac
    ],
    [BUILD_PYTHON=yes])

AC_MSG_RESULT($BUILD_PYTHON)

if test "$BUILD_PYTHON" = "yes"; then
    if test "$PYTHON" = "none"; then
	AC_MSG_ERROR([Python missing.  Install it or specify --disable-python to skip the parts of emc2 that depend on Python])
    fi

    AC_MSG_CHECKING([python version])
    if ! $PYTHON -c 'import sys;raise SystemExit,sys.hexversion<0x2040000'
    then
	AC_MSG_ERROR(Python version too old (2.4 or newer required))
    fi
    AC_MSG_RESULT(OK)

    AC_MSG_CHECKING([match between tk and Tkinter versions])
	
    PYTHON_TK_VERSION="`$PYTHON -c 'import _tkinter; print _tkinter.TK_VERSION'`"
    PYTHON_TCL_VERSION="`$PYTHON -c 'import _tkinter; print _tkinter.TCL_VERSION'`"

    if test "$PYTHON_TCL_VERSION" != "$TCL_VERSION"; then
	AC_MSG_RESULT([TCL mismatch: $TCL_VERSION vs $PYTHON_TCL_VERSION])
	AC_MSG_ERROR([Python requires use of Tcl $PYTHON_TCL_VERSION and Tk $PYTHON_TK_VERSION.
Install this version and specify --with-tclConfig and --with-tkConfig if necessary])
    fi
    if test "$PYTHON_TK_VERSION" != "$TK_VERSION"; then
	AC_MSG_RESULT([Tk mismatch: $TK_VERSION vs $PYTHON_TK_VERSION])
	AC_MSG_ERROR(["Python requires use of Tk $TK_VERSION.  Install this version and specify --with-tkConfig if necessary"])
    fi
    AC_MSG_RESULT([$PYTHON_TK_VERSION])

    AC_MSG_CHECKING(location of Python header files)
    INCLUDEPY=`$PYTHON -c 'import distutils.sysconfig; print distutils.sysconfig.get_config_vars().get("INCLUDEPY")'`
    AC_MSG_RESULT($INCLUDEPY)

    AC_CHECK_HEADER($INCLUDEPY/Python.h,[],
	[AC_MSG_ERROR([Required header Python.h missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_MSG_CHECKING(for site-package location)
    SITEPY=`$PYTHON -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib()'`
    AC_MSG_RESULT($SITEPY)

    AC_CHECK_HEADERS(GL/gl.h GL/glu.h,[],[AC_MSG_ERROR([Required OpenGL header missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_CHECK_LIB(GL, glBegin, [], [AC_MSG_ERROR([Required GL library missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_MSG_CHECKING(for working GLU quadrics)
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <GL/gl.h>
#include <GL/glu.h>
]], [[GLUquadric *q;]])],[AC_MSG_RESULT(yes)],[
		AC_MSG_ERROR([Required GLU library missing.  Install it or specify --disable-python to skip the parts of emc2 that depend on Python])
	
    ])

    AC_MSG_CHECKING(for Xmu headers)
    AC_CHECK_HEADERS(X11/Xmu/Xmu.h,[],[AC_MSG_ERROR([Required Xmu header missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])
fi

AC_SUBST([BUILD_PYTHON])
AC_SUBST([INCLUDEPY])
AC_SUBST([SITEPY])


##############################################################################
# files that get created by ./configure                                      #
##############################################################################
#AC_CONFIG_FILES([../configs/rtapi.conf ../configs/emc.conf ../configs/hal.conf config.h])
AC_CONFIG_FILES([../scripts/rtapi.conf])
AC_CONFIG_FILES([../docs/man/man1/linuxcnc.1])
AC_CONFIG_FILES([../scripts/linuxcnc], [chmod +x ../scripts/linuxcnc])
AC_CONFIG_FILES([../scripts/halrun], [chmod +x ../scripts/halrun])
AC_CONFIG_FILES([../scripts/rip-environment], [chmod +x ../scripts/rip-environment])
AC_CONFIG_FILES([../scripts/haltcl], [chmod +x ../scripts/haltcl])
AC_CONFIG_FILES([../scripts/realtime], [chmod +x ../scripts/realtime])
AC_CONFIG_FILES([../scripts/latencyplot], [chmod +x ../scripts/latencyplot])
AC_CONFIG_FILES([../scripts/latencyhistogram], [chmod +x ../scripts/latencyhistogram])
AC_CONFIG_FILES(Makefile.inc)
AC_CONFIG_FILES(Makefile.modinc)
AC_CONFIG_FILES(../tcl/linuxcnc.tcl)
AC_CONFIG_FILES(../lib/python/nf.py)
AC_CONFIG_FILES([../scripts/linuxcncmkdesktop], [chmod +x ../scripts/linuxcncmkdesktop])
AC_CONFIG_FILES(../share/applications/linuxcnc-latency.desktop)
AC_CONFIG_FILES(../share/applications/linuxcnc-latencyplot.desktop)
AC_CONFIG_FILES(../share/applications/linuxcnc.desktop)
AC_CONFIG_FILES(../share/desktop-directories/cnc.directory)
AC_CONFIG_FILES(../share/menus/CNC.menu)
AC_CONFIG_FILES(linuxcncconfig.py-tmp)
AC_OUTPUT

# clean up linuxcncconfig.py:
# subsitute "yes" by True
# subsitute "no" by False
AC_MSG_RESULT(touching up ../lib/python/linuxcncconfig.py)
sed -e 's/"yes"/True/g' -e 's/"no"/False/g' \
    <linuxcncconfig.py-tmp \
    >../lib/python/linuxcncconfig.py
AC_MSG_CHECKING(usability of ../lib/python/linuxcncconfig.py)
python ../lib/python/linuxcncconfig.py
AC_MSG_RESULT(done)

##############################################################################
# message to the user what to do next, after a succesfull ./configure        #
##############################################################################
bold () {
    if tty > /dev/null 2>&1 && type -path tput > /dev/null 2>&1;
    then
        tput smso
    fi
}

offbold () {
    if tty > /dev/null 2>&1 && type -path tput > /dev/null 2>&1;
    then
        tput rmso
    fi
}

echo ""
echo ""
echo "######################################################################"
echo "#                LinuxCNC - Enhanced Machine Controller              #"
echo "######################################################################"
echo "#                                                                    #"
echo "#   LinuxCNC is a software system for computer control of machine    #"
echo "#   tools such as milling machines. LinuxCNC is released under the   #"
echo "#   GPL.  Check out http://www.linuxcnc.org/ for more details.       #"
echo "#                                                                    #"
echo "#                                                                    #"
echo "#   It seems that ./configure completed successfully.                #"
echo "#   If things don't work check config.log for errors & warnings      #"
echo "#                                                                    #"

if test "xyes" = "x$RUN_IN_PLACE"; then
echo "#   Next compile by typing                                           #"
echo "#         make                                                       #"
if test $with_drivers = yes ; then
echo "#         sudo make setuid                                           #"
fi
echo "#                                                                    #"
echo "#   Before running the software, set the environment:                #"
echo "#         . (top dir)/scripts/rip-environment                        #"
else
bold
echo "#   warning: If you already have an installed linuxcnc, this will    #"
echo "#         replace an existing installation.  If you have installed   #"
echo "#         a linuxcnc package, this will damage the package.          #"
offbold
echo "#   hint: To test a self-built version of emc without damaging       #"
echo "#         the package version, don't specify a --prefix              #"
echo "#                                                                    #"
echo "#   Next compile by typing                                           #"
echo "#         make                                                       #"
echo "#   then install it by typing                                        #"
echo "#         sudo make install                                          #"
fi
echo "#                                                                    #"
echo "#   To run the software type                                         #"
echo "#         linuxcnc                                                   #"
echo "#                                                                    #"
echo "######################################################################"
echo ""
echo ""
