/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "nanopb.pb-c.h"
#include "types.pb-c.h"
#include "object.pb-c.h"
#include "rtapi_message.pb-c.h"
#include "test.pb-c.h"

typedef struct _Command Command;
typedef struct _Response Response;
typedef struct _NmlMessage NmlMessage;
typedef struct _Container Container;


/* --- enums --- */


/* --- messages --- */

struct  _Command
{
  ProtobufCMessage base;
  CmdType op;
  protobuf_c_boolean has_serial;
  int32_t serial;
  protobuf_c_boolean has_rsvp;
  ReplyRequired rsvp;
  Originator *origin;
  size_t n_args;
  Object **args;
  protobuf_c_boolean has_timestamp;
  int32_t timestamp;
};
#define COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&command__descriptor) \
    , 0, 0,0, 0,0, NULL, 0,NULL, 0,0 }


struct  _Response
{
  ProtobufCMessage base;
  RespType response;
  protobuf_c_boolean has_in_reply_to;
  CmdType in_reply_to;
  protobuf_c_boolean has_request_serial;
  int32_t request_serial;
  protobuf_c_boolean has_status;
  StatusType status;
  Originator *origin;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  char *errormsg;
  size_t n_args;
  Object **args;
  size_t n_failed_args;
  Object **failed_args;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , 0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,NULL, 0,NULL }


struct  _NmlMessage
{
  ProtobufCMessage base;
  int32_t type;
  ProtobufCBinaryData payload;
};
#define NML_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nml_message__descriptor) \
    , 0, {0,NULL} }


struct  _Container
{
  ProtobufCMessage base;
  uint32_t length;
  MsgType type;
  Command *command;
  Response *response;
  RTAPIMessage *rtapi_message;
  protobuf_c_boolean has_nml;
  ProtobufCBinaryData nml;
  protobuf_c_boolean has_motion;
  ProtobufCBinaryData motion;
  protobuf_c_boolean has_wou;
  ProtobufCBinaryData wou;
  protobuf_c_boolean has_syslog;
  ProtobufCBinaryData syslog;
  char *ascii;
  protobuf_c_boolean has_unicode;
  ProtobufCBinaryData unicode;
  char *gcode;
  char *python;
  protobuf_c_boolean has_pickle;
  ProtobufCBinaryData pickle;
  char *tcl;
  char *xml;
  char *json;
  protobuf_c_boolean has_jpeg;
  ProtobufCBinaryData jpeg;
  protobuf_c_boolean has_png;
  ProtobufCBinaryData png;
  protobuf_c_boolean has_tiff;
  ProtobufCBinaryData tiff;
  protobuf_c_boolean has_postscript;
  ProtobufCBinaryData postscript;
  protobuf_c_boolean has_svg;
  ProtobufCBinaryData svg;
  protobuf_c_boolean has_pru_firmware;
  ProtobufCBinaryData pru_firmware;
  protobuf_c_boolean has_mesa_5i20_firmware;
  ProtobufCBinaryData mesa_5i20_firmware;
  Test1 *test1;
  Test2 *test2;
  Test3 *test3;
};
#define CONTAINER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container__descriptor) \
    , 0, 0, NULL, NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, NULL, 0,{0,NULL}, NULL, NULL, 0,{0,NULL}, NULL, NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL }


/* Command methods */
void   command__init
                     (Command         *message);
size_t command__get_packed_size
                     (const Command   *message);
size_t command__pack
                     (const Command   *message,
                      uint8_t             *out);
size_t command__pack_to_buffer
                     (const Command   *message,
                      ProtobufCBuffer     *buffer);
Command *
       command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   command__free_unpacked
                     (Command *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* NmlMessage methods */
void   nml_message__init
                     (NmlMessage         *message);
size_t nml_message__get_packed_size
                     (const NmlMessage   *message);
size_t nml_message__pack
                     (const NmlMessage   *message,
                      uint8_t             *out);
size_t nml_message__pack_to_buffer
                     (const NmlMessage   *message,
                      ProtobufCBuffer     *buffer);
NmlMessage *
       nml_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nml_message__free_unpacked
                     (NmlMessage *message,
                      ProtobufCAllocator *allocator);
/* Container methods */
void   container__init
                     (Container         *message);
size_t container__get_packed_size
                     (const Container   *message);
size_t container__pack
                     (const Container   *message,
                      uint8_t             *out);
size_t container__pack_to_buffer
                     (const Container   *message,
                      ProtobufCBuffer     *buffer);
Container *
       container__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container__free_unpacked
                     (Container *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Command_Closure)
                 (const Command *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*NmlMessage_Closure)
                 (const NmlMessage *message,
                  void *closure_data);
typedef void (*Container_Closure)
                 (const Container *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor command__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor nml_message__descriptor;
extern const ProtobufCMessageDescriptor container__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_message_2eproto__INCLUDED */
