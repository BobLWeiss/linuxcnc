/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.1-dev at Tue Apr  2 00:07:17 2013. */

#ifndef _PB_OBJECT_NPB_H_
#define _PB_OBJECT_NPB_H_
#include <pb.h>

#include <protobuf/generated/types.npb.h>
#include <protobuf/generated/value.npb.h>
#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _Component {
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_comp_id;
    int32_t comp_id;
    bool has_type;
    uint32_t type;
    bool has_state;
    uint32_t state;
    bool has_last_update;
    uint32_t last_update;
    bool has_last_bound;
    uint32_t last_bound;
    bool has_last_unbound;
    uint32_t last_unbound;
    bool has_pid;
    uint32_t pid;
    size_t args_count;
    char args[20][41];
} Component;

typedef struct _Function {
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
} Function;

typedef struct _Group {
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_id;
    int32_t id;
    bool has_userarg1;
    int32_t userarg1;
    bool has_userarg2;
    int32_t userarg2;
    bool has_serial;
    int32_t serial;
    pb_callback_t member;
} Group;

typedef struct _Instance {
    bool has_name;
    char name[41];
    bool has_id;
    int32_t id;
} Instance;

typedef struct _Member {
    bool has_type;
    ObjectType type;
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_userarg1;
    int32_t userarg1;
    bool has_epsilon;
    double epsilon;
    bool has_halbit;
    bool halbit;
    bool has_halfloat;
    double halfloat;
    bool has_hals32;
    int32_t hals32;
    bool has_halu32;
    uint32_t halu32;
} Member;

typedef struct _Param {
    bool has_type;
    ScalarType type;
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_pdir;
    HalParamDirection pdir;
    bool has_oldname;
    char oldname[41];
    bool has_owner;
    int32_t owner;
    bool has_runtime;
    int32_t runtime;
    bool has_maytime;
    int32_t maytime;
    bool has_halbit;
    bool halbit;
    bool has_halfloat;
    double halfloat;
    bool has_hals32;
    int32_t hals32;
    bool has_halu32;
    uint32_t halu32;
} Param;

typedef struct _Pin {
    bool has_type;
    ScalarType type;
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_owner;
    int32_t owner;
    bool has_linked;
    bool linked;
    bool has_oldname;
    char oldname[41];
    bool has_epsilon;
    double epsilon;
    bool has_flags;
    uint32_t flags;
    bool has_halbit;
    bool halbit;
    bool has_halfloat;
    double halfloat;
    bool has_hals32;
    int32_t hals32;
    bool has_halu32;
    uint32_t halu32;
} Pin;

typedef struct _Ring {
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_owner;
    int32_t owner;
    bool has_stream;
    bool stream;
    bool has_wmutex;
    bool wmutex;
    bool has_rmutex;
    bool rmutex;
    bool has_rtapi_shm;
    bool rtapi_shm;
    bool has_reader;
    int32_t reader;
    bool has_writer;
    int32_t writer;
    bool has_size;
    int32_t size;
    bool has_scratchpad;
    int32_t scratchpad;
} Ring;

typedef struct _Signal {
    bool has_type;
    ScalarType type;
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_readers;
    uint32_t readers;
    bool has_writers;
    uint32_t writers;
    bool has_bidirs;
    uint32_t bidirs;
    bool has_halbit;
    bool halbit;
    bool has_halfloat;
    double halfloat;
    bool has_hals32;
    int32_t hals32;
    bool has_halu32;
    uint32_t halu32;
} Signal;

typedef struct _Originator {
    bool has_origin;
    OriginType origin;
    bool has_detail;
    OriginDetail detail;
    bool has_name;
    char name[41];
    bool has_id;
    int32_t id;
    bool has_instance;
    Instance instance;
} Originator;

typedef struct _Thread {
    bool has_name;
    char name[41];
    bool has_handle;
    uint32_t handle;
    bool has_uses_fp;
    bool uses_fp;
    bool has_period;
    uint32_t period;
    bool has_prioritiy;
    int32_t prioritiy;
    bool has_task_id;
    uint32_t task_id;
    bool has_cpu_id;
    uint32_t cpu_id;
    size_t functions_count;
    Function functions[100];
} Thread;

typedef struct _Object {
    ObjectType type;
    bool has_value;
    Value value;
    bool has_origin;
    Originator origin;
    bool has_instance;
    Instance instance;
    bool has_pin;
    Pin pin;
    bool has_signal;
    Signal signal;
    bool has_param;
    Param param;
    bool has_thread;
    Thread thread;
    bool has_comp;
    Component comp;
    bool has_ring;
    Ring ring;
    bool has_group;
    Group group;
    bool has_member;
    Member member;
    bool has_function;
    Function function;
} Object;

/* Default values for struct fields */

/* Struct field encoding specification for nanopb */
extern const pb_field_t Instance_fields[3];
extern const pb_field_t Originator_fields[6];
extern const pb_field_t Pin_fields[13];
extern const pb_field_t Signal_fields[11];
extern const pb_field_t Param_fields[13];
extern const pb_field_t Function_fields[3];
extern const pb_field_t Thread_fields[9];
extern const pb_field_t Component_fields[11];
extern const pb_field_t Ring_fields[12];
extern const pb_field_t Member_fields[10];
extern const pb_field_t Group_fields[8];
extern const pb_field_t Object_fields[14];

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
