// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nanopb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NanoPBOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NanoPBOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_nanopb_2eproto() {
  protobuf_AddDesc_nanopb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nanopb.proto");
  GOOGLE_CHECK(file != NULL);
  NanoPBOptions_descriptor_ = file->message_type(0);
  static const int NanoPBOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, long_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, packed_struct_),
  };
  NanoPBOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NanoPBOptions_descriptor_,
      NanoPBOptions::default_instance_,
      NanoPBOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanoPBOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NanoPBOptions));
  FieldType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nanopb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NanoPBOptions_descriptor_, &NanoPBOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nanopb_2eproto() {
  delete NanoPBOptions::default_instance_;
  delete NanoPBOptions_reflection_;
}

void protobuf_AddDesc_nanopb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014nanopb.proto\032 google/protobuf/descript"
    "or.proto\"\222\001\n\rNanoPBOptions\022\020\n\010max_size\030\001"
    " \001(\005\022\021\n\tmax_count\030\002 \001(\005\022$\n\004type\030\003 \001(\0162\n."
    "FieldType:\nFT_DEFAULT\022\030\n\nlong_names\030\004 \001("
    "\010:\004true\022\034\n\rpacked_struct\030\005 \001(\010:\005false*J\n"
    "\tFieldType\022\016\n\nFT_DEFAULT\020\000\022\017\n\013FT_CALLBAC"
    "K\020\001\022\r\n\tFT_STATIC\020\002\022\r\n\tFT_IGNORE\020\003:E\n\016nan"
    "opb_fileopt\022\034.google.protobuf.FileOption"
    "s\030\362\007 \001(\0132\016.NanoPBOptions:G\n\rnanopb_msgop"
    "t\022\037.google.protobuf.MessageOptions\030\362\007 \001("
    "\0132\016.NanoPBOptions:E\n\016nanopb_enumopt\022\034.go"
    "ogle.protobuf.EnumOptions\030\362\007 \001(\0132\016.NanoP"
    "BOptions:>\n\006nanopb\022\035.google.protobuf.Fie"
    "ldOptions\030\362\007 \001(\0132\016.NanoPBOptionsB\032\n\030fi.k"
    "apsi.koti.jpa.nanopb", 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nanopb.proto", &protobuf_RegisterTypes);
  NanoPBOptions::default_instance_ = new NanoPBOptions();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FileOptions::default_instance(),
    1010, 11, false, false,
    &::NanoPBOptions::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    1010, 11, false, false,
    &::NanoPBOptions::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::EnumOptions::default_instance(),
    1010, 11, false, false,
    &::NanoPBOptions::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    1010, 11, false, false,
    &::NanoPBOptions::default_instance());
  NanoPBOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nanopb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nanopb_2eproto {
  StaticDescriptorInitializer_nanopb_2eproto() {
    protobuf_AddDesc_nanopb_2eproto();
  }
} static_descriptor_initializer_nanopb_2eproto_;
const ::google::protobuf::EnumDescriptor* FieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldType_descriptor_;
}
bool FieldType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NanoPBOptions::kMaxSizeFieldNumber;
const int NanoPBOptions::kMaxCountFieldNumber;
const int NanoPBOptions::kTypeFieldNumber;
const int NanoPBOptions::kLongNamesFieldNumber;
const int NanoPBOptions::kPackedStructFieldNumber;
#endif  // !_MSC_VER

NanoPBOptions::NanoPBOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NanoPBOptions::InitAsDefaultInstance() {
}

NanoPBOptions::NanoPBOptions(const NanoPBOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NanoPBOptions::SharedCtor() {
  _cached_size_ = 0;
  max_size_ = 0;
  max_count_ = 0;
  type_ = 0;
  long_names_ = true;
  packed_struct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NanoPBOptions::~NanoPBOptions() {
  SharedDtor();
}

void NanoPBOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NanoPBOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NanoPBOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NanoPBOptions_descriptor_;
}

const NanoPBOptions& NanoPBOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanopb_2eproto();
  return *default_instance_;
}

NanoPBOptions* NanoPBOptions::default_instance_ = NULL;

NanoPBOptions* NanoPBOptions::New() const {
  return new NanoPBOptions;
}

void NanoPBOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_size_ = 0;
    max_count_ = 0;
    type_ = 0;
    long_names_ = true;
    packed_struct_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NanoPBOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_count;
        break;
      }

      // optional int32 max_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .FieldType type = 3 [default = FT_DEFAULT];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FieldType_IsValid(value)) {
            set_type(static_cast< ::FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_long_names;
        break;
      }

      // optional bool long_names = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_names_)));
          set_has_long_names();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_packed_struct;
        break;
      }

      // optional bool packed_struct = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packed_struct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &packed_struct_)));
          set_has_packed_struct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NanoPBOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_size = 1;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_size(), output);
  }

  // optional int32 max_count = 2;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_count(), output);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional bool long_names = 4 [default = true];
  if (has_long_names()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->long_names(), output);
  }

  // optional bool packed_struct = 5 [default = false];
  if (has_packed_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->packed_struct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NanoPBOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_size = 1;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_size(), target);
  }

  // optional int32 max_count = 2;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_count(), target);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional bool long_names = 4 [default = true];
  if (has_long_names()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->long_names(), target);
  }

  // optional bool packed_struct = 5 [default = false];
  if (has_packed_struct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->packed_struct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NanoPBOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_size = 1;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }

    // optional int32 max_count = 2;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // optional .FieldType type = 3 [default = FT_DEFAULT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool long_names = 4 [default = true];
    if (has_long_names()) {
      total_size += 1 + 1;
    }

    // optional bool packed_struct = 5 [default = false];
    if (has_packed_struct()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NanoPBOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NanoPBOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NanoPBOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NanoPBOptions::MergeFrom(const NanoPBOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_long_names()) {
      set_long_names(from.long_names());
    }
    if (from.has_packed_struct()) {
      set_packed_struct(from.packed_struct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NanoPBOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NanoPBOptions::CopyFrom(const NanoPBOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPBOptions::IsInitialized() const {

  return true;
}

void NanoPBOptions::Swap(NanoPBOptions* other) {
  if (other != this) {
    std::swap(max_size_, other->max_size_);
    std::swap(max_count_, other->max_count_);
    std::swap(type_, other->type_);
    std::swap(long_names_, other->long_names_);
    std::swap(packed_struct_, other->packed_struct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NanoPBOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NanoPBOptions_descriptor_;
  metadata.reflection = NanoPBOptions_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_fileopt(kNanopbFileoptFieldNumber, ::NanoPBOptions::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_msgopt(kNanopbMsgoptFieldNumber, ::NanoPBOptions::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumopt(kNanopbEnumoptFieldNumber, ::NanoPBOptions::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb(kNanopbFieldNumber, ::NanoPBOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
