/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_value_2eproto__INCLUDED
#define PROTOBUF_C_value_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "nanopb.pb-c.h"
#include "types.pb-c.h"

typedef struct _Value Value;


/* --- enums --- */


/* --- messages --- */

struct  _Value
{
  ProtobufCMessage base;
  ScalarType type;
  char *name;
  protobuf_c_boolean has_ref;
  uint32_t ref;
  protobuf_c_boolean has_changed;
  protobuf_c_boolean changed;
  protobuf_c_boolean has_halbit;
  protobuf_c_boolean halbit;
  protobuf_c_boolean has_halfloat;
  double halfloat;
  protobuf_c_boolean has_hals32;
  int32_t hals32;
  protobuf_c_boolean has_halu32;
  uint32_t halu32;
  protobuf_c_boolean has_v_bytes;
  ProtobufCBinaryData v_bytes;
  protobuf_c_boolean has_v_int32;
  int32_t v_int32;
  protobuf_c_boolean has_v_int63;
  int64_t v_int63;
  protobuf_c_boolean has_v_uint32;
  uint32_t v_uint32;
  protobuf_c_boolean has_v_uint63;
  uint64_t v_uint63;
  protobuf_c_boolean has_v_double;
  double v_double;
  char *v_string;
  protobuf_c_boolean has_v_bool;
  protobuf_c_boolean v_bool;
};
#define VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__descriptor) \
    , 0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


/* Value methods */
void   value__init
                     (Value         *message);
size_t value__get_packed_size
                     (const Value   *message);
size_t value__pack
                     (const Value   *message,
                      uint8_t             *out);
size_t value__pack_to_buffer
                     (const Value   *message,
                      ProtobufCBuffer     *buffer);
Value *
       value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value__free_unpacked
                     (Value *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Value_Closure)
                 (const Value *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor value__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_value_2eproto__INCLUDED */
