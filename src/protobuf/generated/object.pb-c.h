/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_object_2eproto__INCLUDED
#define PROTOBUF_C_object_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "nanopb.pb-c.h"
#include "types.pb-c.h"
#include "value.pb-c.h"

typedef struct _Instance Instance;
typedef struct _Originator Originator;
typedef struct _Pin Pin;
typedef struct _Signal Signal;
typedef struct _Param Param;
typedef struct _Function Function;
typedef struct _Thread Thread;
typedef struct _Component Component;
typedef struct _Ring Ring;
typedef struct _Member Member;
typedef struct _Group Group;
typedef struct _Object Object;


/* --- enums --- */


/* --- messages --- */

struct  _Instance
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_id;
  int32_t id;
};
#define INSTANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance__descriptor) \
    , NULL, 0,0 }


struct  _Originator
{
  ProtobufCMessage base;
  protobuf_c_boolean has_origin;
  OriginType origin;
  protobuf_c_boolean has_detail;
  OriginDetail detail;
  char *name;
  protobuf_c_boolean has_id;
  int32_t id;
  Instance *instance;
};
#define ORIGINATOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&originator__descriptor) \
    , 0,0, 0,0, NULL, 0,0, NULL }


struct  _Pin
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ScalarType type;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_halbit;
  protobuf_c_boolean halbit;
  protobuf_c_boolean has_halfloat;
  double halfloat;
  protobuf_c_boolean has_hals32;
  int32_t hals32;
  protobuf_c_boolean has_halu32;
  uint32_t halu32;
  protobuf_c_boolean has_owner;
  int32_t owner;
  protobuf_c_boolean has_linked;
  protobuf_c_boolean linked;
  char *oldname;
  protobuf_c_boolean has_epsilon;
  double epsilon;
  protobuf_c_boolean has_flags;
  uint32_t flags;
};
#define PIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pin__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0 }


struct  _Signal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ScalarType type;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_halbit;
  protobuf_c_boolean halbit;
  protobuf_c_boolean has_halfloat;
  double halfloat;
  protobuf_c_boolean has_hals32;
  int32_t hals32;
  protobuf_c_boolean has_halu32;
  uint32_t halu32;
  protobuf_c_boolean has_readers;
  uint32_t readers;
  protobuf_c_boolean has_writers;
  uint32_t writers;
  protobuf_c_boolean has_bidirs;
  uint32_t bidirs;
};
#define SIGNAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signal__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Param
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ScalarType type;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_halbit;
  protobuf_c_boolean halbit;
  protobuf_c_boolean has_halfloat;
  double halfloat;
  protobuf_c_boolean has_hals32;
  int32_t hals32;
  protobuf_c_boolean has_halu32;
  uint32_t halu32;
  protobuf_c_boolean has_pdir;
  HalParamDirection pdir;
  char *oldname;
  protobuf_c_boolean has_owner;
  int32_t owner;
  protobuf_c_boolean has_runtime;
  int32_t runtime;
  protobuf_c_boolean has_maytime;
  int32_t maytime;
};
#define PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&param__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _Function
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
};
#define FUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&function__descriptor) \
    , NULL, 0,0 }


struct  _Thread
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_uses_fp;
  protobuf_c_boolean uses_fp;
  protobuf_c_boolean has_period;
  uint32_t period;
  protobuf_c_boolean has_prioritiy;
  int32_t prioritiy;
  protobuf_c_boolean has_task_id;
  uint32_t task_id;
  protobuf_c_boolean has_cpu_id;
  uint32_t cpu_id;
  size_t n_functions;
  Function **functions;
};
#define THREAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&thread__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Component
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_comp_id;
  int32_t comp_id;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_state;
  uint32_t state;
  protobuf_c_boolean has_last_update;
  uint32_t last_update;
  protobuf_c_boolean has_last_bound;
  uint32_t last_bound;
  protobuf_c_boolean has_last_unbound;
  uint32_t last_unbound;
  protobuf_c_boolean has_pid;
  uint32_t pid;
  size_t n_args;
  char **args;
};
#define COMPONENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&component__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Ring
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_owner;
  int32_t owner;
  protobuf_c_boolean has_stream;
  protobuf_c_boolean stream;
  protobuf_c_boolean has_wmutex;
  protobuf_c_boolean wmutex;
  protobuf_c_boolean has_rmutex;
  protobuf_c_boolean rmutex;
  protobuf_c_boolean has_rtapi_shm;
  protobuf_c_boolean rtapi_shm;
  protobuf_c_boolean has_reader;
  int32_t reader;
  protobuf_c_boolean has_writer;
  int32_t writer;
  protobuf_c_boolean has_size;
  int32_t size;
  protobuf_c_boolean has_scratchpad;
  int32_t scratchpad;
};
#define RING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ring__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Member
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ObjectType type;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_userarg1;
  int32_t userarg1;
  protobuf_c_boolean has_epsilon;
  double epsilon;
  protobuf_c_boolean has_halbit;
  protobuf_c_boolean halbit;
  protobuf_c_boolean has_halfloat;
  double halfloat;
  protobuf_c_boolean has_hals32;
  int32_t hals32;
  protobuf_c_boolean has_halu32;
  uint32_t halu32;
};
#define MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&member__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Group
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_handle;
  uint32_t handle;
  protobuf_c_boolean has_id;
  int32_t id;
  protobuf_c_boolean has_userarg1;
  int32_t userarg1;
  protobuf_c_boolean has_userarg2;
  int32_t userarg2;
  protobuf_c_boolean has_serial;
  int32_t serial;
  size_t n_member;
  Member **member;
};
#define GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Object
{
  ProtobufCMessage base;
  ObjectType type;
  Value *value;
  Originator *origin;
  Instance *instance;
  Pin *pin;
  Signal *signal;
  Param *param;
  Thread *thread;
  Component *comp;
  Ring *ring;
  Group *group;
  Member *member;
  Function *function;
};
#define OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&object__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Instance methods */
void   instance__init
                     (Instance         *message);
size_t instance__get_packed_size
                     (const Instance   *message);
size_t instance__pack
                     (const Instance   *message,
                      uint8_t             *out);
size_t instance__pack_to_buffer
                     (const Instance   *message,
                      ProtobufCBuffer     *buffer);
Instance *
       instance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance__free_unpacked
                     (Instance *message,
                      ProtobufCAllocator *allocator);
/* Originator methods */
void   originator__init
                     (Originator         *message);
size_t originator__get_packed_size
                     (const Originator   *message);
size_t originator__pack
                     (const Originator   *message,
                      uint8_t             *out);
size_t originator__pack_to_buffer
                     (const Originator   *message,
                      ProtobufCBuffer     *buffer);
Originator *
       originator__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   originator__free_unpacked
                     (Originator *message,
                      ProtobufCAllocator *allocator);
/* Pin methods */
void   pin__init
                     (Pin         *message);
size_t pin__get_packed_size
                     (const Pin   *message);
size_t pin__pack
                     (const Pin   *message,
                      uint8_t             *out);
size_t pin__pack_to_buffer
                     (const Pin   *message,
                      ProtobufCBuffer     *buffer);
Pin *
       pin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pin__free_unpacked
                     (Pin *message,
                      ProtobufCAllocator *allocator);
/* Signal methods */
void   signal__init
                     (Signal         *message);
size_t signal__get_packed_size
                     (const Signal   *message);
size_t signal__pack
                     (const Signal   *message,
                      uint8_t             *out);
size_t signal__pack_to_buffer
                     (const Signal   *message,
                      ProtobufCBuffer     *buffer);
Signal *
       signal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signal__free_unpacked
                     (Signal *message,
                      ProtobufCAllocator *allocator);
/* Param methods */
void   param__init
                     (Param         *message);
size_t param__get_packed_size
                     (const Param   *message);
size_t param__pack
                     (const Param   *message,
                      uint8_t             *out);
size_t param__pack_to_buffer
                     (const Param   *message,
                      ProtobufCBuffer     *buffer);
Param *
       param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   param__free_unpacked
                     (Param *message,
                      ProtobufCAllocator *allocator);
/* Function methods */
void   function__init
                     (Function         *message);
size_t function__get_packed_size
                     (const Function   *message);
size_t function__pack
                     (const Function   *message,
                      uint8_t             *out);
size_t function__pack_to_buffer
                     (const Function   *message,
                      ProtobufCBuffer     *buffer);
Function *
       function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   function__free_unpacked
                     (Function *message,
                      ProtobufCAllocator *allocator);
/* Thread methods */
void   thread__init
                     (Thread         *message);
size_t thread__get_packed_size
                     (const Thread   *message);
size_t thread__pack
                     (const Thread   *message,
                      uint8_t             *out);
size_t thread__pack_to_buffer
                     (const Thread   *message,
                      ProtobufCBuffer     *buffer);
Thread *
       thread__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   thread__free_unpacked
                     (Thread *message,
                      ProtobufCAllocator *allocator);
/* Component methods */
void   component__init
                     (Component         *message);
size_t component__get_packed_size
                     (const Component   *message);
size_t component__pack
                     (const Component   *message,
                      uint8_t             *out);
size_t component__pack_to_buffer
                     (const Component   *message,
                      ProtobufCBuffer     *buffer);
Component *
       component__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   component__free_unpacked
                     (Component *message,
                      ProtobufCAllocator *allocator);
/* Ring methods */
void   ring__init
                     (Ring         *message);
size_t ring__get_packed_size
                     (const Ring   *message);
size_t ring__pack
                     (const Ring   *message,
                      uint8_t             *out);
size_t ring__pack_to_buffer
                     (const Ring   *message,
                      ProtobufCBuffer     *buffer);
Ring *
       ring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ring__free_unpacked
                     (Ring *message,
                      ProtobufCAllocator *allocator);
/* Member methods */
void   member__init
                     (Member         *message);
size_t member__get_packed_size
                     (const Member   *message);
size_t member__pack
                     (const Member   *message,
                      uint8_t             *out);
size_t member__pack_to_buffer
                     (const Member   *message,
                      ProtobufCBuffer     *buffer);
Member *
       member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   member__free_unpacked
                     (Member *message,
                      ProtobufCAllocator *allocator);
/* Group methods */
void   group__init
                     (Group         *message);
size_t group__get_packed_size
                     (const Group   *message);
size_t group__pack
                     (const Group   *message,
                      uint8_t             *out);
size_t group__pack_to_buffer
                     (const Group   *message,
                      ProtobufCBuffer     *buffer);
Group *
       group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group__free_unpacked
                     (Group *message,
                      ProtobufCAllocator *allocator);
/* Object methods */
void   object__init
                     (Object         *message);
size_t object__get_packed_size
                     (const Object   *message);
size_t object__pack
                     (const Object   *message,
                      uint8_t             *out);
size_t object__pack_to_buffer
                     (const Object   *message,
                      ProtobufCBuffer     *buffer);
Object *
       object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   object__free_unpacked
                     (Object *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Instance_Closure)
                 (const Instance *message,
                  void *closure_data);
typedef void (*Originator_Closure)
                 (const Originator *message,
                  void *closure_data);
typedef void (*Pin_Closure)
                 (const Pin *message,
                  void *closure_data);
typedef void (*Signal_Closure)
                 (const Signal *message,
                  void *closure_data);
typedef void (*Param_Closure)
                 (const Param *message,
                  void *closure_data);
typedef void (*Function_Closure)
                 (const Function *message,
                  void *closure_data);
typedef void (*Thread_Closure)
                 (const Thread *message,
                  void *closure_data);
typedef void (*Component_Closure)
                 (const Component *message,
                  void *closure_data);
typedef void (*Ring_Closure)
                 (const Ring *message,
                  void *closure_data);
typedef void (*Member_Closure)
                 (const Member *message,
                  void *closure_data);
typedef void (*Group_Closure)
                 (const Group *message,
                  void *closure_data);
typedef void (*Object_Closure)
                 (const Object *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor instance__descriptor;
extern const ProtobufCMessageDescriptor originator__descriptor;
extern const ProtobufCMessageDescriptor pin__descriptor;
extern const ProtobufCMessageDescriptor signal__descriptor;
extern const ProtobufCMessageDescriptor param__descriptor;
extern const ProtobufCMessageDescriptor function__descriptor;
extern const ProtobufCMessageDescriptor thread__descriptor;
extern const ProtobufCMessageDescriptor component__descriptor;
extern const ProtobufCMessageDescriptor ring__descriptor;
extern const ProtobufCMessageDescriptor member__descriptor;
extern const ProtobufCMessageDescriptor group__descriptor;
extern const ProtobufCMessageDescriptor object__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_object_2eproto__INCLUDED */
