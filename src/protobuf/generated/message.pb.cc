// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* NmlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NmlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, rsvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, timestamp_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, in_reply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, failed_args_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  NmlMessage_descriptor_ = file->message_type(2);
  static const int NmlMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmlMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmlMessage, payload_),
  };
  NmlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NmlMessage_descriptor_,
      NmlMessage::default_instance_,
      NmlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NmlMessage));
  Container_descriptor_ = file->message_type(3);
  static const int Container_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, rtapi_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, nml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, wou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, syslog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, ascii_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, unicode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, gcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, python_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, pickle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tcl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, jpeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, png_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, postscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, svg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, pru_firmware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, mesa_5i20_firmware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, test2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, test3_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NmlMessage_descriptor_, &NmlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete NmlMessage::default_instance_;
  delete NmlMessage_reflection_;
  delete Container::default_instance_;
  delete Container_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::protobuf_AddDesc_types_2eproto();
  ::protobuf_AddDesc_object_2eproto();
  ::protobuf_AddDesc_rtapi_5fmessage_2eproto();
  ::protobuf_AddDesc_test_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\032\014nanopb.proto\032\013types.pro"
    "to\032\014object.proto\032\023rtapi_message.proto\032\nt"
    "est.proto\"\233\001\n\007Command\022\024\n\002op\030\n \002(\0162\010.CmdT"
    "ype\022\016\n\006serial\030\024 \001(\005\022\034\n\004rsvp\030\036 \001(\0162\016.Repl"
    "yRequired\022\033\n\006origin\030( \001(\0132\013.Originator\022\034"
    "\n\004args\0302 \003(\0132\007.ObjectB\005\222\?\002\020\024\022\021\n\ttimestam"
    "p\030< \001(\005\"\207\002\n\010Response\022\033\n\010response\030\005 \002(\0162\t"
    ".RespType\022\035\n\013in_reply_to\030\n \001(\0162\010.CmdType"
    "\022\026\n\016request_serial\030\024 \001(\005\022\033\n\006status\030\031 \001(\016"
    "2\013.StatusType\022\033\n\006origin\030\036 \001(\0132\013.Originat"
    "or\022\021\n\ttimestamp\030( \001(\003\022\027\n\010errormsg\0302 \001(\tB"
    "\005\222\?\002\010d\022\034\n\004args\030< \003(\0132\007.ObjectB\005\222\?\002\020\024\022#\n\013"
    "failed_args\030F \003(\0132\007.ObjectB\005\222\?\002\020\024\"+\n\nNml"
    "Message\022\014\n\004type\030\n \002(\005\022\017\n\007payload\030\024 \002(\014\"\211"
    "\004\n\tContainer\022\016\n\006length\030\001 \002(\007\022\026\n\004type\030\002 \002"
    "(\0162\010.MsgType\022\031\n\007command\030\004 \001(\0132\010.Command\022"
    "\033\n\010response\030\005 \001(\0132\t.Response\022%\n\rrtapi_me"
    "ssage\030\006 \001(\0132\016.RTAPI_Message\022\013\n\003nml\030\007 \001(\014"
    "\022\016\n\006motion\030\010 \001(\014\022\013\n\003wou\030\t \001(\014\022\016\n\006syslog\030"
    "\n \001(\014\022\r\n\005ascii\030d \001(\t\022\017\n\007unicode\030e \001(\014\022\r\n"
    "\005gcode\030f \001(\t\022\016\n\006python\030g \001(\t\022\016\n\006pickle\030h"
    " \001(\014\022\013\n\003tcl\030i \001(\t\022\013\n\003xml\030j \001(\t\022\014\n\004json\030k"
    " \001(\t\022\014\n\004jpeg\030l \001(\014\022\013\n\003png\030m \001(\014\022\014\n\004tiff\030"
    "n \001(\014\022\022\n\npostscript\030o \001(\014\022\013\n\003svg\030p \001(\014\022\025"
    "\n\014pru_firmware\030\200\020 \001(\014\022\033\n\022mesa_5i20_firmw"
    "are\030\270\027 \001(\014\022\026\n\005test1\030\211\' \001(\0132\006.Test1\022\026\n\005te"
    "st2\030\212\' \001(\0132\006.Test2\022\026\n\005test3\030\213\' \001(\0132\006.Tes"
    "t3", 1082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  Response::default_instance_ = new Response();
  NmlMessage::default_instance_ = new NmlMessage();
  Container::default_instance_ = new Container();
  Command::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  NmlMessage::default_instance_->InitAsDefaultInstance();
  Container::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Command::kOpFieldNumber;
const int Command::kSerialFieldNumber;
const int Command::kRsvpFieldNumber;
const int Command::kOriginFieldNumber;
const int Command::kArgsFieldNumber;
const int Command::kTimestampFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  origin_ = const_cast< ::Originator*>(&::Originator::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  op_ = 10;
  serial_ = 0;
  rsvp_ = 0;
  origin_ = NULL;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 10;
    serial_ = 0;
    rsvp_ = 0;
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Originator::Clear();
    }
    timestamp_ = 0;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CmdType op = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CmdType_IsValid(value)) {
            set_op(static_cast< ::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_serial;
        break;
      }

      // optional int32 serial = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rsvp;
        break;
      }

      // optional .ReplyRequired rsvp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsvp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReplyRequired_IsValid(value)) {
            set_rsvp(static_cast< ::ReplyRequired >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_origin;
        break;
      }

      // optional .Originator origin = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_args;
        break;
      }

      // repeated .Object args = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_args;
        if (input->ExpectTag(480)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CmdType op = 10;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->op(), output);
  }

  // optional int32 serial = 20;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->serial(), output);
  }

  // optional .ReplyRequired rsvp = 30;
  if (has_rsvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->rsvp(), output);
  }

  // optional .Originator origin = 40;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->origin(), output);
  }

  // repeated .Object args = 50;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->args(i), output);
  }

  // optional int32 timestamp = 60;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CmdType op = 10;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->op(), target);
  }

  // optional int32 serial = 20;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->serial(), target);
  }

  // optional .ReplyRequired rsvp = 30;
  if (has_rsvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->rsvp(), target);
  }

  // optional .Originator origin = 40;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->origin(), target);
  }

  // repeated .Object args = 50;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->args(i), target);
  }

  // optional int32 timestamp = 60;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CmdType op = 10;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional int32 serial = 20;
    if (has_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // optional .ReplyRequired rsvp = 30;
    if (has_rsvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rsvp());
    }

    // optional .Originator origin = 40;
    if (has_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional int32 timestamp = 60;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  // repeated .Object args = 50;
  total_size += 2 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_rsvp()) {
      set_rsvp(from.rsvp());
    }
    if (from.has_origin()) {
      mutable_origin()->::Originator::MergeFrom(from.origin());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(serial_, other->serial_);
    std::swap(rsvp_, other->rsvp_);
    std::swap(origin_, other->origin_);
    args_.Swap(&other->args_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kResponseFieldNumber;
const int Response::kInReplyToFieldNumber;
const int Response::kRequestSerialFieldNumber;
const int Response::kStatusFieldNumber;
const int Response::kOriginFieldNumber;
const int Response::kTimestampFieldNumber;
const int Response::kErrormsgFieldNumber;
const int Response::kArgsFieldNumber;
const int Response::kFailedArgsFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  origin_ = const_cast< ::Originator*>(&::Originator::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  response_ = 10;
  in_reply_to_ = 10;
  request_serial_ = 0;
  status_ = 1;
  origin_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
    delete origin_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_ = 10;
    in_reply_to_ = 10;
    request_serial_ = 0;
    status_ = 1;
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Originator::Clear();
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  args_.Clear();
  failed_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RespType response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RespType_IsValid(value)) {
            set_response(static_cast< ::RespType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_in_reply_to;
        break;
      }

      // optional .CmdType in_reply_to = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_reply_to:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CmdType_IsValid(value)) {
            set_in_reply_to(static_cast< ::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_request_serial;
        break;
      }

      // optional int32 request_serial = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_serial_)));
          set_has_request_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_status;
        break;
      }

      // optional .StatusType status = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusType_IsValid(value)) {
            set_status(static_cast< ::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_origin;
        break;
      }

      // optional .Originator origin = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_errormsg;
        break;
      }

      // optional string errormsg = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_args;
        break;
      }

      // repeated .Object args = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_args;
        if (input->ExpectTag(562)) goto parse_failed_args;
        break;
      }

      // repeated .Object failed_args = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failed_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_failed_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_failed_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RespType response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->response(), output);
  }

  // optional .CmdType in_reply_to = 10;
  if (has_in_reply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->in_reply_to(), output);
  }

  // optional int32 request_serial = 20;
  if (has_request_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->request_serial(), output);
  }

  // optional .StatusType status = 25;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->status(), output);
  }

  // optional .Originator origin = 30;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->origin(), output);
  }

  // optional int64 timestamp = 40;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->timestamp(), output);
  }

  // optional string errormsg = 50;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->errormsg(), output);
  }

  // repeated .Object args = 60;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->args(i), output);
  }

  // repeated .Object failed_args = 70;
  for (int i = 0; i < this->failed_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->failed_args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RespType response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->response(), target);
  }

  // optional .CmdType in_reply_to = 10;
  if (has_in_reply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->in_reply_to(), target);
  }

  // optional int32 request_serial = 20;
  if (has_request_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->request_serial(), target);
  }

  // optional .StatusType status = 25;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->status(), target);
  }

  // optional .Originator origin = 30;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->origin(), target);
  }

  // optional int64 timestamp = 40;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->timestamp(), target);
  }

  // optional string errormsg = 50;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->errormsg(), target);
  }

  // repeated .Object args = 60;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->args(i), target);
  }

  // repeated .Object failed_args = 70;
  for (int i = 0; i < this->failed_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->failed_args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RespType response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

    // optional .CmdType in_reply_to = 10;
    if (has_in_reply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_reply_to());
    }

    // optional int32 request_serial = 20;
    if (has_request_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_serial());
    }

    // optional .StatusType status = 25;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .Originator origin = 30;
    if (has_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional int64 timestamp = 40;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string errormsg = 50;
    if (has_errormsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  // repeated .Object args = 60;
  total_size += 2 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  // repeated .Object failed_args = 70;
  total_size += 2 * this->failed_args_size();
  for (int i = 0; i < this->failed_args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->failed_args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  failed_args_.MergeFrom(from.failed_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_in_reply_to()) {
      set_in_reply_to(from.in_reply_to());
    }
    if (from.has_request_serial()) {
      set_request_serial(from.request_serial());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_origin()) {
      mutable_origin()->::Originator::MergeFrom(from.origin());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  for (int i = 0; i < failed_args_size(); i++) {
    if (!this->failed_args(i).IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(in_reply_to_, other->in_reply_to_);
    std::swap(request_serial_, other->request_serial_);
    std::swap(status_, other->status_);
    std::swap(origin_, other->origin_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(errormsg_, other->errormsg_);
    args_.Swap(&other->args_);
    failed_args_.Swap(&other->failed_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NmlMessage::kTypeFieldNumber;
const int NmlMessage::kPayloadFieldNumber;
#endif  // !_MSC_VER

NmlMessage::NmlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NmlMessage::InitAsDefaultInstance() {
}

NmlMessage::NmlMessage(const NmlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NmlMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NmlMessage::~NmlMessage() {
  SharedDtor();
}

void NmlMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void NmlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NmlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NmlMessage_descriptor_;
}

const NmlMessage& NmlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NmlMessage* NmlMessage::default_instance_ = NULL;

NmlMessage* NmlMessage::New() const {
  return new NmlMessage;
}

void NmlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NmlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_payload;
        break;
      }

      // required bytes payload = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NmlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // required bytes payload = 20;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NmlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // required bytes payload = 20;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NmlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bytes payload = 20;
    if (has_payload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NmlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NmlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NmlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NmlMessage::MergeFrom(const NmlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NmlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NmlMessage::CopyFrom(const NmlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NmlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NmlMessage::Swap(NmlMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NmlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NmlMessage_descriptor_;
  metadata.reflection = NmlMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Container::kLengthFieldNumber;
const int Container::kTypeFieldNumber;
const int Container::kCommandFieldNumber;
const int Container::kResponseFieldNumber;
const int Container::kRtapiMessageFieldNumber;
const int Container::kNmlFieldNumber;
const int Container::kMotionFieldNumber;
const int Container::kWouFieldNumber;
const int Container::kSyslogFieldNumber;
const int Container::kAsciiFieldNumber;
const int Container::kUnicodeFieldNumber;
const int Container::kGcodeFieldNumber;
const int Container::kPythonFieldNumber;
const int Container::kPickleFieldNumber;
const int Container::kTclFieldNumber;
const int Container::kXmlFieldNumber;
const int Container::kJsonFieldNumber;
const int Container::kJpegFieldNumber;
const int Container::kPngFieldNumber;
const int Container::kTiffFieldNumber;
const int Container::kPostscriptFieldNumber;
const int Container::kSvgFieldNumber;
const int Container::kPruFirmwareFieldNumber;
const int Container::kMesa5I20FirmwareFieldNumber;
const int Container::kTest1FieldNumber;
const int Container::kTest2FieldNumber;
const int Container::kTest3FieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Container::InitAsDefaultInstance() {
  command_ = const_cast< ::Command*>(&::Command::default_instance());
  response_ = const_cast< ::Response*>(&::Response::default_instance());
  rtapi_message_ = const_cast< ::RTAPI_Message*>(&::RTAPI_Message::default_instance());
  test1_ = const_cast< ::Test1*>(&::Test1::default_instance());
  test2_ = const_cast< ::Test2*>(&::Test2::default_instance());
  test3_ = const_cast< ::Test3*>(&::Test3::default_instance());
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Container::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  type_ = 4;
  command_ = NULL;
  response_ = NULL;
  rtapi_message_ = NULL;
  nml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  motion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wou_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syslog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ascii_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unicode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  python_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pickle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jpeg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  png_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pru_firmware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mesa_5i20_firmware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test1_ = NULL;
  test2_ = NULL;
  test3_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  SharedDtor();
}

void Container::SharedDtor() {
  if (nml_ != &::google::protobuf::internal::kEmptyString) {
    delete nml_;
  }
  if (motion_ != &::google::protobuf::internal::kEmptyString) {
    delete motion_;
  }
  if (wou_ != &::google::protobuf::internal::kEmptyString) {
    delete wou_;
  }
  if (syslog_ != &::google::protobuf::internal::kEmptyString) {
    delete syslog_;
  }
  if (ascii_ != &::google::protobuf::internal::kEmptyString) {
    delete ascii_;
  }
  if (unicode_ != &::google::protobuf::internal::kEmptyString) {
    delete unicode_;
  }
  if (gcode_ != &::google::protobuf::internal::kEmptyString) {
    delete gcode_;
  }
  if (python_ != &::google::protobuf::internal::kEmptyString) {
    delete python_;
  }
  if (pickle_ != &::google::protobuf::internal::kEmptyString) {
    delete pickle_;
  }
  if (tcl_ != &::google::protobuf::internal::kEmptyString) {
    delete tcl_;
  }
  if (xml_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_;
  }
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    delete json_;
  }
  if (jpeg_ != &::google::protobuf::internal::kEmptyString) {
    delete jpeg_;
  }
  if (png_ != &::google::protobuf::internal::kEmptyString) {
    delete png_;
  }
  if (tiff_ != &::google::protobuf::internal::kEmptyString) {
    delete tiff_;
  }
  if (postscript_ != &::google::protobuf::internal::kEmptyString) {
    delete postscript_;
  }
  if (svg_ != &::google::protobuf::internal::kEmptyString) {
    delete svg_;
  }
  if (pru_firmware_ != &::google::protobuf::internal::kEmptyString) {
    delete pru_firmware_;
  }
  if (mesa_5i20_firmware_ != &::google::protobuf::internal::kEmptyString) {
    delete mesa_5i20_firmware_;
  }
  if (this != default_instance_) {
    delete command_;
    delete response_;
    delete rtapi_message_;
    delete test1_;
    delete test2_;
    delete test3_;
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    type_ = 4;
    if (has_command()) {
      if (command_ != NULL) command_->::Command::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::Response::Clear();
    }
    if (has_rtapi_message()) {
      if (rtapi_message_ != NULL) rtapi_message_->::RTAPI_Message::Clear();
    }
    if (has_nml()) {
      if (nml_ != &::google::protobuf::internal::kEmptyString) {
        nml_->clear();
      }
    }
    if (has_motion()) {
      if (motion_ != &::google::protobuf::internal::kEmptyString) {
        motion_->clear();
      }
    }
    if (has_wou()) {
      if (wou_ != &::google::protobuf::internal::kEmptyString) {
        wou_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_syslog()) {
      if (syslog_ != &::google::protobuf::internal::kEmptyString) {
        syslog_->clear();
      }
    }
    if (has_ascii()) {
      if (ascii_ != &::google::protobuf::internal::kEmptyString) {
        ascii_->clear();
      }
    }
    if (has_unicode()) {
      if (unicode_ != &::google::protobuf::internal::kEmptyString) {
        unicode_->clear();
      }
    }
    if (has_gcode()) {
      if (gcode_ != &::google::protobuf::internal::kEmptyString) {
        gcode_->clear();
      }
    }
    if (has_python()) {
      if (python_ != &::google::protobuf::internal::kEmptyString) {
        python_->clear();
      }
    }
    if (has_pickle()) {
      if (pickle_ != &::google::protobuf::internal::kEmptyString) {
        pickle_->clear();
      }
    }
    if (has_tcl()) {
      if (tcl_ != &::google::protobuf::internal::kEmptyString) {
        tcl_->clear();
      }
    }
    if (has_xml()) {
      if (xml_ != &::google::protobuf::internal::kEmptyString) {
        xml_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::kEmptyString) {
        json_->clear();
      }
    }
    if (has_jpeg()) {
      if (jpeg_ != &::google::protobuf::internal::kEmptyString) {
        jpeg_->clear();
      }
    }
    if (has_png()) {
      if (png_ != &::google::protobuf::internal::kEmptyString) {
        png_->clear();
      }
    }
    if (has_tiff()) {
      if (tiff_ != &::google::protobuf::internal::kEmptyString) {
        tiff_->clear();
      }
    }
    if (has_postscript()) {
      if (postscript_ != &::google::protobuf::internal::kEmptyString) {
        postscript_->clear();
      }
    }
    if (has_svg()) {
      if (svg_ != &::google::protobuf::internal::kEmptyString) {
        svg_->clear();
      }
    }
    if (has_pru_firmware()) {
      if (pru_firmware_ != &::google::protobuf::internal::kEmptyString) {
        pru_firmware_->clear();
      }
    }
    if (has_mesa_5i20_firmware()) {
      if (mesa_5i20_firmware_ != &::google::protobuf::internal::kEmptyString) {
        mesa_5i20_firmware_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_test1()) {
      if (test1_ != NULL) test1_->::Test1::Clear();
    }
    if (has_test2()) {
      if (test2_ != NULL) test2_->::Test2::Clear();
    }
    if (has_test3()) {
      if (test3_ != NULL) test3_->::Test3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .MsgType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_type(static_cast< ::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional .Command command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }

      // optional .Response response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rtapi_message;
        break;
      }

      // optional .RTAPI_Message rtapi_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtapi_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtapi_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nml;
        break;
      }

      // optional bytes nml = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_motion;
        break;
      }

      // optional bytes motion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_motion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wou;
        break;
      }

      // optional bytes wou = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wou()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_syslog;
        break;
      }

      // optional bytes syslog = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syslog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_syslog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_ascii;
        break;
      }

      // optional string ascii = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ascii:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ascii()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ascii().data(), this->ascii().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_unicode;
        break;
      }

      // optional bytes unicode = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unicode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unicode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_gcode;
        break;
      }

      // optional string gcode = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gcode().data(), this->gcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_python;
        break;
      }

      // optional string python = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_python:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_python()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->python().data(), this->python().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_pickle;
        break;
      }

      // optional bytes pickle = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pickle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pickle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_tcl;
        break;
      }

      // optional string tcl = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tcl().data(), this->tcl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_xml;
        break;
      }

      // optional string xml = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xml().data(), this->xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_json;
        break;
      }

      // optional string json = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_jpeg;
        break;
      }

      // optional bytes jpeg = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpeg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpeg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_png;
        break;
      }

      // optional bytes png = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_png:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_png()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_tiff;
        break;
      }

      // optional bytes tiff = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tiff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_postscript;
        break;
      }

      // optional bytes postscript = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postscript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_postscript()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(898)) goto parse_svg;
        break;
      }

      // optional bytes svg = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16386)) goto parse_pru_firmware;
        break;
      }

      // optional bytes pru_firmware = 2048;
      case 2048: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pru_firmware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pru_firmware()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24002)) goto parse_mesa_5i20_firmware;
        break;
      }

      // optional bytes mesa_5i20_firmware = 3000;
      case 3000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesa_5i20_firmware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mesa_5i20_firmware()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40010)) goto parse_test1;
        break;
      }

      // optional .Test1 test1 = 5001;
      case 5001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40018)) goto parse_test2;
        break;
      }

      // optional .Test2 test2 = 5002;
      case 5002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40026)) goto parse_test3;
        break;
      }

      // optional .Test3 test3 = 5003;
      case 5003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->length(), output);
  }

  // required .MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .Command command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->command(), output);
  }

  // optional .Response response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->response(), output);
  }

  // optional .RTAPI_Message rtapi_message = 6;
  if (has_rtapi_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rtapi_message(), output);
  }

  // optional bytes nml = 7;
  if (has_nml()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->nml(), output);
  }

  // optional bytes motion = 8;
  if (has_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->motion(), output);
  }

  // optional bytes wou = 9;
  if (has_wou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->wou(), output);
  }

  // optional bytes syslog = 10;
  if (has_syslog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->syslog(), output);
  }

  // optional string ascii = 100;
  if (has_ascii()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ascii().data(), this->ascii().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->ascii(), output);
  }

  // optional bytes unicode = 101;
  if (has_unicode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      101, this->unicode(), output);
  }

  // optional string gcode = 102;
  if (has_gcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcode().data(), this->gcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->gcode(), output);
  }

  // optional string python = 103;
  if (has_python()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->python().data(), this->python().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->python(), output);
  }

  // optional bytes pickle = 104;
  if (has_pickle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      104, this->pickle(), output);
  }

  // optional string tcl = 105;
  if (has_tcl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcl().data(), this->tcl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      105, this->tcl(), output);
  }

  // optional string xml = 106;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      106, this->xml(), output);
  }

  // optional string json = 107;
  if (has_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      107, this->json(), output);
  }

  // optional bytes jpeg = 108;
  if (has_jpeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      108, this->jpeg(), output);
  }

  // optional bytes png = 109;
  if (has_png()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      109, this->png(), output);
  }

  // optional bytes tiff = 110;
  if (has_tiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      110, this->tiff(), output);
  }

  // optional bytes postscript = 111;
  if (has_postscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      111, this->postscript(), output);
  }

  // optional bytes svg = 112;
  if (has_svg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      112, this->svg(), output);
  }

  // optional bytes pru_firmware = 2048;
  if (has_pru_firmware()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2048, this->pru_firmware(), output);
  }

  // optional bytes mesa_5i20_firmware = 3000;
  if (has_mesa_5i20_firmware()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3000, this->mesa_5i20_firmware(), output);
  }

  // optional .Test1 test1 = 5001;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5001, this->test1(), output);
  }

  // optional .Test2 test2 = 5002;
  if (has_test2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5002, this->test2(), output);
  }

  // optional .Test3 test3 = 5003;
  if (has_test3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5003, this->test3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->length(), target);
  }

  // required .MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .Command command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->command(), target);
  }

  // optional .Response response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->response(), target);
  }

  // optional .RTAPI_Message rtapi_message = 6;
  if (has_rtapi_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rtapi_message(), target);
  }

  // optional bytes nml = 7;
  if (has_nml()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->nml(), target);
  }

  // optional bytes motion = 8;
  if (has_motion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->motion(), target);
  }

  // optional bytes wou = 9;
  if (has_wou()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->wou(), target);
  }

  // optional bytes syslog = 10;
  if (has_syslog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->syslog(), target);
  }

  // optional string ascii = 100;
  if (has_ascii()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ascii().data(), this->ascii().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->ascii(), target);
  }

  // optional bytes unicode = 101;
  if (has_unicode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        101, this->unicode(), target);
  }

  // optional string gcode = 102;
  if (has_gcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcode().data(), this->gcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->gcode(), target);
  }

  // optional string python = 103;
  if (has_python()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->python().data(), this->python().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->python(), target);
  }

  // optional bytes pickle = 104;
  if (has_pickle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        104, this->pickle(), target);
  }

  // optional string tcl = 105;
  if (has_tcl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcl().data(), this->tcl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        105, this->tcl(), target);
  }

  // optional string xml = 106;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        106, this->xml(), target);
  }

  // optional string json = 107;
  if (has_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        107, this->json(), target);
  }

  // optional bytes jpeg = 108;
  if (has_jpeg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        108, this->jpeg(), target);
  }

  // optional bytes png = 109;
  if (has_png()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        109, this->png(), target);
  }

  // optional bytes tiff = 110;
  if (has_tiff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        110, this->tiff(), target);
  }

  // optional bytes postscript = 111;
  if (has_postscript()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        111, this->postscript(), target);
  }

  // optional bytes svg = 112;
  if (has_svg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        112, this->svg(), target);
  }

  // optional bytes pru_firmware = 2048;
  if (has_pru_firmware()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2048, this->pru_firmware(), target);
  }

  // optional bytes mesa_5i20_firmware = 3000;
  if (has_mesa_5i20_firmware()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3000, this->mesa_5i20_firmware(), target);
  }

  // optional .Test1 test1 = 5001;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5001, this->test1(), target);
  }

  // optional .Test2 test2 = 5002;
  if (has_test2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5002, this->test2(), target);
  }

  // optional .Test3 test3 = 5003;
  if (has_test3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5003, this->test3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 length = 1;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // required .MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Command command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .Response response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .RTAPI_Message rtapi_message = 6;
    if (has_rtapi_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtapi_message());
    }

    // optional bytes nml = 7;
    if (has_nml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nml());
    }

    // optional bytes motion = 8;
    if (has_motion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->motion());
    }

    // optional bytes wou = 9;
    if (has_wou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wou());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes syslog = 10;
    if (has_syslog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->syslog());
    }

    // optional string ascii = 100;
    if (has_ascii()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ascii());
    }

    // optional bytes unicode = 101;
    if (has_unicode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unicode());
    }

    // optional string gcode = 102;
    if (has_gcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcode());
    }

    // optional string python = 103;
    if (has_python()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->python());
    }

    // optional bytes pickle = 104;
    if (has_pickle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pickle());
    }

    // optional string tcl = 105;
    if (has_tcl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcl());
    }

    // optional string xml = 106;
    if (has_xml()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string json = 107;
    if (has_json()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json());
    }

    // optional bytes jpeg = 108;
    if (has_jpeg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jpeg());
    }

    // optional bytes png = 109;
    if (has_png()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->png());
    }

    // optional bytes tiff = 110;
    if (has_tiff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tiff());
    }

    // optional bytes postscript = 111;
    if (has_postscript()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->postscript());
    }

    // optional bytes svg = 112;
    if (has_svg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svg());
    }

    // optional bytes pru_firmware = 2048;
    if (has_pru_firmware()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pru_firmware());
    }

    // optional bytes mesa_5i20_firmware = 3000;
    if (has_mesa_5i20_firmware()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mesa_5i20_firmware());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Test1 test1 = 5001;
    if (has_test1()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test1());
    }

    // optional .Test2 test2 = 5002;
    if (has_test2()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test2());
    }

    // optional .Test3 test3 = 5003;
    if (has_test3()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_command()) {
      mutable_command()->::Command::MergeFrom(from.command());
    }
    if (from.has_response()) {
      mutable_response()->::Response::MergeFrom(from.response());
    }
    if (from.has_rtapi_message()) {
      mutable_rtapi_message()->::RTAPI_Message::MergeFrom(from.rtapi_message());
    }
    if (from.has_nml()) {
      set_nml(from.nml());
    }
    if (from.has_motion()) {
      set_motion(from.motion());
    }
    if (from.has_wou()) {
      set_wou(from.wou());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_syslog()) {
      set_syslog(from.syslog());
    }
    if (from.has_ascii()) {
      set_ascii(from.ascii());
    }
    if (from.has_unicode()) {
      set_unicode(from.unicode());
    }
    if (from.has_gcode()) {
      set_gcode(from.gcode());
    }
    if (from.has_python()) {
      set_python(from.python());
    }
    if (from.has_pickle()) {
      set_pickle(from.pickle());
    }
    if (from.has_tcl()) {
      set_tcl(from.tcl());
    }
    if (from.has_xml()) {
      set_xml(from.xml());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_json()) {
      set_json(from.json());
    }
    if (from.has_jpeg()) {
      set_jpeg(from.jpeg());
    }
    if (from.has_png()) {
      set_png(from.png());
    }
    if (from.has_tiff()) {
      set_tiff(from.tiff());
    }
    if (from.has_postscript()) {
      set_postscript(from.postscript());
    }
    if (from.has_svg()) {
      set_svg(from.svg());
    }
    if (from.has_pru_firmware()) {
      set_pru_firmware(from.pru_firmware());
    }
    if (from.has_mesa_5i20_firmware()) {
      set_mesa_5i20_firmware(from.mesa_5i20_firmware());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_test1()) {
      mutable_test1()->::Test1::MergeFrom(from.test1());
    }
    if (from.has_test2()) {
      mutable_test2()->::Test2::MergeFrom(from.test2());
    }
    if (from.has_test3()) {
      mutable_test3()->::Test3::MergeFrom(from.test3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  if (has_rtapi_message()) {
    if (!this->rtapi_message().IsInitialized()) return false;
  }
  return true;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(type_, other->type_);
    std::swap(command_, other->command_);
    std::swap(response_, other->response_);
    std::swap(rtapi_message_, other->rtapi_message_);
    std::swap(nml_, other->nml_);
    std::swap(motion_, other->motion_);
    std::swap(wou_, other->wou_);
    std::swap(syslog_, other->syslog_);
    std::swap(ascii_, other->ascii_);
    std::swap(unicode_, other->unicode_);
    std::swap(gcode_, other->gcode_);
    std::swap(python_, other->python_);
    std::swap(pickle_, other->pickle_);
    std::swap(tcl_, other->tcl_);
    std::swap(xml_, other->xml_);
    std::swap(json_, other->json_);
    std::swap(jpeg_, other->jpeg_);
    std::swap(png_, other->png_);
    std::swap(tiff_, other->tiff_);
    std::swap(postscript_, other->postscript_);
    std::swap(svg_, other->svg_);
    std::swap(pru_firmware_, other->pru_firmware_);
    std::swap(mesa_5i20_firmware_, other->mesa_5i20_firmware_);
    std::swap(test1_, other->test1_);
    std::swap(test2_, other->test2_);
    std::swap(test3_, other->test3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
