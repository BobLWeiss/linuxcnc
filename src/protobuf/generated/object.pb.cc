// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Originator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Originator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* Thread_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Thread_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ring_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  Instance_descriptor_ = file->message_type(0);
  static const int Instance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, id_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
  Originator_descriptor_ = file->message_type(1);
  static const int Originator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, instance_),
  };
  Originator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Originator_descriptor_,
      Originator::default_instance_,
      Originator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Originator));
  Pin_descriptor_ = file->message_type(2);
  static const int Pin_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, flags_),
  };
  Pin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pin_descriptor_,
      Pin::default_instance_,
      Pin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pin));
  Signal_descriptor_ = file->message_type(3);
  static const int Signal_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, readers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, writers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, bidirs_),
  };
  Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signal));
  Param_descriptor_ = file->message_type(4);
  static const int Param_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, pdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, maytime_),
  };
  Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Param_descriptor_,
      Param::default_instance_,
      Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Param));
  Function_descriptor_ = file->message_type(5);
  static const int Function_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, handle_),
  };
  Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function));
  Thread_descriptor_ = file->message_type(6);
  static const int Thread_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, uses_fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, prioritiy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, cpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, functions_),
  };
  Thread_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Thread_descriptor_,
      Thread::default_instance_,
      Thread_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Thread));
  Component_descriptor_ = file->message_type(7);
  static const int Component_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_unbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, args_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
  Ring_descriptor_ = file->message_type(8);
  static const int Ring_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, wmutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, rmutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, rtapi_shm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, reader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, writer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, scratchpad_),
  };
  Ring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ring_descriptor_,
      Ring::default_instance_,
      Ring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ring));
  Member_descriptor_ = file->message_type(9);
  static const int Member_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, userarg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, halu32_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
  Group_descriptor_ = file->message_type(10);
  static const int Group_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, userarg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, userarg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, member_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  Object_descriptor_ = file->message_type(11);
  static const int Object_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, function_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Originator_descriptor_, &Originator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pin_descriptor_, &Pin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Param_descriptor_, &Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Thread_descriptor_, &Thread::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ring_descriptor_, &Ring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete Instance::default_instance_;
  delete Instance_reflection_;
  delete Originator::default_instance_;
  delete Originator_reflection_;
  delete Pin::default_instance_;
  delete Pin_reflection_;
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete Param::default_instance_;
  delete Param_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete Thread::default_instance_;
  delete Thread_reflection_;
  delete Component::default_instance_;
  delete Component_reflection_;
  delete Ring::default_instance_;
  delete Ring_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::protobuf_AddDesc_types_2eproto();
  ::protobuf_AddDesc_value_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\032\014nanopb.proto\032\013types.prot"
    "o\032\013value.proto\"+\n\010Instance\022\023\n\004name\030\036 \001(\t"
    "B\005\222\?\002\010)\022\n\n\002id\030( \001(\021\"\206\001\n\nOriginator\022\033\n\006or"
    "igin\030\n \001(\0162\013.OriginType\022\035\n\006detail\030\024 \001(\0162"
    "\r.OriginDetail\022\023\n\004name\030\036 \001(\tB\005\222\?\002\010)\022\n\n\002i"
    "d\030( \001(\021\022\033\n\010instance\0302 \001(\0132\t.Instance\"\336\001\n"
    "\003Pin\022\031\n\004type\030\n \001(\0162\013.ScalarType\022\023\n\004name\030"
    "\024 \001(\tB\005\222\?\002\010)\022\016\n\006handle\030\031 \001(\r\022\016\n\006halbit\030d"
    " \001(\010\022\020\n\010halfloat\030e \001(\001\022\016\n\006hals32\030f \001(\021\022\016"
    "\n\006halu32\030g \001(\r\022\r\n\005owner\030( \001(\021\022\016\n\006linked\030"
    "2 \001(\010\022\026\n\007oldname\030< \001(\tB\005\222\?\002\010)\022\017\n\007epsilon"
    "\030P \001(\001\022\r\n\005flags\030Z \001(\r\"\274\001\n\006Signal\022\031\n\004type"
    "\030\n \001(\0162\013.ScalarType\022\023\n\004name\030\024 \001(\tB\005\222\?\002\010)"
    "\022\016\n\006handle\030\031 \001(\r\022\016\n\006halbit\030d \001(\010\022\020\n\010half"
    "loat\030e \001(\001\022\016\n\006hals32\030f \001(\021\022\016\n\006halu32\030g \001"
    "(\r\022\017\n\007readers\0302 \001(\r\022\017\n\007writers\030< \001(\r\022\016\n\006"
    "bidirs\030F \001(\r\"\364\001\n\005Param\022\031\n\004type\030\n \001(\0162\013.S"
    "calarType\022\023\n\004name\030\024 \001(\tB\005\222\?\002\010)\022\016\n\006handle"
    "\030\031 \001(\r\022\016\n\006halbit\030d \001(\010\022\020\n\010halfloat\030e \001(\001"
    "\022\016\n\006hals32\030f \001(\021\022\016\n\006halu32\030g \001(\r\022 \n\004pdir"
    "\0302 \001(\0162\022.HalParamDirection\022\026\n\007oldname\030< "
    "\001(\tB\005\222\?\002\010)\022\r\n\005owner\030F \001(\021\022\017\n\007runtime\030P \001"
    "(\021\022\017\n\007maytime\030Z \001(\021\"/\n\010Function\022\023\n\004name\030"
    "\024 \001(\tB\005\222\?\002\010)\022\016\n\006handle\030\031 \001(\r\"\247\001\n\006Thread\022"
    "\023\n\004name\030\024 \001(\tB\005\222\?\002\010)\022\016\n\006handle\030\031 \001(\r\022\017\n\007"
    "uses_fp\030\036 \001(\010\022\016\n\006period\030( \001(\r\022\021\n\tpriorit"
    "iy\0302 \001(\021\022\017\n\007task_id\030< \001(\r\022\016\n\006cpu_id\030F \001("
    "\r\022#\n\tfunctions\030P \003(\0132\t.FunctionB\005\222\?\002\020d\"\304"
    "\001\n\tComponent\022\023\n\004name\030\024 \001(\tB\005\222\?\002\010)\022\016\n\006han"
    "dle\030\031 \001(\r\022\017\n\007comp_id\030\036 \001(\021\022\014\n\004type\030( \001(\r"
    "\022\r\n\005state\0302 \001(\r\022\023\n\013last_update\030< \001(\r\022\022\n\n"
    "last_bound\030F \001(\r\022\024\n\014last_unbound\030P \001(\r\022\013"
    "\n\003pid\030Z \001(\r\022\030\n\004args\030d \003(\tB\n\222\?\002\020\024\222\?\002\010)\"\277\001"
    "\n\004Ring\022\023\n\004name\030\024 \001(\tB\005\222\?\002\010)\022\016\n\006handle\030\031 "
    "\001(\r\022\r\n\005owner\030( \001(\021\022\016\n\006stream\0302 \001(\010\022\016\n\006wm"
    "utex\030< \001(\010\022\016\n\006rmutex\030F \001(\010\022\021\n\trtapi_shm\030"
    "P \001(\010\022\016\n\006reader\030Z \001(\021\022\016\n\006writer\030d \001(\021\022\014\n"
    "\004size\030n \001(\021\022\022\n\nscratchpad\030x \001(\021\"\255\001\n\006Memb"
    "er\022\031\n\004type\030\n \001(\0162\013.ObjectType\022\023\n\004name\030\024 "
    "\001(\tB\005\222\?\002\010)\022\016\n\006handle\030\031 \001(\r\022\020\n\010userarg1\030\036"
    " \001(\021\022\017\n\007epsilon\030( \001(\001\022\016\n\006halbit\030d \001(\010\022\020\n"
    "\010halfloat\030e \001(\001\022\016\n\006hals32\030f \001(\021\022\016\n\006halu3"
    "2\030g \001(\r\"\205\001\n\005Group\022\023\n\004name\030\024 \001(\tB\005\222\?\002\010)\022\016"
    "\n\006handle\030\031 \001(\r\022\n\n\002id\030\036 \001(\021\022\020\n\010userarg1\0302"
    " \001(\021\022\020\n\010userarg2\030< \001(\021\022\016\n\006serial\030F \001(\021\022\027"
    "\n\006member\030P \003(\0132\007.Member\"\322\002\n\006Object\022\031\n\004ty"
    "pe\030\n \002(\0162\013.ObjectType\022\025\n\005value\030\024 \001(\0132\006.V"
    "alue\022\033\n\006origin\030\036 \001(\0132\013.Originator\022\033\n\010ins"
    "tance\030( \001(\0132\t.Instance\022\021\n\003pin\030d \001(\0132\004.Pi"
    "n\022\027\n\006signal\030n \001(\0132\007.Signal\022\025\n\005param\030x \001("
    "\0132\006.Param\022\030\n\006thread\030\202\001 \001(\0132\007.Thread\022\031\n\004c"
    "omp\030\214\001 \001(\0132\n.Component\022\024\n\004ring\030\226\001 \001(\0132\005."
    "Ring\022\026\n\005group\030\240\001 \001(\0132\006.Group\022\030\n\006member\030\252"
    "\001 \001(\0132\007.Member\022\034\n\010function\030\264\001 \001(\0132\t.Func"
    "tion", 2164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  Instance::default_instance_ = new Instance();
  Originator::default_instance_ = new Originator();
  Pin::default_instance_ = new Pin();
  Signal::default_instance_ = new Signal();
  Param::default_instance_ = new Param();
  Function::default_instance_ = new Function();
  Thread::default_instance_ = new Thread();
  Component::default_instance_ = new Component();
  Ring::default_instance_ = new Ring();
  Member::default_instance_ = new Member();
  Group::default_instance_ = new Group();
  Object::default_instance_ = new Object();
  Instance::default_instance_->InitAsDefaultInstance();
  Originator::default_instance_->InitAsDefaultInstance();
  Pin::default_instance_->InitAsDefaultInstance();
  Signal::default_instance_->InitAsDefaultInstance();
  Param::default_instance_->InitAsDefaultInstance();
  Function::default_instance_->InitAsDefaultInstance();
  Thread::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  Ring::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Instance::kNameFieldNumber;
const int Instance::kIdFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instance::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  SharedDtor();
}

void Instance::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_id;
        break;
      }

      // optional sint32 id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->name(), output);
  }

  // optional sint32 id = 40;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->name(), target);
  }

  // optional sint32 id = 40;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 30;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 id = 40;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Originator::kOriginFieldNumber;
const int Originator::kDetailFieldNumber;
const int Originator::kNameFieldNumber;
const int Originator::kIdFieldNumber;
const int Originator::kInstanceFieldNumber;
#endif  // !_MSC_VER

Originator::Originator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Originator::InitAsDefaultInstance() {
  instance_ = const_cast< ::Instance*>(&::Instance::default_instance());
}

Originator::Originator(const Originator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Originator::SharedCtor() {
  _cached_size_ = 0;
  origin_ = 10;
  detail_ = 10;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  instance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Originator::~Originator() {
  SharedDtor();
}

void Originator::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete instance_;
  }
}

void Originator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Originator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Originator_descriptor_;
}

const Originator& Originator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Originator* Originator::default_instance_ = NULL;

Originator* Originator::New() const {
  return new Originator;
}

void Originator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    origin_ = 10;
    detail_ = 10;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    if (has_instance()) {
      if (instance_ != NULL) instance_->::Instance::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Originator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OriginType origin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OriginType_IsValid(value)) {
            set_origin(static_cast< ::OriginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_detail;
        break;
      }

      // optional .OriginDetail detail = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detail:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OriginDetail_IsValid(value)) {
            set_detail(static_cast< ::OriginDetail >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_name;
        break;
      }

      // optional string name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_id;
        break;
      }

      // optional sint32 id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_instance;
        break;
      }

      // optional .Instance instance = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Originator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OriginType origin = 10;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->origin(), output);
  }

  // optional .OriginDetail detail = 20;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->detail(), output);
  }

  // optional string name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->name(), output);
  }

  // optional sint32 id = 40;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->id(), output);
  }

  // optional .Instance instance = 50;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Originator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OriginType origin = 10;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->origin(), target);
  }

  // optional .OriginDetail detail = 20;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->detail(), target);
  }

  // optional string name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->name(), target);
  }

  // optional sint32 id = 40;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->id(), target);
  }

  // optional .Instance instance = 50;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Originator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OriginType origin = 10;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
    }

    // optional .OriginDetail detail = 20;
    if (has_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detail());
    }

    // optional string name = 30;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 id = 40;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional .Instance instance = 50;
    if (has_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Originator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Originator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Originator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Originator::MergeFrom(const Originator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_instance()) {
      mutable_instance()->::Instance::MergeFrom(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Originator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Originator::CopyFrom(const Originator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Originator::IsInitialized() const {

  return true;
}

void Originator::Swap(Originator* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(detail_, other->detail_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Originator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Originator_descriptor_;
  metadata.reflection = Originator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pin::kTypeFieldNumber;
const int Pin::kNameFieldNumber;
const int Pin::kHandleFieldNumber;
const int Pin::kHalbitFieldNumber;
const int Pin::kHalfloatFieldNumber;
const int Pin::kHals32FieldNumber;
const int Pin::kHalu32FieldNumber;
const int Pin::kOwnerFieldNumber;
const int Pin::kLinkedFieldNumber;
const int Pin::kOldnameFieldNumber;
const int Pin::kEpsilonFieldNumber;
const int Pin::kFlagsFieldNumber;
#endif  // !_MSC_VER

Pin::Pin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pin::InitAsDefaultInstance() {
}

Pin::Pin(const Pin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pin::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  owner_ = 0;
  linked_ = false;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  epsilon_ = 0;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pin::~Pin() {
  SharedDtor();
}

void Pin::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (this != default_instance_) {
  }
}

void Pin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pin_descriptor_;
}

const Pin& Pin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Pin* Pin::default_instance_ = NULL;

Pin* Pin::New() const {
  return new Pin;
}

void Pin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    halbit_ = false;
    halfloat_ = 0;
    hals32_ = 0;
    halu32_ = 0u;
    owner_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    linked_ = false;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    epsilon_ = 0;
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScalarType type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScalarType_IsValid(value)) {
            set_type(static_cast< ::ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }

      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_owner;
        break;
      }

      // optional sint32 owner = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_linked;
        break;
      }

      // optional bool linked = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_oldname;
        break;
      }

      // optional string oldname = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(641)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(809)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_hals32;
        break;
      }

      // optional sint32 hals32 = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_halu32;
        break;
      }

      // optional uint32 halu32 = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional sint32 owner = 40;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->owner(), output);
  }

  // optional bool linked = 50;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->linked(), output);
  }

  // optional string oldname = 60;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->oldname(), output);
  }

  // optional double epsilon = 80;
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(80, this->epsilon(), output);
  }

  // optional uint32 flags = 90;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->flags(), output);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->halbit(), output);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->halfloat(), output);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(102, this->hals32(), output);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->halu32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional sint32 owner = 40;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->owner(), target);
  }

  // optional bool linked = 50;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->linked(), target);
  }

  // optional string oldname = 60;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->oldname(), target);
  }

  // optional double epsilon = 80;
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(80, this->epsilon(), target);
  }

  // optional uint32 flags = 90;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->flags(), target);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->halbit(), target);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->halfloat(), target);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(102, this->hals32(), target);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->halu32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScalarType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional bool halbit = 100;
    if (has_halbit()) {
      total_size += 2 + 1;
    }

    // optional double halfloat = 101;
    if (has_halfloat()) {
      total_size += 2 + 8;
    }

    // optional sint32 hals32 = 102;
    if (has_hals32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hals32());
    }

    // optional uint32 halu32 = 103;
    if (has_halu32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halu32());
    }

    // optional sint32 owner = 40;
    if (has_owner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->owner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool linked = 50;
    if (has_linked()) {
      total_size += 2 + 1;
    }

    // optional string oldname = 60;
    if (has_oldname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional double epsilon = 80;
    if (has_epsilon()) {
      total_size += 2 + 8;
    }

    // optional uint32 flags = 90;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pin::MergeFrom(const Pin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linked()) {
      set_linked(from.linked());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pin::CopyFrom(const Pin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pin::IsInitialized() const {

  return true;
}

void Pin::Swap(Pin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(owner_, other->owner_);
    std::swap(linked_, other->linked_);
    std::swap(oldname_, other->oldname_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pin_descriptor_;
  metadata.reflection = Pin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Signal::kTypeFieldNumber;
const int Signal::kNameFieldNumber;
const int Signal::kHandleFieldNumber;
const int Signal::kHalbitFieldNumber;
const int Signal::kHalfloatFieldNumber;
const int Signal::kHals32FieldNumber;
const int Signal::kHalu32FieldNumber;
const int Signal::kReadersFieldNumber;
const int Signal::kWritersFieldNumber;
const int Signal::kBidirsFieldNumber;
#endif  // !_MSC_VER

Signal::Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signal::InitAsDefaultInstance() {
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  readers_ = 0u;
  writers_ = 0u;
  bidirs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  SharedDtor();
}

void Signal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New() const {
  return new Signal;
}

void Signal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    halbit_ = false;
    halfloat_ = 0;
    hals32_ = 0;
    halu32_ = 0u;
    readers_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    writers_ = 0u;
    bidirs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScalarType type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScalarType_IsValid(value)) {
            set_type(static_cast< ::ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }

      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_readers;
        break;
      }

      // optional uint32 readers = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readers_)));
          set_has_readers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_writers;
        break;
      }

      // optional uint32 writers = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writers_)));
          set_has_writers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_bidirs;
        break;
      }

      // optional uint32 bidirs = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidirs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bidirs_)));
          set_has_bidirs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(809)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_hals32;
        break;
      }

      // optional sint32 hals32 = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_halu32;
        break;
      }

      // optional uint32 halu32 = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional uint32 readers = 50;
  if (has_readers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->readers(), output);
  }

  // optional uint32 writers = 60;
  if (has_writers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->writers(), output);
  }

  // optional uint32 bidirs = 70;
  if (has_bidirs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->bidirs(), output);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->halbit(), output);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->halfloat(), output);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(102, this->hals32(), output);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->halu32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional uint32 readers = 50;
  if (has_readers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->readers(), target);
  }

  // optional uint32 writers = 60;
  if (has_writers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->writers(), target);
  }

  // optional uint32 bidirs = 70;
  if (has_bidirs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->bidirs(), target);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->halbit(), target);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->halfloat(), target);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(102, this->hals32(), target);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->halu32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScalarType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional bool halbit = 100;
    if (has_halbit()) {
      total_size += 2 + 1;
    }

    // optional double halfloat = 101;
    if (has_halfloat()) {
      total_size += 2 + 8;
    }

    // optional sint32 hals32 = 102;
    if (has_hals32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hals32());
    }

    // optional uint32 halu32 = 103;
    if (has_halu32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halu32());
    }

    // optional uint32 readers = 50;
    if (has_readers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readers());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 writers = 60;
    if (has_writers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writers());
    }

    // optional uint32 bidirs = 70;
    if (has_bidirs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bidirs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_readers()) {
      set_readers(from.readers());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writers()) {
      set_writers(from.writers());
    }
    if (from.has_bidirs()) {
      set_bidirs(from.bidirs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {

  return true;
}

void Signal::Swap(Signal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(readers_, other->readers_);
    std::swap(writers_, other->writers_);
    std::swap(bidirs_, other->bidirs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Param::kTypeFieldNumber;
const int Param::kNameFieldNumber;
const int Param::kHandleFieldNumber;
const int Param::kHalbitFieldNumber;
const int Param::kHalfloatFieldNumber;
const int Param::kHals32FieldNumber;
const int Param::kHalu32FieldNumber;
const int Param::kPdirFieldNumber;
const int Param::kOldnameFieldNumber;
const int Param::kOwnerFieldNumber;
const int Param::kRuntimeFieldNumber;
const int Param::kMaytimeFieldNumber;
#endif  // !_MSC_VER

Param::Param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Param::InitAsDefaultInstance() {
}

Param::Param(const Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Param::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  pdir_ = 64;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_ = 0;
  runtime_ = 0;
  maytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Param::~Param() {
  SharedDtor();
}

void Param::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (this != default_instance_) {
  }
}

void Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Param_descriptor_;
}

const Param& Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Param* Param::default_instance_ = NULL;

Param* Param::New() const {
  return new Param;
}

void Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    halbit_ = false;
    halfloat_ = 0;
    hals32_ = 0;
    halu32_ = 0u;
    pdir_ = 64;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    owner_ = 0;
    runtime_ = 0;
    maytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScalarType type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScalarType_IsValid(value)) {
            set_type(static_cast< ::ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }

      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_pdir;
        break;
      }

      // optional .HalParamDirection pdir = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HalParamDirection_IsValid(value)) {
            set_pdir(static_cast< ::HalParamDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_oldname;
        break;
      }

      // optional string oldname = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_owner;
        break;
      }

      // optional sint32 owner = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_runtime;
        break;
      }

      // optional sint32 runtime = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &runtime_)));
          set_has_runtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_maytime;
        break;
      }

      // optional sint32 maytime = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maytime_)));
          set_has_maytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(809)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_hals32;
        break;
      }

      // optional sint32 hals32 = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_halu32;
        break;
      }

      // optional uint32 halu32 = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional .HalParamDirection pdir = 50;
  if (has_pdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->pdir(), output);
  }

  // optional string oldname = 60;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->oldname(), output);
  }

  // optional sint32 owner = 70;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(70, this->owner(), output);
  }

  // optional sint32 runtime = 80;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(80, this->runtime(), output);
  }

  // optional sint32 maytime = 90;
  if (has_maytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(90, this->maytime(), output);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->halbit(), output);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->halfloat(), output);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(102, this->hals32(), output);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->halu32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScalarType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional .HalParamDirection pdir = 50;
  if (has_pdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->pdir(), target);
  }

  // optional string oldname = 60;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->oldname(), target);
  }

  // optional sint32 owner = 70;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(70, this->owner(), target);
  }

  // optional sint32 runtime = 80;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(80, this->runtime(), target);
  }

  // optional sint32 maytime = 90;
  if (has_maytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(90, this->maytime(), target);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->halbit(), target);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->halfloat(), target);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(102, this->hals32(), target);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->halu32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScalarType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional bool halbit = 100;
    if (has_halbit()) {
      total_size += 2 + 1;
    }

    // optional double halfloat = 101;
    if (has_halfloat()) {
      total_size += 2 + 8;
    }

    // optional sint32 hals32 = 102;
    if (has_hals32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hals32());
    }

    // optional uint32 halu32 = 103;
    if (has_halu32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halu32());
    }

    // optional .HalParamDirection pdir = 50;
    if (has_pdir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pdir());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string oldname = 60;
    if (has_oldname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional sint32 owner = 70;
    if (has_owner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->owner());
    }

    // optional sint32 runtime = 80;
    if (has_runtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->runtime());
    }

    // optional sint32 maytime = 90;
    if (has_maytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_pdir()) {
      set_pdir(from.pdir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_runtime()) {
      set_runtime(from.runtime());
    }
    if (from.has_maytime()) {
      set_maytime(from.maytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {

  return true;
}

void Param::Swap(Param* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(pdir_, other->pdir_);
    std::swap(oldname_, other->oldname_);
    std::swap(owner_, other->owner_);
    std::swap(runtime_, other->runtime_);
    std::swap(maytime_, other->maytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Param_descriptor_;
  metadata.reflection = Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Function::kNameFieldNumber;
const int Function::kHandleFieldNumber;
#endif  // !_MSC_VER

Function::Function()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Function::InitAsDefaultInstance() {
}

Function::Function(const Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Function::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function::~Function() {
  SharedDtor();
}

void Function::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New() const {
  return new Function;
}

void Function::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Function::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {

  return true;
}

void Function::Swap(Function* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Thread::kNameFieldNumber;
const int Thread::kHandleFieldNumber;
const int Thread::kUsesFpFieldNumber;
const int Thread::kPeriodFieldNumber;
const int Thread::kPrioritiyFieldNumber;
const int Thread::kTaskIdFieldNumber;
const int Thread::kCpuIdFieldNumber;
const int Thread::kFunctionsFieldNumber;
#endif  // !_MSC_VER

Thread::Thread()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Thread::InitAsDefaultInstance() {
}

Thread::Thread(const Thread& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Thread::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  uses_fp_ = false;
  period_ = 0u;
  prioritiy_ = 0;
  task_id_ = 0u;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Thread::~Thread() {
  SharedDtor();
}

void Thread::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Thread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thread::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Thread_descriptor_;
}

const Thread& Thread::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Thread* Thread::default_instance_ = NULL;

Thread* Thread::New() const {
  return new Thread;
}

void Thread::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    uses_fp_ = false;
    period_ = 0u;
    prioritiy_ = 0;
    task_id_ = 0u;
    cpu_id_ = 0u;
  }
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Thread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_uses_fp;
        break;
      }

      // optional bool uses_fp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uses_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uses_fp_)));
          set_has_uses_fp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_period;
        break;
      }

      // optional uint32 period = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_prioritiy;
        break;
      }

      // optional sint32 prioritiy = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prioritiy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prioritiy_)));
          set_has_prioritiy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_cpu_id;
        break;
      }

      // optional uint32 cpu_id = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_functions;
        break;
      }

      // repeated .Function functions = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_functions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Thread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional bool uses_fp = 30;
  if (has_uses_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->uses_fp(), output);
  }

  // optional uint32 period = 40;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->period(), output);
  }

  // optional sint32 prioritiy = 50;
  if (has_prioritiy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(50, this->prioritiy(), output);
  }

  // optional uint32 task_id = 60;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->task_id(), output);
  }

  // optional uint32 cpu_id = 70;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->cpu_id(), output);
  }

  // repeated .Function functions = 80;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->functions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Thread::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional bool uses_fp = 30;
  if (has_uses_fp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->uses_fp(), target);
  }

  // optional uint32 period = 40;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->period(), target);
  }

  // optional sint32 prioritiy = 50;
  if (has_prioritiy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(50, this->prioritiy(), target);
  }

  // optional uint32 task_id = 60;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->task_id(), target);
  }

  // optional uint32 cpu_id = 70;
  if (has_cpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->cpu_id(), target);
  }

  // repeated .Function functions = 80;
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->functions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Thread::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional bool uses_fp = 30;
    if (has_uses_fp()) {
      total_size += 2 + 1;
    }

    // optional uint32 period = 40;
    if (has_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }

    // optional sint32 prioritiy = 50;
    if (has_prioritiy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prioritiy());
    }

    // optional uint32 task_id = 60;
    if (has_task_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 cpu_id = 70;
    if (has_cpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  // repeated .Function functions = 80;
  total_size += 2 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thread::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Thread* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Thread*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Thread::MergeFrom(const Thread& from) {
  GOOGLE_CHECK_NE(&from, this);
  functions_.MergeFrom(from.functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_uses_fp()) {
      set_uses_fp(from.uses_fp());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_prioritiy()) {
      set_prioritiy(from.prioritiy());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Thread::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thread::CopyFrom(const Thread& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thread::IsInitialized() const {

  return true;
}

void Thread::Swap(Thread* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(uses_fp_, other->uses_fp_);
    std::swap(period_, other->period_);
    std::swap(prioritiy_, other->prioritiy_);
    std::swap(task_id_, other->task_id_);
    std::swap(cpu_id_, other->cpu_id_);
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Thread::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Thread_descriptor_;
  metadata.reflection = Thread_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Component::kNameFieldNumber;
const int Component::kHandleFieldNumber;
const int Component::kCompIdFieldNumber;
const int Component::kTypeFieldNumber;
const int Component::kStateFieldNumber;
const int Component::kLastUpdateFieldNumber;
const int Component::kLastBoundFieldNumber;
const int Component::kLastUnboundFieldNumber;
const int Component::kPidFieldNumber;
const int Component::kArgsFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  comp_id_ = 0;
  type_ = 0u;
  state_ = 0u;
  last_update_ = 0u;
  last_bound_ = 0u;
  last_unbound_ = 0u;
  pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  SharedDtor();
}

void Component::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    comp_id_ = 0;
    type_ = 0u;
    state_ = 0u;
    last_update_ = 0u;
    last_bound_ = 0u;
    last_unbound_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pid_ = 0u;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_comp_id;
        break;
      }

      // optional sint32 comp_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_type;
        break;
      }

      // optional uint32 type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_state;
        break;
      }

      // optional uint32 state = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_last_update;
        break;
      }

      // optional uint32 last_update = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_update_)));
          set_has_last_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_last_bound;
        break;
      }

      // optional uint32 last_bound = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_bound_)));
          set_has_last_bound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_last_unbound;
        break;
      }

      // optional uint32 last_unbound = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_unbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_unbound_)));
          set_has_last_unbound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_args;
        break;
      }

      // repeated string args = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional sint32 comp_id = 30;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->comp_id(), output);
  }

  // optional uint32 type = 40;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->type(), output);
  }

  // optional uint32 state = 50;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->state(), output);
  }

  // optional uint32 last_update = 60;
  if (has_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->last_update(), output);
  }

  // optional uint32 last_bound = 70;
  if (has_last_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->last_bound(), output);
  }

  // optional uint32 last_unbound = 80;
  if (has_last_unbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->last_unbound(), output);
  }

  // optional uint32 pid = 90;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->pid(), output);
  }

  // repeated string args = 100;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional sint32 comp_id = 30;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->comp_id(), target);
  }

  // optional uint32 type = 40;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->type(), target);
  }

  // optional uint32 state = 50;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->state(), target);
  }

  // optional uint32 last_update = 60;
  if (has_last_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->last_update(), target);
  }

  // optional uint32 last_bound = 70;
  if (has_last_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->last_bound(), target);
  }

  // optional uint32 last_unbound = 80;
  if (has_last_unbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->last_unbound(), target);
  }

  // optional uint32 pid = 90;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->pid(), target);
  }

  // repeated string args = 100;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional sint32 comp_id = 30;
    if (has_comp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->comp_id());
    }

    // optional uint32 type = 40;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 state = 50;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 last_update = 60;
    if (has_last_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_update());
    }

    // optional uint32 last_bound = 70;
    if (has_last_bound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_bound());
    }

    // optional uint32 last_unbound = 80;
    if (has_last_unbound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_unbound());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pid = 90;
    if (has_pid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  // repeated string args = 100;
  total_size += 2 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_last_update()) {
      set_last_update(from.last_update());
    }
    if (from.has_last_bound()) {
      set_last_bound(from.last_bound());
    }
    if (from.has_last_unbound()) {
      set_last_unbound(from.last_unbound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(last_update_, other->last_update_);
    std::swap(last_bound_, other->last_bound_);
    std::swap(last_unbound_, other->last_unbound_);
    std::swap(pid_, other->pid_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ring::kNameFieldNumber;
const int Ring::kHandleFieldNumber;
const int Ring::kOwnerFieldNumber;
const int Ring::kStreamFieldNumber;
const int Ring::kWmutexFieldNumber;
const int Ring::kRmutexFieldNumber;
const int Ring::kRtapiShmFieldNumber;
const int Ring::kReaderFieldNumber;
const int Ring::kWriterFieldNumber;
const int Ring::kSizeFieldNumber;
const int Ring::kScratchpadFieldNumber;
#endif  // !_MSC_VER

Ring::Ring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ring::InitAsDefaultInstance() {
}

Ring::Ring(const Ring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ring::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  owner_ = 0;
  stream_ = false;
  wmutex_ = false;
  rmutex_ = false;
  rtapi_shm_ = false;
  reader_ = 0;
  writer_ = 0;
  size_ = 0;
  scratchpad_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ring::~Ring() {
  SharedDtor();
}

void Ring::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Ring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ring_descriptor_;
}

const Ring& Ring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Ring* Ring::default_instance_ = NULL;

Ring* Ring::New() const {
  return new Ring;
}

void Ring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    owner_ = 0;
    stream_ = false;
    wmutex_ = false;
    rmutex_ = false;
    rtapi_shm_ = false;
    reader_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    writer_ = 0;
    size_ = 0;
    scratchpad_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_owner;
        break;
      }

      // optional sint32 owner = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_stream;
        break;
      }

      // optional bool stream = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_wmutex;
        break;
      }

      // optional bool wmutex = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wmutex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wmutex_)));
          set_has_wmutex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_rmutex;
        break;
      }

      // optional bool rmutex = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmutex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rmutex_)));
          set_has_rmutex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_rtapi_shm;
        break;
      }

      // optional bool rtapi_shm = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtapi_shm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtapi_shm_)));
          set_has_rtapi_shm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_reader;
        break;
      }

      // optional sint32 reader = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &reader_)));
          set_has_reader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_writer;
        break;
      }

      // optional sint32 writer = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &writer_)));
          set_has_writer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_size;
        break;
      }

      // optional sint32 size = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_scratchpad;
        break;
      }

      // optional sint32 scratchpad = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scratchpad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scratchpad_)));
          set_has_scratchpad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional sint32 owner = 40;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->owner(), output);
  }

  // optional bool stream = 50;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->stream(), output);
  }

  // optional bool wmutex = 60;
  if (has_wmutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->wmutex(), output);
  }

  // optional bool rmutex = 70;
  if (has_rmutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->rmutex(), output);
  }

  // optional bool rtapi_shm = 80;
  if (has_rtapi_shm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->rtapi_shm(), output);
  }

  // optional sint32 reader = 90;
  if (has_reader()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(90, this->reader(), output);
  }

  // optional sint32 writer = 100;
  if (has_writer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(100, this->writer(), output);
  }

  // optional sint32 size = 110;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(110, this->size(), output);
  }

  // optional sint32 scratchpad = 120;
  if (has_scratchpad()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(120, this->scratchpad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional sint32 owner = 40;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->owner(), target);
  }

  // optional bool stream = 50;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->stream(), target);
  }

  // optional bool wmutex = 60;
  if (has_wmutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->wmutex(), target);
  }

  // optional bool rmutex = 70;
  if (has_rmutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->rmutex(), target);
  }

  // optional bool rtapi_shm = 80;
  if (has_rtapi_shm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->rtapi_shm(), target);
  }

  // optional sint32 reader = 90;
  if (has_reader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(90, this->reader(), target);
  }

  // optional sint32 writer = 100;
  if (has_writer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(100, this->writer(), target);
  }

  // optional sint32 size = 110;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(110, this->size(), target);
  }

  // optional sint32 scratchpad = 120;
  if (has_scratchpad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(120, this->scratchpad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional sint32 owner = 40;
    if (has_owner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->owner());
    }

    // optional bool stream = 50;
    if (has_stream()) {
      total_size += 2 + 1;
    }

    // optional bool wmutex = 60;
    if (has_wmutex()) {
      total_size += 2 + 1;
    }

    // optional bool rmutex = 70;
    if (has_rmutex()) {
      total_size += 2 + 1;
    }

    // optional bool rtapi_shm = 80;
    if (has_rtapi_shm()) {
      total_size += 2 + 1;
    }

    // optional sint32 reader = 90;
    if (has_reader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->reader());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 writer = 100;
    if (has_writer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->writer());
    }

    // optional sint32 size = 110;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->size());
    }

    // optional sint32 scratchpad = 120;
    if (has_scratchpad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scratchpad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ring::MergeFrom(const Ring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_wmutex()) {
      set_wmutex(from.wmutex());
    }
    if (from.has_rmutex()) {
      set_rmutex(from.rmutex());
    }
    if (from.has_rtapi_shm()) {
      set_rtapi_shm(from.rtapi_shm());
    }
    if (from.has_reader()) {
      set_reader(from.reader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writer()) {
      set_writer(from.writer());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_scratchpad()) {
      set_scratchpad(from.scratchpad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ring::CopyFrom(const Ring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ring::IsInitialized() const {

  return true;
}

void Ring::Swap(Ring* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(owner_, other->owner_);
    std::swap(stream_, other->stream_);
    std::swap(wmutex_, other->wmutex_);
    std::swap(rmutex_, other->rmutex_);
    std::swap(rtapi_shm_, other->rtapi_shm_);
    std::swap(reader_, other->reader_);
    std::swap(writer_, other->writer_);
    std::swap(size_, other->size_);
    std::swap(scratchpad_, other->scratchpad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ring_descriptor_;
  metadata.reflection = Ring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kTypeFieldNumber;
const int Member::kNameFieldNumber;
const int Member::kHandleFieldNumber;
const int Member::kUserarg1FieldNumber;
const int Member::kEpsilonFieldNumber;
const int Member::kHalbitFieldNumber;
const int Member::kHalfloatFieldNumber;
const int Member::kHals32FieldNumber;
const int Member::kHalu32FieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Member::InitAsDefaultInstance() {
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  userarg1_ = 0;
  epsilon_ = 0;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  SharedDtor();
}

void Member::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    userarg1_ = 0;
    epsilon_ = 0;
    halbit_ = false;
    halfloat_ = 0;
    hals32_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    halu32_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ObjectType type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ObjectType_IsValid(value)) {
            set_type(static_cast< ::ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }

      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_userarg1;
        break;
      }

      // optional sint32 userarg1 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userarg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userarg1_)));
          set_has_userarg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(809)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_hals32;
        break;
      }

      // optional sint32 hals32 = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_halu32;
        break;
      }

      // optional uint32 halu32 = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ObjectType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional sint32 userarg1 = 30;
  if (has_userarg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->userarg1(), output);
  }

  // optional double epsilon = 40;
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->epsilon(), output);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->halbit(), output);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->halfloat(), output);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(102, this->hals32(), output);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->halu32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ObjectType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional sint32 userarg1 = 30;
  if (has_userarg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->userarg1(), target);
  }

  // optional double epsilon = 40;
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->epsilon(), target);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->halbit(), target);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->halfloat(), target);
  }

  // optional sint32 hals32 = 102;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(102, this->hals32(), target);
  }

  // optional uint32 halu32 = 103;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->halu32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ObjectType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional sint32 userarg1 = 30;
    if (has_userarg1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userarg1());
    }

    // optional double epsilon = 40;
    if (has_epsilon()) {
      total_size += 2 + 8;
    }

    // optional bool halbit = 100;
    if (has_halbit()) {
      total_size += 2 + 1;
    }

    // optional double halfloat = 101;
    if (has_halfloat()) {
      total_size += 2 + 8;
    }

    // optional sint32 hals32 = 102;
    if (has_hals32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hals32());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 halu32 = 103;
    if (has_halu32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halu32());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_userarg1()) {
      set_userarg1(from.userarg1());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {

  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(userarg1_, other->userarg1_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kNameFieldNumber;
const int Group::kHandleFieldNumber;
const int Group::kIdFieldNumber;
const int Group::kUserarg1FieldNumber;
const int Group::kUserarg2FieldNumber;
const int Group::kSerialFieldNumber;
const int Group::kMemberFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handle_ = 0u;
  id_ = 0;
  userarg1_ = 0;
  userarg2_ = 0;
  serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    handle_ = 0u;
    id_ = 0;
    userarg1_ = 0;
    userarg2_ = 0;
    serial_ = 0;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_id;
        break;
      }

      // optional sint32 id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_userarg1;
        break;
      }

      // optional sint32 userarg1 = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userarg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userarg1_)));
          set_has_userarg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_userarg2;
        break;
      }

      // optional sint32 userarg2 = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userarg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userarg2_)));
          set_has_userarg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_serial;
        break;
      }

      // optional sint32 serial = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_member;
        break;
      }

      // repeated .Member member = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->handle(), output);
  }

  // optional sint32 id = 30;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->id(), output);
  }

  // optional sint32 userarg1 = 50;
  if (has_userarg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(50, this->userarg1(), output);
  }

  // optional sint32 userarg2 = 60;
  if (has_userarg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(60, this->userarg2(), output);
  }

  // optional sint32 serial = 70;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(70, this->serial(), output);
  }

  // repeated .Member member = 80;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional uint32 handle = 25;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->handle(), target);
  }

  // optional sint32 id = 30;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->id(), target);
  }

  // optional sint32 userarg1 = 50;
  if (has_userarg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(50, this->userarg1(), target);
  }

  // optional sint32 userarg2 = 60;
  if (has_userarg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(60, this->userarg2(), target);
  }

  // optional sint32 serial = 70;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(70, this->serial(), target);
  }

  // repeated .Member member = 80;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 handle = 25;
    if (has_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional sint32 id = 30;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 userarg1 = 50;
    if (has_userarg1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userarg1());
    }

    // optional sint32 userarg2 = 60;
    if (has_userarg2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userarg2());
    }

    // optional sint32 serial = 70;
    if (has_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->serial());
    }

  }
  // repeated .Member member = 80;
  total_size += 2 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userarg1()) {
      set_userarg1(from.userarg1());
    }
    if (from.has_userarg2()) {
      set_userarg2(from.userarg2());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(id_, other->id_);
    std::swap(userarg1_, other->userarg1_);
    std::swap(userarg2_, other->userarg2_);
    std::swap(serial_, other->serial_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object::kTypeFieldNumber;
const int Object::kValueFieldNumber;
const int Object::kOriginFieldNumber;
const int Object::kInstanceFieldNumber;
const int Object::kPinFieldNumber;
const int Object::kSignalFieldNumber;
const int Object::kParamFieldNumber;
const int Object::kThreadFieldNumber;
const int Object::kCompFieldNumber;
const int Object::kRingFieldNumber;
const int Object::kGroupFieldNumber;
const int Object::kMemberFieldNumber;
const int Object::kFunctionFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object::InitAsDefaultInstance() {
  value_ = const_cast< ::Value*>(&::Value::default_instance());
  origin_ = const_cast< ::Originator*>(&::Originator::default_instance());
  instance_ = const_cast< ::Instance*>(&::Instance::default_instance());
  pin_ = const_cast< ::Pin*>(&::Pin::default_instance());
  signal_ = const_cast< ::Signal*>(&::Signal::default_instance());
  param_ = const_cast< ::Param*>(&::Param::default_instance());
  thread_ = const_cast< ::Thread*>(&::Thread::default_instance());
  comp_ = const_cast< ::Component*>(&::Component::default_instance());
  ring_ = const_cast< ::Ring*>(&::Ring::default_instance());
  group_ = const_cast< ::Group*>(&::Group::default_instance());
  member_ = const_cast< ::Member*>(&::Member::default_instance());
  function_ = const_cast< ::Function*>(&::Function::default_instance());
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = NULL;
  origin_ = NULL;
  instance_ = NULL;
  pin_ = NULL;
  signal_ = NULL;
  param_ = NULL;
  thread_ = NULL;
  comp_ = NULL;
  ring_ = NULL;
  group_ = NULL;
  member_ = NULL;
  function_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
    delete origin_;
    delete instance_;
    delete pin_;
    delete signal_;
    delete param_;
    delete thread_;
    delete comp_;
    delete ring_;
    delete group_;
    delete member_;
    delete function_;
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_value()) {
      if (value_ != NULL) value_->::Value::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Originator::Clear();
    }
    if (has_instance()) {
      if (instance_ != NULL) instance_->::Instance::Clear();
    }
    if (has_pin()) {
      if (pin_ != NULL) pin_->::Pin::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Signal::Clear();
    }
    if (has_param()) {
      if (param_ != NULL) param_->::Param::Clear();
    }
    if (has_thread()) {
      if (thread_ != NULL) thread_->::Thread::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comp()) {
      if (comp_ != NULL) comp_->::Component::Clear();
    }
    if (has_ring()) {
      if (ring_ != NULL) ring_->::Ring::Clear();
    }
    if (has_group()) {
      if (group_ != NULL) group_->::Group::Clear();
    }
    if (has_member()) {
      if (member_ != NULL) member_->::Member::Clear();
    }
    if (has_function()) {
      if (function_ != NULL) function_->::Function::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ObjectType type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ObjectType_IsValid(value)) {
            set_type(static_cast< ::ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_value;
        break;
      }

      // optional .Value value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_origin;
        break;
      }

      // optional .Originator origin = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_instance;
        break;
      }

      // optional .Instance instance = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_pin;
        break;
      }

      // optional .Pin pin = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_signal;
        break;
      }

      // optional .Signal signal = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(962)) goto parse_param;
        break;
      }

      // optional .Param param = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1042)) goto parse_thread;
        break;
      }

      // optional .Thread thread = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thread()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1122)) goto parse_comp;
        break;
      }

      // optional .Component comp = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1202)) goto parse_ring;
        break;
      }

      // optional .Ring ring = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1282)) goto parse_group;
        break;
      }

      // optional .Group group = 160;
      case 160: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1362)) goto parse_member;
        break;
      }

      // optional .Member member = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1442)) goto parse_function;
        break;
      }

      // optional .Function function = 180;
      case 180: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_function()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ObjectType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional .Value value = 20;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->value(), output);
  }

  // optional .Originator origin = 30;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->origin(), output);
  }

  // optional .Instance instance = 40;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->instance(), output);
  }

  // optional .Pin pin = 100;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->pin(), output);
  }

  // optional .Signal signal = 110;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->signal(), output);
  }

  // optional .Param param = 120;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->param(), output);
  }

  // optional .Thread thread = 130;
  if (has_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->thread(), output);
  }

  // optional .Component comp = 140;
  if (has_comp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->comp(), output);
  }

  // optional .Ring ring = 150;
  if (has_ring()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->ring(), output);
  }

  // optional .Group group = 160;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160, this->group(), output);
  }

  // optional .Member member = 170;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      170, this->member(), output);
  }

  // optional .Function function = 180;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      180, this->function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ObjectType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional .Value value = 20;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->value(), target);
  }

  // optional .Originator origin = 30;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->origin(), target);
  }

  // optional .Instance instance = 40;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->instance(), target);
  }

  // optional .Pin pin = 100;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->pin(), target);
  }

  // optional .Signal signal = 110;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->signal(), target);
  }

  // optional .Param param = 120;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->param(), target);
  }

  // optional .Thread thread = 130;
  if (has_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->thread(), target);
  }

  // optional .Component comp = 140;
  if (has_comp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        140, this->comp(), target);
  }

  // optional .Ring ring = 150;
  if (has_ring()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->ring(), target);
  }

  // optional .Group group = 160;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        160, this->group(), target);
  }

  // optional .Member member = 170;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        170, this->member(), target);
  }

  // optional .Function function = 180;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        180, this->function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ObjectType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Value value = 20;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // optional .Originator origin = 30;
    if (has_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .Instance instance = 40;
    if (has_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance());
    }

    // optional .Pin pin = 100;
    if (has_pin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pin());
    }

    // optional .Signal signal = 110;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .Param param = 120;
    if (has_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // optional .Thread thread = 130;
    if (has_thread()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thread());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Component comp = 140;
    if (has_comp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comp());
    }

    // optional .Ring ring = 150;
    if (has_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ring());
    }

    // optional .Group group = 160;
    if (has_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional .Member member = 170;
    if (has_member()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .Function function = 180;
    if (has_function()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->function());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      mutable_value()->::Value::MergeFrom(from.value());
    }
    if (from.has_origin()) {
      mutable_origin()->::Originator::MergeFrom(from.origin());
    }
    if (from.has_instance()) {
      mutable_instance()->::Instance::MergeFrom(from.instance());
    }
    if (from.has_pin()) {
      mutable_pin()->::Pin::MergeFrom(from.pin());
    }
    if (from.has_signal()) {
      mutable_signal()->::Signal::MergeFrom(from.signal());
    }
    if (from.has_param()) {
      mutable_param()->::Param::MergeFrom(from.param());
    }
    if (from.has_thread()) {
      mutable_thread()->::Thread::MergeFrom(from.thread());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comp()) {
      mutable_comp()->::Component::MergeFrom(from.comp());
    }
    if (from.has_ring()) {
      mutable_ring()->::Ring::MergeFrom(from.ring());
    }
    if (from.has_group()) {
      mutable_group()->::Group::MergeFrom(from.group());
    }
    if (from.has_member()) {
      mutable_member()->::Member::MergeFrom(from.member());
    }
    if (from.has_function()) {
      mutable_function()->::Function::MergeFrom(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(origin_, other->origin_);
    std::swap(instance_, other->instance_);
    std::swap(pin_, other->pin_);
    std::swap(signal_, other->signal_);
    std::swap(param_, other->param_);
    std::swap(thread_, other->thread_);
    std::swap(comp_, other->comp_);
    std::swap(ring_, other->ring_);
    std::swap(group_, other->group_);
    std::swap(member_, other->member_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
