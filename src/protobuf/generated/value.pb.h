// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: value.proto

#ifndef PROTOBUF_value_2eproto__INCLUDED
#define PROTOBUF_value_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_value_2eproto();
void protobuf_AssignDesc_value_2eproto();
void protobuf_ShutdownFile_value_2eproto();

class Value;

// ===================================================================

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ScalarType type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::ScalarType type() const;
  inline void set_type(::ScalarType value);

  // optional string name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ref = 25;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 25;
  inline ::google::protobuf::uint32 ref() const;
  inline void set_ref(::google::protobuf::uint32 value);

  // optional bool changed = 30;
  inline bool has_changed() const;
  inline void clear_changed();
  static const int kChangedFieldNumber = 30;
  inline bool changed() const;
  inline void set_changed(bool value);

  // optional bool halbit = 100;
  inline bool has_halbit() const;
  inline void clear_halbit();
  static const int kHalbitFieldNumber = 100;
  inline bool halbit() const;
  inline void set_halbit(bool value);

  // optional double halfloat = 101;
  inline bool has_halfloat() const;
  inline void clear_halfloat();
  static const int kHalfloatFieldNumber = 101;
  inline double halfloat() const;
  inline void set_halfloat(double value);

  // optional sint32 hals32 = 102;
  inline bool has_hals32() const;
  inline void clear_hals32();
  static const int kHals32FieldNumber = 102;
  inline ::google::protobuf::int32 hals32() const;
  inline void set_hals32(::google::protobuf::int32 value);

  // optional uint32 halu32 = 103;
  inline bool has_halu32() const;
  inline void clear_halu32();
  static const int kHalu32FieldNumber = 103;
  inline ::google::protobuf::uint32 halu32() const;
  inline void set_halu32(::google::protobuf::uint32 value);

  // optional bytes v_bytes = 120;
  inline bool has_v_bytes() const;
  inline void clear_v_bytes();
  static const int kVBytesFieldNumber = 120;
  inline const ::std::string& v_bytes() const;
  inline void set_v_bytes(const ::std::string& value);
  inline void set_v_bytes(const char* value);
  inline void set_v_bytes(const void* value, size_t size);
  inline ::std::string* mutable_v_bytes();
  inline ::std::string* release_v_bytes();
  inline void set_allocated_v_bytes(::std::string* v_bytes);

  // optional int32 v_int32 = 130;
  inline bool has_v_int32() const;
  inline void clear_v_int32();
  static const int kVInt32FieldNumber = 130;
  inline ::google::protobuf::int32 v_int32() const;
  inline void set_v_int32(::google::protobuf::int32 value);

  // optional int64 v_int63 = 140;
  inline bool has_v_int63() const;
  inline void clear_v_int63();
  static const int kVInt63FieldNumber = 140;
  inline ::google::protobuf::int64 v_int63() const;
  inline void set_v_int63(::google::protobuf::int64 value);

  // optional uint32 v_uint32 = 150;
  inline bool has_v_uint32() const;
  inline void clear_v_uint32();
  static const int kVUint32FieldNumber = 150;
  inline ::google::protobuf::uint32 v_uint32() const;
  inline void set_v_uint32(::google::protobuf::uint32 value);

  // optional uint64 v_uint63 = 160;
  inline bool has_v_uint63() const;
  inline void clear_v_uint63();
  static const int kVUint63FieldNumber = 160;
  inline ::google::protobuf::uint64 v_uint63() const;
  inline void set_v_uint63(::google::protobuf::uint64 value);

  // optional double v_double = 170;
  inline bool has_v_double() const;
  inline void clear_v_double();
  static const int kVDoubleFieldNumber = 170;
  inline double v_double() const;
  inline void set_v_double(double value);

  // optional string v_string = 180;
  inline bool has_v_string() const;
  inline void clear_v_string();
  static const int kVStringFieldNumber = 180;
  inline const ::std::string& v_string() const;
  inline void set_v_string(const ::std::string& value);
  inline void set_v_string(const char* value);
  inline void set_v_string(const char* value, size_t size);
  inline ::std::string* mutable_v_string();
  inline ::std::string* release_v_string();
  inline void set_allocated_v_string(::std::string* v_string);

  // optional bool v_bool = 190;
  inline bool has_v_bool() const;
  inline void clear_v_bool();
  static const int kVBoolFieldNumber = 190;
  inline bool v_bool() const;
  inline void set_v_bool(bool value);

  // @@protoc_insertion_point(class_scope:Value)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_changed();
  inline void clear_has_changed();
  inline void set_has_halbit();
  inline void clear_has_halbit();
  inline void set_has_halfloat();
  inline void clear_has_halfloat();
  inline void set_has_hals32();
  inline void clear_has_hals32();
  inline void set_has_halu32();
  inline void clear_has_halu32();
  inline void set_has_v_bytes();
  inline void clear_has_v_bytes();
  inline void set_has_v_int32();
  inline void clear_has_v_int32();
  inline void set_has_v_int63();
  inline void clear_has_v_int63();
  inline void set_has_v_uint32();
  inline void clear_has_v_uint32();
  inline void set_has_v_uint63();
  inline void clear_has_v_uint63();
  inline void set_has_v_double();
  inline void clear_has_v_double();
  inline void set_has_v_string();
  inline void clear_has_v_string();
  inline void set_has_v_bool();
  inline void clear_has_v_bool();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 ref_;
  double halfloat_;
  ::google::protobuf::int32 hals32_;
  ::google::protobuf::uint32 halu32_;
  bool changed_;
  bool halbit_;
  bool v_bool_;
  ::google::protobuf::int32 v_int32_;
  ::std::string* v_bytes_;
  ::google::protobuf::int64 v_int63_;
  ::google::protobuf::uint64 v_uint63_;
  double v_double_;
  ::std::string* v_string_;
  ::google::protobuf::uint32 v_uint32_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_value_2eproto();
  friend void protobuf_AssignDesc_value_2eproto();
  friend void protobuf_ShutdownFile_value_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// ===================================================================


// ===================================================================

// Value

// required .ScalarType type = 10;
inline bool Value::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ScalarType Value::type() const {
  return static_cast< ::ScalarType >(type_);
}
inline void Value::set_type(::ScalarType value) {
  assert(::ScalarType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 20;
inline bool Value::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Value::name() const {
  return *name_;
}
inline void Value::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Value::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Value::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Value::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Value::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ref = 25;
inline bool Value::has_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_ref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_ref() {
  ref_ = 0u;
  clear_has_ref();
}
inline ::google::protobuf::uint32 Value::ref() const {
  return ref_;
}
inline void Value::set_ref(::google::protobuf::uint32 value) {
  set_has_ref();
  ref_ = value;
}

// optional bool changed = 30;
inline bool Value::has_changed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_changed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_changed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_changed() {
  changed_ = false;
  clear_has_changed();
}
inline bool Value::changed() const {
  return changed_;
}
inline void Value::set_changed(bool value) {
  set_has_changed();
  changed_ = value;
}

// optional bool halbit = 100;
inline bool Value::has_halbit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Value::set_has_halbit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Value::clear_has_halbit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Value::clear_halbit() {
  halbit_ = false;
  clear_has_halbit();
}
inline bool Value::halbit() const {
  return halbit_;
}
inline void Value::set_halbit(bool value) {
  set_has_halbit();
  halbit_ = value;
}

// optional double halfloat = 101;
inline bool Value::has_halfloat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Value::set_has_halfloat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Value::clear_has_halfloat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Value::clear_halfloat() {
  halfloat_ = 0;
  clear_has_halfloat();
}
inline double Value::halfloat() const {
  return halfloat_;
}
inline void Value::set_halfloat(double value) {
  set_has_halfloat();
  halfloat_ = value;
}

// optional sint32 hals32 = 102;
inline bool Value::has_hals32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Value::set_has_hals32() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Value::clear_has_hals32() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Value::clear_hals32() {
  hals32_ = 0;
  clear_has_hals32();
}
inline ::google::protobuf::int32 Value::hals32() const {
  return hals32_;
}
inline void Value::set_hals32(::google::protobuf::int32 value) {
  set_has_hals32();
  hals32_ = value;
}

// optional uint32 halu32 = 103;
inline bool Value::has_halu32() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Value::set_has_halu32() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Value::clear_has_halu32() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Value::clear_halu32() {
  halu32_ = 0u;
  clear_has_halu32();
}
inline ::google::protobuf::uint32 Value::halu32() const {
  return halu32_;
}
inline void Value::set_halu32(::google::protobuf::uint32 value) {
  set_has_halu32();
  halu32_ = value;
}

// optional bytes v_bytes = 120;
inline bool Value::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Value::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Value::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Value::clear_v_bytes() {
  if (v_bytes_ != &::google::protobuf::internal::kEmptyString) {
    v_bytes_->clear();
  }
  clear_has_v_bytes();
}
inline const ::std::string& Value::v_bytes() const {
  return *v_bytes_;
}
inline void Value::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  if (v_bytes_ == &::google::protobuf::internal::kEmptyString) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void Value::set_v_bytes(const char* value) {
  set_has_v_bytes();
  if (v_bytes_ == &::google::protobuf::internal::kEmptyString) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void Value::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  if (v_bytes_ == &::google::protobuf::internal::kEmptyString) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_v_bytes() {
  set_has_v_bytes();
  if (v_bytes_ == &::google::protobuf::internal::kEmptyString) {
    v_bytes_ = new ::std::string;
  }
  return v_bytes_;
}
inline ::std::string* Value::release_v_bytes() {
  clear_has_v_bytes();
  if (v_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = v_bytes_;
    v_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Value::set_allocated_v_bytes(::std::string* v_bytes) {
  if (v_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete v_bytes_;
  }
  if (v_bytes) {
    set_has_v_bytes();
    v_bytes_ = v_bytes;
  } else {
    clear_has_v_bytes();
    v_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 v_int32 = 130;
inline bool Value::has_v_int32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Value::set_has_v_int32() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Value::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Value::clear_v_int32() {
  v_int32_ = 0;
  clear_has_v_int32();
}
inline ::google::protobuf::int32 Value::v_int32() const {
  return v_int32_;
}
inline void Value::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
}

// optional int64 v_int63 = 140;
inline bool Value::has_v_int63() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Value::set_has_v_int63() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Value::clear_has_v_int63() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Value::clear_v_int63() {
  v_int63_ = GOOGLE_LONGLONG(0);
  clear_has_v_int63();
}
inline ::google::protobuf::int64 Value::v_int63() const {
  return v_int63_;
}
inline void Value::set_v_int63(::google::protobuf::int64 value) {
  set_has_v_int63();
  v_int63_ = value;
}

// optional uint32 v_uint32 = 150;
inline bool Value::has_v_uint32() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Value::set_has_v_uint32() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Value::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Value::clear_v_uint32() {
  v_uint32_ = 0u;
  clear_has_v_uint32();
}
inline ::google::protobuf::uint32 Value::v_uint32() const {
  return v_uint32_;
}
inline void Value::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
}

// optional uint64 v_uint63 = 160;
inline bool Value::has_v_uint63() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Value::set_has_v_uint63() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Value::clear_has_v_uint63() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Value::clear_v_uint63() {
  v_uint63_ = GOOGLE_ULONGLONG(0);
  clear_has_v_uint63();
}
inline ::google::protobuf::uint64 Value::v_uint63() const {
  return v_uint63_;
}
inline void Value::set_v_uint63(::google::protobuf::uint64 value) {
  set_has_v_uint63();
  v_uint63_ = value;
}

// optional double v_double = 170;
inline bool Value::has_v_double() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Value::set_has_v_double() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Value::clear_has_v_double() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Value::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
inline double Value::v_double() const {
  return v_double_;
}
inline void Value::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
}

// optional string v_string = 180;
inline bool Value::has_v_string() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Value::set_has_v_string() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Value::clear_has_v_string() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Value::clear_v_string() {
  if (v_string_ != &::google::protobuf::internal::kEmptyString) {
    v_string_->clear();
  }
  clear_has_v_string();
}
inline const ::std::string& Value::v_string() const {
  return *v_string_;
}
inline void Value::set_v_string(const ::std::string& value) {
  set_has_v_string();
  if (v_string_ == &::google::protobuf::internal::kEmptyString) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void Value::set_v_string(const char* value) {
  set_has_v_string();
  if (v_string_ == &::google::protobuf::internal::kEmptyString) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void Value::set_v_string(const char* value, size_t size) {
  set_has_v_string();
  if (v_string_ == &::google::protobuf::internal::kEmptyString) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_v_string() {
  set_has_v_string();
  if (v_string_ == &::google::protobuf::internal::kEmptyString) {
    v_string_ = new ::std::string;
  }
  return v_string_;
}
inline ::std::string* Value::release_v_string() {
  clear_has_v_string();
  if (v_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = v_string_;
    v_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Value::set_allocated_v_string(::std::string* v_string) {
  if (v_string_ != &::google::protobuf::internal::kEmptyString) {
    delete v_string_;
  }
  if (v_string) {
    set_has_v_string();
    v_string_ = v_string;
  } else {
    clear_has_v_string();
    v_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool v_bool = 190;
inline bool Value::has_v_bool() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Value::set_has_v_bool() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Value::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Value::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
inline bool Value::v_bool() const {
  return v_bool_;
}
inline void Value::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_value_2eproto__INCLUDED
