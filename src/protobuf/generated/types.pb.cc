// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* ScalarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HalPinDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HalParamDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReplyRequired_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportCause_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OriginDetail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OriginType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RespType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_types_2eproto() {
  protobuf_AddDesc_types_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "types.proto");
  GOOGLE_CHECK(file != NULL);
  ScalarType_descriptor_ = file->enum_type(0);
  HalPinDirection_descriptor_ = file->enum_type(1);
  HalParamDirection_descriptor_ = file->enum_type(2);
  ObjectType_descriptor_ = file->enum_type(3);
  MsgLevel_descriptor_ = file->enum_type(4);
  ReplyRequired_descriptor_ = file->enum_type(5);
  ReportCause_descriptor_ = file->enum_type(6);
  OriginDetail_descriptor_ = file->enum_type(7);
  OriginType_descriptor_ = file->enum_type(8);
  CmdType_descriptor_ = file->enum_type(9);
  RespType_descriptor_ = file->enum_type(10);
  StatusType_descriptor_ = file->enum_type(11);
  MsgType_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_types_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_types_2eproto() {
}

void protobuf_AddDesc_types_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013types.proto*\235\001\n\nScalarType\022\013\n\007HAL_BIT\020"
    "\001\022\r\n\tHAL_FLOAT\020\002\022\013\n\007HAL_S32\020\003\022\013\n\007HAL_U32"
    "\020\004\022\t\n\005BYTES\020\n\022\t\n\005INT32\020\024\022\n\n\006UINT32\020\036\022\t\n\005"
    "INT64\020(\022\n\n\006UINT64\0202\022\n\n\006DOUBLE\020<\022\n\n\006STRIN"
    "G\020F\022\010\n\004BOOL\020P*6\n\017HalPinDirection\022\n\n\006HAL_"
    "IN\020\020\022\013\n\007HAL_OUT\020 \022\n\n\006HAL_IO\0200*,\n\021HalPara"
    "mDirection\022\n\n\006HAL_RO\020@\022\013\n\006HAL_RW\020\300\001*\333\001\n\n"
    "ObjectType\022\t\n\005VALUE\020\001\022\014\n\010INSTANCE\020\003\022\016\n\nO"
    "RIGINATOR\020\005\022\013\n\007HAL_PIN\020\n\022\016\n\nHAL_SIGNAL\020\024"
    "\022\r\n\tHAL_PARAM\020\036\022\016\n\nHAL_THREAD\020(\022\r\n\tHAL_F"
    "UNCT\0202\022\021\n\rHAL_COMPONENT\020F\022\014\n\010HAL_RING\020P\022"
    "\r\n\tHAL_GROUP\020Z\022\025\n\021HAL_MEMBER_SIGNAL\020d\022\022\n"
    "\016HAL_MEMBER_PIN\020n*\177\n\010MsgLevel\022\022\n\016RTAPI_M"
    "SG_NONE\020\000\022\021\n\rRTAPI_MSG_ERR\020\001\022\022\n\016RTAPI_MS"
    "G_WARN\020\002\022\022\n\016RTAPI_MSG_INFO\020\003\022\021\n\rRTAPI_MS"
    "G_DBG\020\004\022\021\n\rRTAPI_MSG_ALL\020\005*]\n\rReplyRequi"
    "red\022\010\n\004NONE\020\000\022\020\n\014ON_RECEPTION\020\001\022\r\n\tON_QU"
    "EUED\020\002\022\021\n\rON_COMPLETION\020\004\022\016\n\tALL_STEPS\020\377"
    "\001*.\n\013ReportCause\022\014\n\010PERIODIC\020\001\022\021\n\rCHANGE"
    "_NOTIFY\020\002*\240\001\n\014OriginDetail\022\017\n\013UNIX_SIGNA"
    "L\020\n\022\025\n\021INSTANCE_SHUTDOWN\020\024\022\016\n\nZMQ_SOCKET"
    "\020F\022\r\n\tNML_LAYER\020P\022\r\n\tRCS_LAYER\020Z\022\r\n\tCMS_"
    "LAYER\020d\022\014\n\010IP_LAYER\020n\022\r\n\tTCP_LAYER\020x\022\016\n\t"
    "PGM_LAYER\020\202\001*\245\001\n\nOriginType\022\013\n\007PROCESS\020\n"
    "\022\017\n\013USER_THREAD\020\024\022\r\n\tRT_THREAD\020\036\022\r\n\tCOMP"
    "ONENT\020(\022\023\n\017THREAD_FUNCTION\0202\022\022\n\016COMPONEN"
    "T_INIT\020<\022\022\n\016COMPONENT_EXIT\020F\022\t\n\005GROUP\020P\022"
    "\007\n\003PIN\020Z\022\n\n\006SIGNAL\020d*\242\001\n\007CmdType\022\010\n\004PING"
    "\020\n\022\013\n\006REPORT\020\302\027\022\023\n\016SET_HAL_SIGNAL\020\376\027\022\016\n\t"
    "LINK_PINS\020\210\030\022\021\n\014BIND_REQUEST\020\240\037\022\023\n\016UNBIN"
    "D_REQUEST\020\252\037\022\013\n\006UPDATE\020\264\037\022\023\n\016UNBIND_CONF"
    "IRM\020\210\'\022\021\n\014BIND_CONFIRM\020\222\'*1\n\010RespType\022\017\n"
    "\013ACKNOWLEDGE\020\n\022\n\n\006REJECT\020\024\022\010\n\004DONE\020(*>\n\n"
    "StatusType\022\n\n\006QUEUED\020\001\022\013\n\007PENDING\020\002\022\014\n\010C"
    "OMPLETE\020\003\022\t\n\005ERROR\020\004*\3176\n\007MsgType\022\016\n\nMT_C"
    "OMMAND\020\004\022\016\n\nMT_REPONSE\020\005\022\024\n\020MT_RTAPI_MES"
    "SAGE\020\006\022\n\n\006MT_NML\020\007\022\n\n\006MT_WOU\020\010\022\r\n\tMT_SYS"
    "LOG\020\t\022\014\n\010MT_ASCII\020d\022\016\n\nMT_UNICODE\020e\022\014\n\010M"
    "T_GCODE\020f\022\r\n\tMT_PYTHON\020g\022\r\n\tMT_PICKLE\020h\022"
    "\n\n\006MT_TCL\020i\022\n\n\006MT_XML\020j\022\013\n\007MT_JSON\020k\022\013\n\007"
    "MT_JPEG\020l\022\n\n\006MT_PNG\020m\022\013\n\007MT_TIFF\020n\022\021\n\rMT"
    "_POSTSCRIPT\020o\022\n\n\006MT_SVG\020p\022\024\n\017MT_EMCMOT_L"
    "OWER\020\350\007\022\024\n\017MT_EMCMOT_UPPER\020\314\010\022\024\n\017MT_EMCM"
    "OT_ABORT\020\351\007\022\031\n\024MT_EMCMOT_AXIS_ABORT\020\352\007\022\025"
    "\n\020MT_EMCMOT_ENABLE\020\353\007\022\026\n\021MT_EMCMOT_DISAB"
    "LE\020\354\007\022\037\n\032MT_EMCMOT_ENABLE_AMPLIFIER\020\355\007\022 "
    "\n\033MT_EMCMOT_DISABLE_AMPLIFIER\020\356\007\022\036\n\031MT_E"
    "MCMOT_ENABLE_WATCHDOG\020\357\007\022\037\n\032MT_EMCMOT_DI"
    "SABLE_WATCHDOG\020\360\007\022\035\n\030MT_EMCMOT_ACTIVATE_"
    "JOINT\020\361\007\022\037\n\032MT_EMCMOT_DEACTIVATE_JOINT\020\362"
    "\007\022\024\n\017MT_EMCMOT_PAUSE\020\363\007\022\025\n\020MT_EMCMOT_RES"
    "UME\020\364\007\022\023\n\016MT_EMCMOT_STEP\020\365\007\022\023\n\016MT_EMCMOT"
    "_FREE\020\366\007\022\024\n\017MT_EMCMOT_COORD\020\367\007\022\025\n\020MT_EMC"
    "MOT_TELEOP\020\370\007\022\034\n\027MT_EMCMOT_SPINDLE_SCALE"
    "\020\371\007\022\030\n\023MT_EMCMOT_SS_ENABLE\020\372\007\022\031\n\024MT_EMCM"
    "OT_FEED_SCALE\020\373\007\022\030\n\023MT_EMCMOT_FS_ENABLE\020"
    "\374\007\022\030\n\023MT_EMCMOT_FH_ENABLE\020\375\007\022\030\n\023MT_EMCMO"
    "T_AF_ENABLE\020\376\007\022\036\n\031MT_EMCMOT_OVERRIDE_LIM"
    "ITS\020\377\007\022\023\n\016MT_EMCMOT_HOME\020\200\010\022\025\n\020MT_EMCMOT"
    "_UNHOME\020\201\010\022\027\n\022MT_EMCMOT_JOG_CONT\020\202\010\022\027\n\022M"
    "T_EMCMOT_JOG_INCR\020\203\010\022\026\n\021MT_EMCMOT_JOG_AB"
    "S\020\204\010\022\027\n\022MT_EMCMOT_SET_LINE\020\205\010\022\031\n\024MT_EMCM"
    "OT_SET_CIRCLE\020\206\010\022 \n\033MT_EMCMOT_SET_TELEOP"
    "_VECTOR\020\207\010\022 \n\033MT_EMCMOT_CLEAR_PROBE_FLAG"
    "S\020\210\010\022\024\n\017MT_EMCMOT_PROBE\020\211\010\022\030\n\023MT_EMCMOT_"
    "RIGID_TAP\020\212\010\022\"\n\035MT_EMCMOT_SET_POSITION_L"
    "IMITS\020\213\010\022\033\n\026MT_EMCMOT_SET_BACKLASH\020\214\010\022\035\n"
    "\030MT_EMCMOT_SET_MIN_FERROR\020\215\010\022\035\n\030MT_EMCMO"
    "T_SET_MAX_FERROR\020\216\010\022\026\n\021MT_EMCMOT_SET_VEL"
    "\020\217\010\022\034\n\027MT_EMCMOT_SET_VEL_LIMIT\020\220\010\022\"\n\035MT_"
    "EMCMOT_SET_JOINT_VEL_LIMIT\020\221\010\022\"\n\035MT_EMCM"
    "OT_SET_JOINT_ACC_LIMIT\020\222\010\022\026\n\021MT_EMCMOT_S"
    "ET_ACC\020\223\010\022\034\n\027MT_EMCMOT_SET_TERM_COND\020\224\010\022"
    "\033\n\026MT_EMCMOT_SET_NUM_AXES\020\225\010\022\035\n\030MT_EMCMO"
    "T_SET_WORLD_HOME\020\226\010\022 \n\033MT_EMCMOT_SET_HOM"
    "ING_PARAMS\020\227\010\022\030\n\023MT_EMCMOT_SET_DEBUG\020\230\010\022"
    "\027\n\022MT_EMCMOT_SET_DOUT\020\231\010\022\027\n\022MT_EMCMOT_SE"
    "T_AOUT\020\232\010\022\036\n\031MT_EMCMOT_SET_SPINDLESYNC\020\233"
    "\010\022\031\n\024MT_EMCMOT_SPINDLE_ON\020\234\010\022\032\n\025MT_EMCMO"
    "T_SPINDLE_OFF\020\235\010\022\037\n\032MT_EMCMOT_SPINDLE_IN"
    "CREASE\020\236\010\022\037\n\032MT_EMCMOT_SPINDLE_DECREASE\020"
    "\237\010\022#\n\036MT_EMCMOT_SPINDLE_BRAKE_ENGAGE\020\240\010\022"
    "$\n\037MT_EMCMOT_SPINDLE_BRAKE_RELEASE\020\241\010\022\037\n"
    "\032MT_EMCMOT_SET_MOTOR_OFFSET\020\242\010\022\035\n\030MT_EMC"
    "MOT_SET_JOINT_COMP\020\243\010\022\031\n\024MT_EMCMOT_SET_O"
    "FFSET\020\244\010\022\031\n\024MT_EMCMOT_COMMAND_OK\020\245\010\022&\n!M"
    "T_EMCMOT_COMMAND_UNKNOWN_COMMAND\020\246\010\022&\n!M"
    "T_EMCMOT_COMMAND_INVALID_COMMAND\020\247\010\022%\n M"
    "T_EMCMOT_COMMAND_INVALID_PARAMS\020\250\010\022\037\n\032MT"
    "_EMCMOT_COMMAND_BAD_EXEC\020\251\010\022\036\n\031MT_EMCMOT"
    "_MOTION_DISABLED\020\252\010\022\032\n\025MT_EMCMOT_MOTION_"
    "FREE\020\253\010\022\034\n\027MT_EMCMOT_MOTION_TELEOP\020\254\010\022\033\n"
    "\026MT_EMCMOT_MOTION_COORD\020\255\010\022\031\n\024MT_EMCMOT_"
    "JOINT_FLAG\020\256\010\022\032\n\025MT_EMCMOT_MOTION_FLAG\020\257"
    "\010\022\024\n\017MT_PRU_FIRMWARE\020\200\020\022\032\n\025MT_MESA_5I20_"
    "FIRMWARE\020\270\027\022\014\n\007MT_BLOB\020\240\037\022\r\n\010MT_TEST1\020\211\'"
    "\022\r\n\010MT_TEST2\020\212\'\022\r\n\010MT_TEST3\020\213\'\022\025\n\020MT_EMC"
    "_NML_LOWER\020\220N\022\025\n\020MT_EMC_NML_UPPER\020\310e\022\037\n\032"
    "MT_EMC_OPERATOR_ERROR_TYPE\020\233N\022\036\n\031MT_EMC_"
    "OPERATOR_TEXT_TYPE\020\234N\022!\n\034MT_EMC_OPERATOR"
    "_DISPLAY_TYPE\020\235N\022\025\n\020MT_EMC_NULL_TYPE\020\245N\022"
    "\032\n\025MT_EMC_SET_DEBUG_TYPE\020\246N\022\033\n\026MT_EMC_SY"
    "STEM_CMD_TYPE\020\256N\022\036\n\031MT_EMC_AXIS_SET_AXIS"
    "_TYPE\020\365N\022\037\n\032MT_EMC_AXIS_SET_UNITS_TYPE\020\366"
    "N\022,\n\'MT_EMC_AXIS_SET_MIN_POSITION_LIMIT_"
    "TYPE\020\373N\022,\n\'MT_EMC_AXIS_SET_MAX_POSITION_"
    "LIMIT_TYPE\020\374N\022 \n\033MT_EMC_AXIS_SET_FERROR_"
    "TYPE\020\377N\022\'\n\"MT_EMC_AXIS_SET_HOMING_PARAMS"
    "_TYPE\020\200O\022$\n\037MT_EMC_AXIS_SET_MIN_FERROR_T"
    "YPE\020\203O\022&\n!MT_EMC_AXIS_SET_MAX_VELOCITY_T"
    "YPE\020\204O\022\032\n\025MT_EMC_AXIS_INIT_TYPE\020\206O\022\032\n\025MT"
    "_EMC_AXIS_HALT_TYPE\020\207O\022\033\n\026MT_EMC_AXIS_AB"
    "ORT_TYPE\020\210O\022\034\n\027MT_EMC_AXIS_ENABLE_TYPE\020\211"
    "O\022\035\n\030MT_EMC_AXIS_DISABLE_TYPE\020\212O\022\032\n\025MT_E"
    "MC_AXIS_HOME_TYPE\020\213O\022\034\n\027MT_EMC_AXIS_UNHO"
    "ME_TYPE\020\227O\022\031\n\024MT_EMC_AXIS_JOG_TYPE\020\214O\022\036\n"
    "\031MT_EMC_AXIS_INCR_JOG_TYPE\020\215O\022\035\n\030MT_EMC_"
    "AXIS_ABS_JOG_TYPE\020\216O\022\036\n\031MT_EMC_AXIS_ACTI"
    "VATE_TYPE\020\217O\022 \n\033MT_EMC_AXIS_DEACTIVATE_T"
    "YPE\020\220O\022%\n MT_EMC_AXIS_OVERRIDE_LIMITS_TY"
    "PE\020\221O\022\037\n\032MT_EMC_AXIS_LOAD_COMP_TYPE\020\223O\022\""
    "\n\035MT_EMC_AXIS_SET_BACKLASH_TYPE\020\226O\022\032\n\025MT"
    "_EMC_AXIS_STAT_TYPE\020\327O\022\036\n\031MT_EMC_TRAJ_SE"
    "T_AXES_TYPE\020\331O\022\037\n\032MT_EMC_TRAJ_SET_UNITS_"
    "TYPE\020\332O\022$\n\037MT_EMC_TRAJ_SET_CYCLE_TIME_TY"
    "PE\020\333O\022\036\n\031MT_EMC_TRAJ_SET_MODE_TYPE\020\334O\022\"\n"
    "\035MT_EMC_TRAJ_SET_VELOCITY_TYPE\020\335O\022&\n!MT_"
    "EMC_TRAJ_SET_ACCELERATION_TYPE\020\336O\022&\n!MT_"
    "EMC_TRAJ_SET_MAX_VELOCITY_TYPE\020\337O\022*\n%MT_"
    "EMC_TRAJ_SET_MAX_ACCELERATION_TYPE\020\340O\022\037\n"
    "\032MT_EMC_TRAJ_SET_SCALE_TYPE\020\341O\022#\n\036MT_EMC"
    "_TRAJ_SET_MOTION_ID_TYPE\020\342O\022\032\n\025MT_EMC_TR"
    "AJ_INIT_TYPE\020\343O\022\032\n\025MT_EMC_TRAJ_HALT_TYPE"
    "\020\344O\022\034\n\027MT_EMC_TRAJ_ENABLE_TYPE\020\345O\022\035\n\030MT_"
    "EMC_TRAJ_DISABLE_TYPE\020\346O\022\033\n\026MT_EMC_TRAJ_"
    "ABORT_TYPE\020\347O\022\033\n\026MT_EMC_TRAJ_PAUSE_TYPE\020"
    "\350O\022\032\n\025MT_EMC_TRAJ_STEP_TYPE\020\351O\022\034\n\027MT_EMC"
    "_TRAJ_RESUME_TYPE\020\352O\022\033\n\026MT_EMC_TRAJ_DELA"
    "Y_TYPE\020\353O\022!\n\034MT_EMC_TRAJ_LINEAR_MOVE_TYP"
    "E\020\354O\022#\n\036MT_EMC_TRAJ_CIRCULAR_MOVE_TYPE\020\355"
    "O\022#\n\036MT_EMC_TRAJ_SET_TERM_COND_TYPE\020\356O\022 "
    "\n\033MT_EMC_TRAJ_SET_OFFSET_TYPE\020\357O\022\035\n\030MT_E"
    "MC_TRAJ_SET_G5X_TYPE\020\360O\022\036\n\031MT_EMC_TRAJ_S"
    "ET_HOME_TYPE\020\361O\022\"\n\035MT_EMC_TRAJ_SET_ROTAT"
    "ION_TYPE\020\362O\022\035\n\030MT_EMC_TRAJ_SET_G92_TYPE\020"
    "\363O\022.\n)MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FL"
    "AG_TYPE\020\364O\022\033\n\026MT_EMC_TRAJ_PROBE_TYPE\020\365O\022"
    "\'\n\"MT_EMC_TRAJ_SET_TELEOP_ENABLE_TYPE\020\366O"
    "\022\'\n\"MT_EMC_TRAJ_SET_TELEOP_VECTOR_TYPE\020\367"
    "O\022%\n MT_EMC_TRAJ_SET_SPINDLESYNC_TYPE\020\370O"
    "\022\'\n\"MT_EMC_TRAJ_SET_SPINDLE_SCALE_TYPE\020\371"
    "O\022#\n\036MT_EMC_TRAJ_SET_FO_ENABLE_TYPE\020\372O\022#"
    "\n\036MT_EMC_TRAJ_SET_SO_ENABLE_TYPE\020\373O\022#\n\036M"
    "T_EMC_TRAJ_SET_FH_ENABLE_TYPE\020\374O\022\037\n\032MT_E"
    "MC_TRAJ_RIGID_TAP_TYPE\020\375O\022\032\n\025MT_EMC_TRAJ"
    "_STAT_TYPE\020\273P\022\034\n\027MT_EMC_MOTION_INIT_TYPE"
    "\020\275P\022\034\n\027MT_EMC_MOTION_HALT_TYPE\020\276P\022\035\n\030MT_"
    "EMC_MOTION_ABORT_TYPE\020\277P\022 \n\033MT_EMC_MOTIO"
    "N_SET_AOUT_TYPE\020\300P\022 \n\033MT_EMC_MOTION_SET_"
    "DOUT_TYPE\020\301P\022 \n\033MT_EMC_MOTION_ADAPTIVE_T"
    "YPE\020\302P\022\034\n\027MT_EMC_MOTION_STAT_TYPE\020\237Q\022\032\n\025"
    "MT_EMC_TASK_INIT_TYPE\020\205R\022\032\n\025MT_EMC_TASK_"
    "HALT_TYPE\020\206R\022\033\n\026MT_EMC_TASK_ABORT_TYPE\020\207"
    "R\022\036\n\031MT_EMC_TASK_SET_MODE_TYPE\020\210R\022\037\n\032MT_"
    "EMC_TASK_SET_STATE_TYPE\020\211R\022\037\n\032MT_EMC_TAS"
    "K_PLAN_OPEN_TYPE\020\212R\022\036\n\031MT_EMC_TASK_PLAN_"
    "RUN_TYPE\020\213R\022\037\n\032MT_EMC_TASK_PLAN_READ_TYP"
    "E\020\214R\022\"\n\035MT_EMC_TASK_PLAN_EXECUTE_TYPE\020\215R"
    "\022 \n\033MT_EMC_TASK_PLAN_PAUSE_TYPE\020\216R\022\037\n\032MT"
    "_EMC_TASK_PLAN_STEP_TYPE\020\217R\022!\n\034MT_EMC_TA"
    "SK_PLAN_RESUME_TYPE\020\220R\022\036\n\031MT_EMC_TASK_PL"
    "AN_END_TYPE\020\221R\022 \n\033MT_EMC_TASK_PLAN_CLOSE"
    "_TYPE\020\222R\022\037\n\032MT_EMC_TASK_PLAN_INIT_TYPE\020\223"
    "R\022 \n\033MT_EMC_TASK_PLAN_SYNCH_TYPE\020\224R\022,\n\'M"
    "T_EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE\020\225"
    "R\022+\n&MT_EMC_TASK_PLAN_SET_BLOCK_DELETE_T"
    "YPE\020\226R\022(\n#MT_EMC_TASK_PLAN_OPTIONAL_STOP"
    "_TYPE\020\227R\022\032\n\025MT_EMC_TASK_STAT_TYPE\020\347R\022\032\n\025"
    "MT_EMC_TOOL_INIT_TYPE\020\335V\022\032\n\025MT_EMC_TOOL_"
    "HALT_TYPE\020\336V\022\033\n\026MT_EMC_TOOL_ABORT_TYPE\020\337"
    "V\022\035\n\030MT_EMC_TOOL_PREPARE_TYPE\020\340V\022\032\n\025MT_E"
    "MC_TOOL_LOAD_TYPE\020\341V\022\034\n\027MT_EMC_TOOL_UNLO"
    "AD_TYPE\020\342V\022%\n MT_EMC_TOOL_LOAD_TOOL_TABL"
    "E_TYPE\020\343V\022 \n\033MT_EMC_TOOL_SET_OFFSET_TYPE"
    "\020\344V\022 \n\033MT_EMC_TOOL_SET_NUMBER_TYPE\020\345V\022\032\n"
    "\025MT_EMC_TOOL_STAT_TYPE\020\277W\022\035\n\030MT_EMC_AUX_"
    "ESTOP_ON_TYPE\020\306W\022\036\n\031MT_EMC_AUX_ESTOP_OFF"
    "_TYPE\020\307W\022 \n\033MT_EMC_AUX_ESTOP_RESET_TYPE\020"
    "\310W\022\037\n\032MT_EMC_AUX_INPUT_WAIT_TYPE\020\311W\022\031\n\024M"
    "T_EMC_AUX_STAT_TYPE\020\243X\022\033\n\026MT_EMC_SPINDLE"
    "_ON_TYPE\020\250X\022\034\n\027MT_EMC_SPINDLE_OFF_TYPE\020\251"
    "X\022!\n\034MT_EMC_SPINDLE_INCREASE_TYPE\020\255X\022!\n\034"
    "MT_EMC_SPINDLE_DECREASE_TYPE\020\256X\022!\n\034MT_EM"
    "C_SPINDLE_CONSTANT_TYPE\020\257X\022&\n!MT_EMC_SPI"
    "NDLE_BRAKE_RELEASE_TYPE\020\260X\022%\n MT_EMC_SPI"
    "NDLE_BRAKE_ENGAGE_TYPE\020\261X\022\036\n\031MT_EMC_SPIN"
    "DLE_SPEED_TYPE\020\264X\022\035\n\030MT_EMC_SPINDLE_STAT"
    "_TYPE\020\207Y\022 \n\033MT_EMC_COOLANT_MIST_ON_TYPE\020"
    "\214Y\022!\n\034MT_EMC_COOLANT_MIST_OFF_TYPE\020\215Y\022!\n"
    "\034MT_EMC_COOLANT_FLOOD_ON_TYPE\020\216Y\022\"\n\035MT_E"
    "MC_COOLANT_FLOOD_OFF_TYPE\020\217Y\022\035\n\030MT_EMC_C"
    "OOLANT_STAT_TYPE\020\353Y\022\030\n\023MT_EMC_LUBE_ON_TY"
    "PE\020\360Y\022\031\n\024MT_EMC_LUBE_OFF_TYPE\020\361Y\022\032\n\025MT_E"
    "MC_LUBE_STAT_TYPE\020\317Z\022\030\n\023MT_EMC_IO_INIT_T"
    "YPE\020\321Z\022\030\n\023MT_EMC_IO_HALT_TYPE\020\322Z\022\031\n\024MT_E"
    "MC_IO_ABORT_TYPE\020\323Z\022\"\n\035MT_EMC_IO_SET_CYC"
    "LE_TIME_TYPE\020\324Z\022\030\n\023MT_EMC_IO_STAT_TYPE\020\263"
    "[\022\025\n\020MT_EMC_INIT_TYPE\020\375\\\022\025\n\020MT_EMC_HALT_"
    "TYPE\020\376\\\022\026\n\021MT_EMC_ABORT_TYPE\020\377\\\022\025\n\020MT_EM"
    "C_STAT_TYPE\020\337]", 8374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_types_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_types_2eproto {
  StaticDescriptorInitializer_types_2eproto() {
    protobuf_AddDesc_types_2eproto();
  }
} static_descriptor_initializer_types_2eproto_;
const ::google::protobuf::EnumDescriptor* ScalarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarType_descriptor_;
}
bool ScalarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 80:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HalPinDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalPinDirection_descriptor_;
}
bool HalPinDirection_IsValid(int value) {
  switch(value) {
    case 16:
    case 32:
    case 48:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HalParamDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalParamDirection_descriptor_;
}
bool HalParamDirection_IsValid(int value) {
  switch(value) {
    case 64:
    case 192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectType_descriptor_;
}
bool ObjectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 5:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 70:
    case 80:
    case 90:
    case 100:
    case 110:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLevel_descriptor_;
}
bool MsgLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplyRequired_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyRequired_descriptor_;
}
bool ReplyRequired_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportCause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportCause_descriptor_;
}
bool ReportCause_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OriginDetail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginDetail_descriptor_;
}
bool OriginDetail_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 70:
    case 80:
    case 90:
    case 100:
    case 110:
    case 120:
    case 130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OriginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginType_descriptor_;
}
bool OriginType_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 80:
    case 90:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 10:
    case 3010:
    case 3070:
    case 3080:
    case 4000:
    case 4010:
    case 4020:
    case 5000:
    case 5010:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RespType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespType_descriptor_;
}
bool RespType_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusType_descriptor_;
}
bool StatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1100:
    case 2048:
    case 3000:
    case 4000:
    case 5001:
    case 5002:
    case 5003:
    case 10000:
    case 10011:
    case 10012:
    case 10013:
    case 10021:
    case 10022:
    case 10030:
    case 10101:
    case 10102:
    case 10107:
    case 10108:
    case 10111:
    case 10112:
    case 10115:
    case 10116:
    case 10118:
    case 10119:
    case 10120:
    case 10121:
    case 10122:
    case 10123:
    case 10124:
    case 10125:
    case 10126:
    case 10127:
    case 10128:
    case 10129:
    case 10131:
    case 10134:
    case 10135:
    case 10199:
    case 10201:
    case 10202:
    case 10203:
    case 10204:
    case 10205:
    case 10206:
    case 10207:
    case 10208:
    case 10209:
    case 10210:
    case 10211:
    case 10212:
    case 10213:
    case 10214:
    case 10215:
    case 10216:
    case 10217:
    case 10218:
    case 10219:
    case 10220:
    case 10221:
    case 10222:
    case 10223:
    case 10224:
    case 10225:
    case 10226:
    case 10227:
    case 10228:
    case 10229:
    case 10230:
    case 10231:
    case 10232:
    case 10233:
    case 10234:
    case 10235:
    case 10236:
    case 10237:
    case 10299:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10399:
    case 10501:
    case 10502:
    case 10503:
    case 10504:
    case 10505:
    case 10506:
    case 10507:
    case 10508:
    case 10509:
    case 10510:
    case 10511:
    case 10512:
    case 10513:
    case 10514:
    case 10515:
    case 10516:
    case 10517:
    case 10518:
    case 10519:
    case 10599:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11105:
    case 11106:
    case 11107:
    case 11108:
    case 11109:
    case 11199:
    case 11206:
    case 11207:
    case 11208:
    case 11209:
    case 11299:
    case 11304:
    case 11305:
    case 11309:
    case 11310:
    case 11311:
    case 11312:
    case 11313:
    case 11316:
    case 11399:
    case 11404:
    case 11405:
    case 11406:
    case 11407:
    case 11499:
    case 11504:
    case 11505:
    case 11599:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11699:
    case 11901:
    case 11902:
    case 11903:
    case 11999:
    case 13000:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
