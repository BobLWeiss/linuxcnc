/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_rtapi_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_rtapi_5fmessage_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "nanopb.pb-c.h"
#include "types.pb-c.h"
#include "value.pb-c.h"

typedef struct _RTAPIMessage RTAPIMessage;


/* --- enums --- */


/* --- messages --- */

struct  _RTAPIMessage
{
  ProtobufCMessage base;
  MsgLevel msglevel;
  char *format;
  size_t n_arg;
  Value **arg;
};
extern char rtapi__message__format__default_value[];
#define RTAPI__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rtapi__message__descriptor) \
    , MSG_LEVEL__RTAPI_MSG_DBG, rtapi__message__format__default_value, 0,NULL }


/* RTAPIMessage methods */
void   rtapi__message__init
                     (RTAPIMessage         *message);
size_t rtapi__message__get_packed_size
                     (const RTAPIMessage   *message);
size_t rtapi__message__pack
                     (const RTAPIMessage   *message,
                      uint8_t             *out);
size_t rtapi__message__pack_to_buffer
                     (const RTAPIMessage   *message,
                      ProtobufCBuffer     *buffer);
RTAPIMessage *
       rtapi__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rtapi__message__free_unpacked
                     (RTAPIMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RTAPIMessage_Closure)
                 (const RTAPIMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rtapi__message__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_rtapi_5fmessage_2eproto__INCLUDED */
