INCLUDES += rtapi

# this covers the userpci directory too, in a bit cludgy way
../include/%.h: ./rtapi/%.h
	mkdir -p ../include/userpci
	cp  $^ $@
../include/%.hh: ./rtapi/%.hh
	cp  $^ $@

# cflags for all sources, -DRTAPI or -DULAPI
#
# see bottom of this file and Makefile
RT_CFLAGS := 
# link flags for -DRTAPI/rtapi_app/rtapi.[ks]o and
# ../lib/liblinuxcnchal.so
#
# see below and hal/Submakefile
RT_LDFLAGS := 
ULAPISO_LIBS :=
# see enum thread_flavor_id in rtapi.h
ifeq ($(THREADS),posix)
FLAVOR_FLAGS := -DTHREAD_FLAVOR_ID=0
RT_CFLAGS+=-pthread
endif
ifeq ($(THREADS),rt-preempt-user)
FLAVOR_FLAGS := -DTHREAD_FLAVOR_ID=1
endif
ifeq ($(THREADS),xenomai-user)
FLAVOR_FLAGS := -DTHREAD_FLAVOR_ID=2
RT_CFLAGS +=   $(shell $(XENO_CONFIG) --skin=native  --ldflags)
endif
ifeq ($(THREADS),rtai)
FLAVOR_FLAGS := -DTHREAD_FLAVOR_ID=3
# these are needed to resolve rt_shm_alloc in ulapi.so
ULAPISO_LIBS += /usr/realtime-`uname -r`/lib/liblxrt.a /usr/lib/libpthread.so
endif
ifeq ($(THREADS),xenomai-kernel)
FLAVOR_FLAGS := -DTHREAD_FLAVOR_ID=4
ULAPISO_LIBS +=  $(shell $(XENO_CONFIG) --skin=native  --ldflags)
endif
RT_CFLAGS += $(FLAVOR_FLAGS)

##########################################
# defaults for all thread styles

# ULAPI:  ../lib/ulapi$THREADSTYLE.so (TBD)
#
# List of sources whose objects objects/rtapi/*.o link into
# ../lib/ulapi$THREADSTYLE.soiblinuxcnchal.so;
#
ULAPI_SRCS := \
	rtapi/rtapi_common.c \
	rtapi/rtapi_task.c \
	rtapi/rtapi_shmem.c \
	rtapi/rtapi_ring.c \
	rtapi/rtapi_time.c \
	rtapi/rtapi_io.c \
	rtapi/shmdrv/shmdrvapi.c \
	rtapi/$(THREADS_SOURCE).c \
	$(if $(filter $(BUILD_SYS),kbuild),rtapi/rtapi_module.c) 

ULAPISO_SRCS := $(ULAPI_SRCS) \
	rtapi/ulapi_main.c  \
	rtapi/rtapi_support.c 

# resolved at loadtime
$(call TOOBJSDEPS, $(ULAPISO_SRCS)): EXTRAFLAGS += -fPIC $(RT_CFLAGS)
ULAPISO := ../lib/ulapi.so
$(ULAPISO): ../lib/liblinuxcnchal.so  $(call TOOBJS, $(ULAPISO_SRCS))
	$(ECHO) Creating shared object $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS)  -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ $(ULAPISO_LIBS) $(RT_LDFLAGS) \
	../lib/liblinuxcnchal.so


USERSRCS += $(ULAPISO_SRCS) 
TARGETS += $(ULAPISO)

# the instance RT module
INSTANCE_SRCS := \
	rtapi/instance.c \
	rtapi/rtapi_support.c

USERSRCS += $(INSTANCE_SRCS)


# RTAPI:  ../rtlib/*
#
# Makefile defines rtapi-objs, a list of all objects whose sources are
# compiled -DRTAPI and linked into rtapi.[sk]o.  Keep that list up to
# date.




##################################################################
#                 USERLAND THREAD STYLES
##################################################################
ifeq ($(BUILD_SYS),user-dso)

################################################
# xenomai-user settings
ifeq ($(THREADS),xenomai-user)

RT_CFLAGS += -fPIC $(shell $(XENO_CONFIG) --skin=native --cflags )
RT_LDFLAGS += $(shell $(XENO_CONFIG) --skin=native --ldflags )
endif # xenomai-user


################################################
# rt-preempt-user and posix settings
ifeq ($(THREADS_SOURCE),rt-preempt-user)

RT_CFLAGS +=  -pthread
RT_LDFLAGS += -lpthread -lrt
endif  # rt-preempt-user/posix


################################################
# ../bin/rtapi_app
#
# C sources to compile -DRTAPI and link into ../bin/rtapi_app.  (Omit
# the main .cc file.)  (Can this be pruned?)
# ifeq ($(USERMODE_PCI),yes)
# RTAPI_SRCS := $(ULAPI_SRCS) rtapi/rtapi_pci.c
# else
# RTAPI_SRCS := $(ULAPI_SRCS) 
# endif
#
# Build objects/rtapi/sim_rtapi_app.o in Makefile (with -DULAPI,
# despite others -DRTAPI; Makefile doesn't handle -DRTAPI C++ sources)
USERSRCS +=  rtapi/sim_rtapi_app.cc rtapi/instance.c

#
# List of objects objects/rtrtapi/*.o to link into ../bin/rtapi_app;
# see that target below
#
# These must be included in USERSRCS for .o files to be built

RTAPI_APP_OBJS := \
	$(call TOOBJS, objects/rtapi/sim_rtapi_app.o \
	objects/rtapi/rtapi_support.o \
	objects/rtapi/rtapi_compat.o )

#
# Add RT_CFLAGS to sim_rtapi_app.cc compilation
$(call TOOBJSDEPS, rtapi/sim_rtapi_app.cc): EXTRAFLAGS += -fPIC $(RT_CFLAGS) $(LIBUDEV_CFLAGS)
#
# Build target
../bin/rtapi_app: $(RTAPI_APP_OBJS)
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CXX)  $(LDFLAGS) -o $@ $^ $(RT_LDFLAGS)  $(LIBUDEV_LIBS) -ldl
TARGETS += ../bin/rtapi_app


##################################################################
#                     KERNEL THREAD STYLES
##################################################################
else  # BUILD_SYS == kbuild

obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	rtapi/rtapi_module.o \
	rtapi/rtapi_support.o \
	rtapi/rtapi_common.o \
	rtapi/rtapi_task.o \
	rtapi/rtapi_shmem.o \
	rtapi/rtapi_ring.o \
	rtapi/rtapi_time.o \
	rtapi/rtapi_io.o \
	rtapi/$(THREADS_SOURCE).o

# rule for kernel module, moved from src/Makefile
../rtlib/rtapi$(MODULE_EXT): $(addprefix objects/rt,$(rtapi-objs))

################################################
# rtai settings
# ifeq ($(THREADS),rtai)

# # ...nothing
# endif  # rtai

################################################
# xenomai-kernel settings
ifeq ($(THREADS),xenomai-kernel)

RT_CFLAGS += $(shell $(XENO_CONFIG) --skin=native --cflags )
RT_LDFLAGS += $(shell $(XENO_CONFIG) --skin=native --ldflags )
endif  # xenomai-kernel

endif  # BUILD_SYS == kbuild

##################################################################
#                     ALL THREAD STYLES
##################################################################

# Add RT_CFLAGS to ULAPI compilation
$(call TOOBJSDEPS, $(ULAPI_SRCS)): EXTRAFLAGS += -fPIC $(RT_CFLAGS)
##################################################################
#                     the kdetect test program
##################################################################
RTAPI_KDETECT_SRCS =  rtapi/rtapi_kdetect.c
USERSRCS += $(RTAPI_KDETECT_SRCS)
RTAPI_KDETECT_OBJS := \
	$(call TOOBJS, $(RTAPI_KDETECT_SRCS))

$(call TOOBJSDEPS, $(RTAPI_KDETECT_SRCS)): \
	EXTRAFLAGS += -DTEST  \
	 $(shell $(XENO_CONFIG) --skin=native --cflags )

# Build target
../bin/kdetect: $(RTAPI_KDETECT_OBJS)  ../lib/liblinuxcnchal.so
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ $(RT_LDFLAGS)  ../lib/liblinuxcnchal.so -lrt -ldl

TARGETS += ../bin/kdetect

##################################################################
#                     the rtapi message demon
##################################################################

RTAPI_MSGD_SRCS =  rtapi/rtapi_msgd.c
RTAPI_MSGD_OBJS := \
	$(call TOOBJS, $(RTAPI_MSGD_SRCS))

$(call TOOBJSDEPS, $(RTAPI_MSGD_SRCS)): \
	EXTRAFLAGS += -DTEST  \
	 $(shell $(XENO_CONFIG) --skin=native --cflags )

../bin/rtapi_msgd: $(RTAPI_MSGD_OBJS)  ../lib/liblinuxcnchal.so
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ $(RT_LDFLAGS)  ../lib/liblinuxcnchal.so -lrt -ldl

USERSRCS += $(RTAPI_MSGD_SRCS)
TARGETS += ../bin/rtapi_msgd

##################################################################
#                     the shmdrv shared memory allocator module
#                     the testsmdrv test module
#                     the test client
#
#  loosely based on: http://www.embrisk.com/notes/shmem.html 
#  Status: public domain
#
##################################################################
ifeq ($(USE_SHMDRV),yes)

RT_CFLAGS += -DSHMDEBUG \
	-I$(BASEPWD)/rtapi/shmdrv
INCLUDES += rtapi/shmdrv

ifeq ($(USE_SHMDRV),yes)
obj-m += shmdrv.o
shmdrv-objs := rtapi/shmdrv/shmdrv.o
../rtlib/shmdrv$(MODULE_EXT): $(addprefix objects/rt,$(shmdrv-objs))

obj-m += testshmdrv.o
testshmdrv-objs := rtapi/shmdrv/testshmdrv.o
../rtlib/testshmdrv$(MODULE_EXT): $(addprefix objects/rt,$(testshmdrv-objs))
endif

$(call TOOBJSDEPS, $(TESTCLIENT_SRCS)): EXTRAFLAGS += -Wall -g -O0 -DENABLE_TRACE

TESTCLIENT_SRCS =  rtapi/shmdrv/testclient.c rtapi/shmdrv/shmdrvapi.c
TESTCLIENT_OBJS := $(call TOOBJS, $(TESTCLIENT_SRCS))

../bin/testclient: $(TESTCLIENT_OBJS)
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^

USERSRCS += $(TESTCLIENT_SRCS)
TARGETS += ../bin/testclient

# lock debugging help plus a bit of API example
MUTEXWATCH_SRCS =  rtapi/shmdrv/mutexwatch.c \
	rtapi/shmdrv/shmdrvapi.c

$(call TOOBJSDEPS, $(MUTEXWATCH_SRCS)): \
	EXTRAFLAGS =  -Wall -g -O0 \
	 $(shell $(XENO_CONFIG) --skin=native --cflags)

../bin/mutexwatch: $(call TOOBJS, $(MUTEXWATCH_SRCS))
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^

USERSRCS += $(MUTEXWATCH_SRCS)
TARGETS += ../bin/mutexwatch

endif

