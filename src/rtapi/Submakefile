INCLUDES += rtapi

# this covers the userpci and shmdrv directories too, in a bit cludgy way
../include/%.h: ./rtapi/%.h
	mkdir -p ../include/userpci
	cp  $^ $@

../include/%.hh: ./rtapi/%.hh
	cp  $^ $@

../include/%.h: ./rtapi/shmdrv/%.h
	mkdir -p ../include/shmdrv
	cp  $^ $@

# Thread-specific hacks for linking ulapi.so
# FIXME rtai-config --lxrt-ldflags??!?
ULAPISO_LIBS :=
ifeq ($(THREADS),RTAI_KERNEL)
# these are needed to resolve rt_shm_alloc in ulapi.so
ULAPISO_LIBS += $(shell $(RTAI_KERNEL_THREADS_RTS) --lxrt-ldflags) -llxrt
endif


##########################################
# defaults for all thread styles

# ULAPI:  ../lib/ulapi$THREADSTYLE.so (TBD)
#
# List of sources whose objects objects/rtapi/*.o link into
# ../lib/ulapi$THREADSTYLE.soiblinuxcnchal.so;
#
ULAPI_SRCS := \
	rtapi/rtapi_common.c \
	rtapi/rtapi_task.c \
	rtapi/rtapi_shmem.c \
	rtapi/rtapi_ring.c \
	rtapi/rtapi_time.c \
	rtapi/$(THREADS_SOURCE).c \
	$(if $(filter $(BUILD_SYS),kbuild),rtapi/rtapi_module.c) \
	rtapi/ulapi_main.c  \
	rtapi/rtapi_support.c 

UTIL_SRCS := \
	rtapi/rtapi_compat.c

# ulapi.so needs sources to be built separately for each flavor.  The
# Makefile rules, and TOOBJS & friends, don't handle this case.
#
# Hack around this by linking sources to a separate flavor-specific
# directory and then process in the usual way.
FLAVOR_ULAPI_SRCS := $(patsubst rtapi/%,rtapi/$(threads)/%,$(ULAPI_SRCS))
$(FLAVOR_ULAPI_SRCS) : rtapi/$(threads)/%: rtapi/%
	mkdir -p rtapi/$(threads)
	cp -l $(ULAPI_SRCS) rtapi/$(threads)

# resolved at loadtime
$(call TOOBJSDEPS, $(FLAVOR_ULAPI_SRCS)): EXTRAFLAGS += \
	$(THREADS_RTFLAGS) -fPIC
ULAPISO := ../lib/$(threads)/ulapi.so
$(ULAPISO): ../lib/liblinuxcnchal.so ../lib/liblinuxcncshm.so \
		$(call TOOBJS, $(FLAVOR_ULAPI_SRCS))
	$(ECHO) Creating shared object $@
	@mkdir -p ../lib/$(threads)
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS)  -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ $(ULAPISO_LIBS) $(RT_LDFLAGS) \
	../lib/liblinuxcncshm.so \
	../lib/liblinuxcnchal.so


USERSRCS += $(FLAVOR_ULAPI_SRCS) $(UTIL_SRCS)
TARGETS += $(ULAPISO)

# RTAPI:  $(RTLIBDIR)/*
#
# Makefile defines rtapi-objs, a list of all objects whose sources are
# compiled -DRTAPI and linked into rtapi.[sk]o.  Keep that list up to
# date.




##################################################################
#                 USERLAND THREAD STYLES
##################################################################
ifeq ($(BUILD_SYS),user-dso)

# the rtapi.so module
obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	rtapi/rtapi_main.o \
	rtapi/rtapi_support.o \
	rtapi/rtapi_common.o \
	rtapi/rtapi_task.o \
	rtapi/rtapi_shmem.o \
	rtapi/rtapi_ring.o \
	rtapi/rtapi_time.o \
	rtapi/$(THREADS_SOURCE).o \
	rtapi/shmdrv/shmdrvapi.o \
	rtapi/rtapi_compat.o

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))
$(RTLIBDIR)/rtapi$(MODULE_EXT): EXTRA_LDFLAGS += $(RT_LDFLAGS)

################################################
# ../bin/rtapi_app
#
# List of objects $(OBJDIR)/rtapi/*.o to link into ../bin/rtapi_app;
# see that target below
#
# These must be included in USERSRCS for .o files to be built

RTAPI_APP_OBJS := \
	$(call TOOBJS, objects/rtapi/sim_rtapi_app.o \
	objects/rtapi/rtapi_support.o \
	objects/rtapi/rtapi_compat.o )

#
# Add THREADS_RTFLAGS etc. to sim_rtapi_app.cc compilation
#
# HAAACK:
#
# Build objects/rtapi/sim_rtapi_app.o in Makefile as other USERSRCS,
# but replace -DULAPI with -DRTAPI:  Makefile doesn't handle -DRTAPI
# C++ sources
$(call TOOBJSDEPS, rtapi/sim_rtapi_app.cc): EXTRAFLAGS += \
	$(LIBUDEV_CFLAGS) -UULAPI -DRTAPI -DTHREAD_FLAVOR_ID=0
USERSRCS +=  rtapi/sim_rtapi_app.cc 

#
# Build target
../bin/rtapi_app: $(RTAPI_APP_OBJS)
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CXX)  $(LDFLAGS) -o $@ $^ $(RT_LDFLAGS)  $(LIBUDEV_LIBS) -ldl
TARGETS += ../bin/rtapi_app


##################################################################
#                     KERNEL THREAD STYLES
##################################################################
else  # BUILD_SYS == kbuild

obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	rtapi/rtapi_module.o \
	rtapi/rtapi_support.o \
	rtapi/rtapi_common.o \
	rtapi/rtapi_task.o \
	rtapi/rtapi_shmem.o \
	rtapi/rtapi_ring.o \
	rtapi/rtapi_time.o \
	rtapi/$(THREADS_SOURCE).o

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))

endif  # BUILD_SYS == kbuild

##################################################################
#                     the kdetect test program
##################################################################
RTAPI_KDETECT_SRCS =  rtapi/rtapi_kdetect.c
USERSRCS += $(RTAPI_KDETECT_SRCS)
RTAPI_KDETECT_OBJS := \
	$(call TOOBJS, $(RTAPI_KDETECT_SRCS))

$(call TOOBJSDEPS, $(RTAPI_KDETECT_SRCS)): \
	EXTRAFLAGS += -DTEST

# Build target
../bin/kdetect: $(RTAPI_KDETECT_OBJS)  ../lib/liblinuxcnchal.so
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ \
	    ../lib/liblinuxcnchal.so -lrt -ldl

TARGETS += ../bin/kdetect

##################################################################
#                     the rtapi message demon
##################################################################

RTAPI_MSGD_SRCS =  rtapi/rtapi_msgd.c
RTAPI_MSGD_OBJS := $(call TOOBJS, $(RTAPI_MSGD_SRCS))

$(call TOOBJSDEPS, $(RTAPI_MSGD_SRCS)): \
	EXTRAFLAGS += -DTEST

../bin/rtapi_msgd: ../lib/liblinuxcncshm.so $(RTAPI_MSGD_OBJS)
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ ../lib/liblinuxcncshm.so -lrt

USERSRCS += $(RTAPI_MSGD_SRCS)
TARGETS += ../bin/rtapi_msgd

# lock debugging help plus a bit of API example
FLAVOR_SRCS =  rtapi/flavor.c rtapi/rtapi_compat.c

../bin/flavor: ../lib/liblinuxcncshm.so $(call TOOBJS, $(FLAVOR_SRCS))
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^  ../lib/liblinuxcncshm.so -lrt

USERSRCS += $(FLAVOR_SRCS)
TARGETS += ../bin/flavor
