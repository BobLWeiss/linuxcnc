#! /bin/bash
#
# @configure_input@ 
# on @DATE@
#

export LANG=C
sysconfdir=@sysconfdir@
RUN_IN_PLACE=@RUN_IN_PLACE@


# wait for a list of pids to all exit
anywait(){
    for pid in "$@"; do
        while kill -0 "$pid" >/dev/null 2>&1 ; do
            sleep 0.5
        done
    done
}

CheckKernel() {
    # FIXME Userland threads will need to load the shmdrv module
    # eventually, but for now just return
    test "$BUILD_SYS" = user-dso && return

    # see if the running kernel matches the module version we detected
    RUNNING_KERNEL_VERS=$(uname -r)
    if test "$RUNNING_KERNEL_VERS" != "$KERNEL_VERS"; then
	echo "running kernel does not match version '$KERNEL_VERS'" >&2
	# FIXME does this ever happen?  bomb out now?
    fi

    # see if we have modules for the running kernel
    if ! test -e $MODPATH/rtapi$MODULE_EXT; then
	echo "Module rtapi$MODULE_EXT does not exist in '$MODPATH'" >&2
	exit 1
    fi
}

LoadConfig(){
    if [ "$RUN_IN_PLACE" = yes ]; then
        RTAPICONF=
        # check in the LinuxCNC scripts directory
        # get the canonical name of this script's directory
        SCRIPT_DIR=$(readlink -f $(dirname ${0}))
        # now look for rtapi.conf there
        if [ -f $SCRIPT_DIR/rtapi.conf ] ; then
            RTAPICONF=$SCRIPT_DIR/rtapi.conf
        fi
    else
        if [ -f $sysconfdir/linuxcnc/rtapi.conf ]; then
                RTAPICONF=$sysconfdir/linuxcnc/rtapi.conf
        fi
    fi
    if [ -z "$RTAPICONF" ] ; then
	echo "Missing rtapi.conf.  Check your installation." 1>&2
	exit 1
    fi
    INSMOD="@INSMOD@"
    RMMOD="@RMMOD@"
    LSMOD="@LSMOD@"
    FUSER="@FUSER@"

    # Import the config
    source $RTAPICONF
    # Export the module path specified in the config.
    export MODPATH
    # Generate module lists for loading and unloading
    # lists contain RTOS modules plus RTAPI and HAL
    # unload list is in reverse order
    # any module names that are symlinks are resolved to their real names
    MODULES_LOAD=
    MODULES_UNLOAD=
    case $FLAVOR in
    posix|xenomai|rt-preempt) SHM_DEV=/dev/zero;;
    *)
        for  MOD in shmdrv $MODULES ; do
	    if test "$FLAVOR" = rtai-kernel -a -f $RTAI_MOD_DIR/$MOD; then
		MOD=$RTAI_MOD_DIR/$MOD
	    else
		MOD=$MODPATH/$MOD
	    fi
		
            if [ -z "$MOD" ]; then continue; fi
            if [ -L $MOD ]; then
                MOD=${MOD%/*}/$(readlink $MOD)
            fi
            MODULES_LOAD="$MODULES_LOAD $MOD"
            MOD="${MOD##*/}"
            MOD="${MOD%$MODULE_EXT}"
            MODULES_UNLOAD="$MOD $MODULES_UNLOAD"
        done
	echo "MODULES_LOAD=$MODULES_LOAD"
	echo "MODULES_UNLOAD=$MODULES_UNLOAD"
        if test $FLAVOR = xenomai-kernel; then
            MODULES_LOAD="$MODULES_LOAD $RTLIB_DIR/xeno_math$MODULE_EXT \
		$RTLIB_DIR/rtapi$MODULE_EXT $RTLIB_DIR/hal_lib$MODULE_EXT"
            MODULES_UNLOAD="hal_lib rtapi xeno_math $MODULES_UNLOAD"
  	else
            MODULES_LOAD="$MODULES_LOAD $RTLIB_DIR/rtapi$MODULE_EXT \
		$RTLIB_DIR/hal_lib$MODULE_EXT"
            MODULES_UNLOAD="hal_lib rtapi  $MODULES_UNLOAD"
	fi
        case "$MODULES" in
        *rtai_shm*)
            SHM_DEV=/dev/rtai_shm
        ;;
        *shmdrv*)
            SHM_DEV=/dev/shmdrv
        ;;
        esac
    esac
}

CheckStatus(){
    case $FLAVOR in
    posix|xenomai|rt-preempt)
        if [ -z "$($PIDOF rtapi_app:${INSTANCE})" ]; then
            exit 1
        else
            exit 0
        fi ;;
    *)
        # check loaded/unloaded status of modules
        unset NOTLOADED
        for MOD in $MODULES_UNLOAD ; do
            if @LSMOD@ | awk '{print $1}' | grep -x $MOD >/dev/null ; then
                echo "$MOD is loaded"
            else
                echo "$MOD is not loaded"
                NOTLOADED=NOT
            fi
        done
        if [ -z $NOTLOADED ]; then
            exit 0
        else
            exit 1
        fi
    esac
}

CheckMem(){
# check for user space processes using shared memory
    if [ -e /dev/mbuff ] ; then
	# device file exists, check for processes using it
	if $FUSER -s /dev/mbuff 2>/dev/null; then
	    # at least one process is using it
	    echo "ERROR:  Can't remove RTLinux modules, kill the following process(es) first"
	    $FUSER -v /dev/mbuff
	    exit 1
	fi
    elif [ -e /dev/rtai_shm ] ; then
	# device file exists, check for processes using it
	if $FUSER -s /dev/rtai_shm 2>/dev/null; then
	    # at least one process is using it
	    echo "ERROR:  Can't remove RTAI modules, kill the following process(es) first"
	    $FUSER -v /dev/rtai_shm
	    exit 1
	fi
    fi
}

Load(){
    CheckKernel
    case $FLAVOR in
    posix|xenomai|rt-preempt)
        # check for instance running
	# this is the case if the global segment exists
        # and any processes exist which have it attached
	GLOBALSEG=`printf '/dev/shm/linuxcnc-%d-%2.2d154711' $INSTANCE $INSTANCE` 
	if fuser $GLOBALSEG >/dev/null 2>&1 ; then
	    echo instance $INSTANCE already running!
	    exit 1
	fi

	# check for any leftover shm keys from aborted previous sessions
	INSTKEY=`printf 'linuxcnc-%d-' $INSTANCE` 
	SHMKEYS=`ls /dev/shm/${INSTKEY}* >/dev/null 2>&1`

	if [ "$SHMKEYS" != "" ]  ; then
	    echo "warning: leftover shared memory segments detected - removing: " $SHMKEYS
	    rm  -f  "$SHMKEYS" >/dev/null 2>&1
	fi

	if [ "$DEBUG" != "" ] ; then
	    rtapi_app --instance=$INSTANCE $NAME_CMD \
		--rtmsglevel=$DEBUG \
		--usrmsglevel=$DEBUG \
		--halsize=$HAL_SIZE 
	else
	    rtapi_app --instance $INSTANCE $NAME_CMD \
		--halsize=$HAL_SIZE \
		--rtmsglevel=$DEBUG \
		--usrmsglevel=$DEBUG 2>&1 >/dev/null  
        fi

	# the rtapi_msgd logging demon will wait in the foreground
	# until the HAL data segment exists, confirming the RT stack
	# is fully setup by rtapi_app, and only then disconnect into the
	# background. This closes a race condition where clients
	# like halcmd might try to attach the HAL data segment before
	# rtapi_app got around to creating it.

	rtapi_msgd --instance=$INSTANCE
    ;;

    *)
        for MOD in $MODULES_LOAD ; do
	    # if loading rtapi.ko, tack on parameters
	    if echo $MOD | grep rtapi.ko >/dev/null  ; then
		$INSMOD $MOD hal_size=$HAL_SIZE rtapi_instance=$INSTANCE \
		    rt_msg_level=$DEBUG user_msg_level=$DEBUG $NAME_CMD 
	    else
		$INSMOD $MOD || return $?
	    fi
        done
	# help debugging startup issues 
        if [ "$DEBUG" != "" ] && [ -w /proc/rtapi/debug ] ; then
            echo "$DEBUG" > /proc/rtapi/debug
        fi
	rtapi_msgd --instance=$INSTANCE
    esac
}

CheckLoaded(){
    # this abomination is needed because udev sometimes doesn't
    # have the device ready for us in time.
    n=0
    while [ $n -lt 100 ]; do
        [ -w $SHM_DEV ] && return 0
        echo "." 1>&2
        sleep .1
        n=$(($n+1))
    done
    echo "Can't write to $SHM_DEV - aborting" 1>&2
    exit 1
}



Unload(){
    CheckKernel
    case $FLAVOR in
    posix|xenomai|rt-preempt)
	if [ "$DEBUG" != "" ] ; then
            rtapi_app --instance=$INSTANCE exit 
	else
            rtapi_app --instance=$INSTANCE exit            >/dev/null 2>&1
        fi

	# wait until rtapi_msgd has vanished. This assures
	# that the last user of the global data segment has vanished,
	# making sure an immediate restart of realtime does not find
	# shm segments still hanging around. The only realistic scenario
	# which could trigger this is runtests.
	MSGD_PID=`pidof msgd:$INSTANCE`
	if [ "$MSGD_PID" != "" ] ; then
	    kill $MSGD_PID
	    anywait $MSGD_PID
	fi

	# remove any linuxcnc-specific POSIX shm segments if they exist
	# see src/rtapi/rtapi_shmkeys.h: SHM_FMT
	INSTKEY=`printf 'linuxcnc-%d-' $INSTANCE` 
	rm  -f  /dev/shm/${INSTKEY}* >/dev/null 2>&1
        ;;
    *)
	MSGD_PID=`pidof msgd:$INSTANCE`
	if [ "$MSGD_PID" != "" ] ; then
	    kill $MSGD_PID
	fi
        for module in $MODULES_UNLOAD ; do
	    if [ "$module" == "shmdrv" ] ; then
                # shmdrv needs a bit of time until rtapi+hal_lib
		# have detached shm segments
		sleep 1
	    fi
            $RMMOD $module
        done
    esac
}

CheckUnloaded(){
# checks to see if all modules were unloaded
    STATUS=
    for module in $MODULES_UNLOAD ; do
	# check to see if the module is installed
	if @LSMOD@ | awk '{print $1}' | grep -x $module >/dev/null ; then
	    echo "ERROR: Could not unload '$module'"
	    STATUS=error
	fi
    done
    if [ -n "$STATUS" ] ; then
	exit 1
    fi
}

CMD=$1

case "$CMD" in
  start|load)
	LoadConfig
	Load || exit $?
	CheckLoaded
	;;
  restart|force-reload)
	LoadConfig
	CheckMem
	Unload
	CheckUnloaded
	Load || exit $?
	CheckLoaded
	;;
  stop|unload)
	LoadConfig
	CheckMem
	Unload || exit $?
	;;
  status)
	LoadConfig
	CheckKernel
	CheckStatus
	;;
  *)
	echo "Usage: $0 {start|load|stop|unload|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0

